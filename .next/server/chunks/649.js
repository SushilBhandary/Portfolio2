"use strict";
exports.id = 649;
exports.ids = [649];
exports.modules = {

/***/ 5120:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all)=>{
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = (to, from, except, desc)=>{
    if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
            get: ()=>from[key],
            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
        });
    }
    return to;
};
var __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
        value: mod,
        enumerable: true
    }) : target, mod));
var __toCommonJS = (mod)=>__copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
// src/index.ts
var src_exports = {};
__export(src_exports, {
    render: ()=>render,
    renderAsync: ()=>renderAsync
});
module.exports = __toCommonJS(src_exports);
// src/render.ts
var ReactDomServer = __toESM(__webpack_require__(8765));
var import_html_to_text = __webpack_require__(5173);
var import_pretty = __toESM(__webpack_require__(7006));
var render = (component, options)=>{
    if (options == null ? void 0 : options.plainText) {
        return renderAsPlainText(component, options);
    }
    const doctype = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">';
    const markup = ReactDomServer.renderToStaticMarkup(component);
    const document = `${doctype}${markup}`;
    if (options && options.pretty) {
        return (0, import_pretty.default)(document);
    }
    return document;
};
var renderAsPlainText = (component, _options)=>{
    return (0, import_html_to_text.convert)(ReactDomServer.renderToStaticMarkup(component), {
        selectors: [
            {
                selector: "img",
                format: "skip"
            },
            {
                selector: "#__react-email-preview",
                format: "skip"
            }
        ]
    });
};
// src/renderAsync.ts
var import_html_to_text2 = __webpack_require__(5173);
var import_pretty2 = __toESM(__webpack_require__(7006));
var import_server = __webpack_require__(8765);
async function renderToString(children) {
    const stream = await (0, import_server.renderToReadableStream)(children);
    const html = await readableStreamToString(stream);
    return html.replace(/^<!DOCTYPE html>/, "").replace(/<!-- -->/g, "");
}
async function readableStreamToString(readableStream) {
    let result = "";
    const decoder = new TextDecoder();
    for await (const chunk of readableStream){
        result += decoder.decode(chunk);
    }
    return result;
}
var renderAsync = async (component, options)=>{
    const markup = typeof import_server.renderToStaticMarkup === "undefined" ? await renderToString(component) : (0, import_server.renderToStaticMarkup)(component);
    if (options == null ? void 0 : options.plainText) {
        return (0, import_html_to_text2.convert)(markup, {
            selectors: [
                {
                    selector: "img",
                    format: "skip"
                },
                {
                    selector: "#__react-email-preview",
                    format: "skip"
                }
            ]
        });
    }
    const doctype = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">';
    const document = `${doctype}${markup}`;
    if (options == null ? void 0 : options.pretty) {
        return (0, import_pretty2.default)(document);
    }
    return document;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 2460:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


module.exports = {
    parallel: __webpack_require__(3443),
    serial: __webpack_require__(868),
    serialOrdered: __webpack_require__(6111)
};


/***/ }),

/***/ 2615:
/***/ ((module) => {

// API

module.exports = abort;
/**
 * Aborts leftover active jobs
 *
 * @param {object} state - current state object
 */ function abort(state) {
    Object.keys(state.jobs).forEach(clean.bind(state));
    // reset leftover jobs
    state.jobs = {};
}
/**
 * Cleans up leftover job by invoking abort function for the provided job id
 *
 * @this  state
 * @param {string|number} key - job id to abort
 */ function clean(key) {
    if (typeof this.jobs[key] == "function") {
        this.jobs[key]();
    }
}


/***/ }),

/***/ 2555:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var defer = __webpack_require__(2149);
// API
module.exports = async;
/**
 * Runs provided callback asynchronously
 * even if callback itself is not
 *
 * @param   {function} callback - callback to invoke
 * @returns {function} - augmented callback
 */ function async(callback) {
    var isAsync = false;
    // check if async happened
    defer(function() {
        isAsync = true;
    });
    return function async_callback(err, result) {
        if (isAsync) {
            callback(err, result);
        } else {
            defer(function nextTick_callback() {
                callback(err, result);
            });
        }
    };
}


/***/ }),

/***/ 2149:
/***/ ((module) => {


module.exports = defer;
/**
 * Runs provided function on next iteration of the event loop
 *
 * @param {function} fn - function to run
 */ function defer(fn) {
    var nextTick = typeof setImmediate == "function" ? setImmediate : typeof process == "object" && typeof process.nextTick == "function" ? process.nextTick : null;
    if (nextTick) {
        nextTick(fn);
    } else {
        setTimeout(fn, 0);
    }
}


/***/ }),

/***/ 1711:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var async = __webpack_require__(2555), abort = __webpack_require__(2615);
// API
module.exports = iterate;
/**
 * Iterates over each job object
 *
 * @param {array|object} list - array or object (named list) to iterate over
 * @param {function} iterator - iterator to run
 * @param {object} state - current job status
 * @param {function} callback - invoked when all elements processed
 */ function iterate(list, iterator, state, callback) {
    // store current index
    var key = state["keyedList"] ? state["keyedList"][state.index] : state.index;
    state.jobs[key] = runJob(iterator, key, list[key], function(error, output) {
        // don't repeat yourself
        // skip secondary callbacks
        if (!(key in state.jobs)) {
            return;
        }
        // clean up jobs
        delete state.jobs[key];
        if (error) {
            // don't process rest of the results
            // stop still active jobs
            // and reset the list
            abort(state);
        } else {
            state.results[key] = output;
        }
        // return salvaged results
        callback(error, state.results);
    });
}
/**
 * Runs iterator over provided job element
 *
 * @param   {function} iterator - iterator to invoke
 * @param   {string|number} key - key/index of the element in the list of jobs
 * @param   {mixed} item - job description
 * @param   {function} callback - invoked after iterator is done with the job
 * @returns {function|mixed} - job abort function or something else
 */ function runJob(iterator, key, item, callback) {
    var aborter;
    // allow shortcut if iterator expects only two arguments
    if (iterator.length == 2) {
        aborter = iterator(item, async(callback));
    } else {
        aborter = iterator(item, key, async(callback));
    }
    return aborter;
}


/***/ }),

/***/ 1156:
/***/ ((module) => {

// API

module.exports = state;
/**
 * Creates initial state object
 * for iteration over list
 *
 * @param   {array|object} list - list to iterate over
 * @param   {function|null} sortMethod - function to use for keys sort,
 *                                     or `null` to keep them as is
 * @returns {object} - initial state object
 */ function state(list, sortMethod) {
    var isNamedList = !Array.isArray(list), initState = {
        index: 0,
        keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
        jobs: {},
        results: isNamedList ? {} : [],
        size: isNamedList ? Object.keys(list).length : list.length
    };
    if (sortMethod) {
        // sort array keys based on it's values
        // sort object's keys just on own merit
        initState.keyedList.sort(isNamedList ? sortMethod : function(a, b) {
            return sortMethod(list[a], list[b]);
        });
    }
    return initState;
}


/***/ }),

/***/ 9239:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var abort = __webpack_require__(2615), async = __webpack_require__(2555);
// API
module.exports = terminator;
/**
 * Terminates jobs in the attached state context
 *
 * @this  AsyncKitState#
 * @param {function} callback - final callback to invoke after termination
 */ function terminator(callback) {
    if (!Object.keys(this.jobs).length) {
        return;
    }
    // fast forward iteration index
    this.index = this.size;
    // abort jobs
    abort(this);
    // send back results we have so far
    async(callback)(null, this.results);
}


/***/ }),

/***/ 3443:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var iterate = __webpack_require__(1711), initState = __webpack_require__(1156), terminator = __webpack_require__(9239);
// Public API
module.exports = parallel;
/**
 * Runs iterator over provided array elements in parallel
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */ function parallel(list, iterator, callback) {
    var state = initState(list);
    while(state.index < (state["keyedList"] || list).length){
        iterate(list, iterator, state, function(error, result) {
            if (error) {
                callback(error, result);
                return;
            }
            // looks like it's the last one
            if (Object.keys(state.jobs).length === 0) {
                callback(null, state.results);
                return;
            }
        });
        state.index++;
    }
    return terminator.bind(state, callback);
}


/***/ }),

/***/ 868:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var serialOrdered = __webpack_require__(6111);
// Public API
module.exports = serial;
/**
 * Runs iterator over provided array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */ function serial(list, iterator, callback) {
    return serialOrdered(list, iterator, null, callback);
}


/***/ }),

/***/ 6111:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var iterate = __webpack_require__(1711), initState = __webpack_require__(1156), terminator = __webpack_require__(9239);
// Public API
module.exports = serialOrdered;
// sorting helpers
module.exports.ascending = ascending;
module.exports.descending = descending;
/**
 * Runs iterator over provided sorted array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} sortMethod - custom sort function
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */ function serialOrdered(list, iterator, sortMethod, callback) {
    var state = initState(list, sortMethod);
    iterate(list, iterator, state, function iteratorHandler(error, result) {
        if (error) {
            callback(error, result);
            return;
        }
        state.index++;
        // are we there yet?
        if (state.index < (state["keyedList"] || list).length) {
            iterate(list, iterator, state, iteratorHandler);
            return;
        }
        // done here
        callback(null, state.results);
    });
    return terminator.bind(state, callback);
}
/*
 * -- Sort methods
 */ /**
 * sort helper to sort array elements in ascending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */ function ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
}
/**
 * sort helper to sort array elements in descending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */ function descending(a, b) {
    return -1 * ascending(a, b);
}


/***/ }),

/***/ 7989:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var util = __webpack_require__(3837);
var Stream = (__webpack_require__(2781).Stream);
var DelayedStream = __webpack_require__(848);
module.exports = CombinedStream;
function CombinedStream() {
    this.writable = false;
    this.readable = true;
    this.dataSize = 0;
    this.maxDataSize = 2 * 1024 * 1024;
    this.pauseStreams = true;
    this._released = false;
    this._streams = [];
    this._currentStream = null;
    this._insideLoop = false;
    this._pendingNext = false;
}
util.inherits(CombinedStream, Stream);
CombinedStream.create = function(options) {
    var combinedStream = new this();
    options = options || {};
    for(var option in options){
        combinedStream[option] = options[option];
    }
    return combinedStream;
};
CombinedStream.isStreamLike = function(stream) {
    return typeof stream !== "function" && typeof stream !== "string" && typeof stream !== "boolean" && typeof stream !== "number" && !Buffer.isBuffer(stream);
};
CombinedStream.prototype.append = function(stream) {
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
        if (!(stream instanceof DelayedStream)) {
            var newStream = DelayedStream.create(stream, {
                maxDataSize: Infinity,
                pauseStream: this.pauseStreams
            });
            stream.on("data", this._checkDataSize.bind(this));
            stream = newStream;
        }
        this._handleErrors(stream);
        if (this.pauseStreams) {
            stream.pause();
        }
    }
    this._streams.push(stream);
    return this;
};
CombinedStream.prototype.pipe = function(dest, options) {
    Stream.prototype.pipe.call(this, dest, options);
    this.resume();
    return dest;
};
CombinedStream.prototype._getNext = function() {
    this._currentStream = null;
    if (this._insideLoop) {
        this._pendingNext = true;
        return; // defer call
    }
    this._insideLoop = true;
    try {
        do {
            this._pendingNext = false;
            this._realGetNext();
        }while (this._pendingNext);
    } finally{
        this._insideLoop = false;
    }
};
CombinedStream.prototype._realGetNext = function() {
    var stream = this._streams.shift();
    if (typeof stream == "undefined") {
        this.end();
        return;
    }
    if (typeof stream !== "function") {
        this._pipeNext(stream);
        return;
    }
    var getStream = stream;
    getStream((function(stream) {
        var isStreamLike = CombinedStream.isStreamLike(stream);
        if (isStreamLike) {
            stream.on("data", this._checkDataSize.bind(this));
            this._handleErrors(stream);
        }
        this._pipeNext(stream);
    }).bind(this));
};
CombinedStream.prototype._pipeNext = function(stream) {
    this._currentStream = stream;
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
        stream.on("end", this._getNext.bind(this));
        stream.pipe(this, {
            end: false
        });
        return;
    }
    var value = stream;
    this.write(value);
    this._getNext();
};
CombinedStream.prototype._handleErrors = function(stream) {
    var self = this;
    stream.on("error", function(err) {
        self._emitError(err);
    });
};
CombinedStream.prototype.write = function(data) {
    this.emit("data", data);
};
CombinedStream.prototype.pause = function() {
    if (!this.pauseStreams) {
        return;
    }
    if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == "function") this._currentStream.pause();
    this.emit("pause");
};
CombinedStream.prototype.resume = function() {
    if (!this._released) {
        this._released = true;
        this.writable = true;
        this._getNext();
    }
    if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == "function") this._currentStream.resume();
    this.emit("resume");
};
CombinedStream.prototype.end = function() {
    this._reset();
    this.emit("end");
};
CombinedStream.prototype.destroy = function() {
    this._reset();
    this.emit("close");
};
CombinedStream.prototype._reset = function() {
    this.writable = false;
    this._streams = [];
    this._currentStream = null;
};
CombinedStream.prototype._checkDataSize = function() {
    this._updateDataSize();
    if (this.dataSize <= this.maxDataSize) {
        return;
    }
    var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
    this._emitError(new Error(message));
};
CombinedStream.prototype._updateDataSize = function() {
    this.dataSize = 0;
    var self = this;
    this._streams.forEach(function(stream) {
        if (!stream.dataSize) {
            return;
        }
        self.dataSize += stream.dataSize;
    });
    if (this._currentStream && this._currentStream.dataSize) {
        this.dataSize += this._currentStream.dataSize;
    }
};
CombinedStream.prototype._emitError = function(err) {
    this._reset();
    this.emit("error", err);
};


/***/ }),

/***/ 3382:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * condense-newlines <https://github.com/jonschlinkert/condense-newlines>
 *
 * Copyright (c) 2014 Jon Schlinkert, contributors.
 * Licensed under the MIT License
 */ 
var isWhitespace = __webpack_require__(3603);
var extend = __webpack_require__(4683);
var typeOf = __webpack_require__(79);
module.exports = function(str, options) {
    var opts = extend({}, options);
    var sep = opts.sep || "\n\n";
    var min = opts.min;
    var re;
    if (typeof min === "number" && min !== 2) {
        re = new RegExp("(\\r\\n|\\n|\\u2424) {" + min + ",}");
    }
    if (typeof re === "undefined") {
        re = opts.regex || /(\r\n|\n|\u2424){2,}/g;
    }
    // if a line is 100% whitespace it will be trimmed, so that
    // later we can condense newlines correctly
    if (opts.keepWhitespace !== true) {
        str = str.split("\n").map(function(line) {
            return isWhitespace(line) ? line.trim() : line;
        }).join("\n");
    }
    str = trailingNewline(str, opts);
    return str.replace(re, sep);
};
function trailingNewline(str, options) {
    var val = options.trailingNewline;
    if (val === false) {
        return str;
    }
    switch(typeOf(val)){
        case "string":
            str = str.replace(/\s+$/, options.trailingNewline);
            break;
        case "function":
            str = options.trailingNewline(str);
            break;
        case "undefined":
        case "boolean":
        default:
            {
                str = str.replace(/\s+$/, "\n");
                break;
            }
    }
    return str;
}


/***/ }),

/***/ 8898:
/***/ ((module, exports, __webpack_require__) => {

/* eslint-env browser */ /**
 * This is the web browser implementation of `debug()`.
 */ 
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (()=>{
    let warned = false;
    return ()=>{
        if (!warned) {
            warned = true;
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
    };
})();
/**
 * Colors.
 */ exports.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */ // eslint-disable-next-line complexity
function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (false) {}
    // Internet Explorer and Edge do not support colors.
    if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
    }
    // Is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
     false && (0) || // Is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
    typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
    if (!this.useColors) {
        return;
    }
    const c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    // The final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match)=>{
        if (match === "%%") {
            return;
        }
        index++;
        if (match === "%c") {
            // We only are interested in the *last* %c
            // (the user may have provided their own)
            lastC = index;
        }
    });
    args.splice(lastC, 0, c);
}
/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */ exports.log = console.debug || console.log || (()=>{});
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    try {
        if (namespaces) {
            exports.storage.setItem("debug", namespaces);
        } else {
            exports.storage.removeItem("debug");
        }
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    let r;
    try {
        r = exports.storage.getItem("debug");
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
    }
    return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */ function localstorage() {
    try {
        // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
        // The Browser also has localStorage in the global context.
        return localStorage;
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
module.exports = __webpack_require__(3088)(exports);
const { formatters } = module.exports;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */ formatters.j = function(v) {
    try {
        return JSON.stringify(v);
    } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
    }
};


/***/ }),

/***/ 3088:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */ 
function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = __webpack_require__(5888);
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key)=>{
        createDebug[key] = env[key];
    });
    /**
	* The currently active debug mode names, and names to skip.
	*/ createDebug.names = [];
    createDebug.skips = [];
    /**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/ createDebug.formatters = {};
    /**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/ function selectColor(namespace) {
        let hash = 0;
        for(let i = 0; i < namespace.length; i++){
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    /**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/ function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
            // Disabled?
            if (!debug.enabled) {
                return;
            }
            const self = debug;
            // Set `diff` timestamp
            const curr = Number(new Date());
            const ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== "string") {
                // Anything else let's inspect with %O
                args.unshift("%O");
            }
            // Apply any `formatters` transformations
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format)=>{
                // If we encounter an escaped % then don't increase the array index
                if (match === "%%") {
                    return "%";
                }
                index++;
                const formatter = createDebug.formatters[format];
                if (typeof formatter === "function") {
                    const val = args[index];
                    match = formatter.call(self, val);
                    // Now we need to remove `args[index]` since it's inlined in the `format`
                    args.splice(index, 1);
                    index--;
                }
                return match;
            });
            // Apply env-specific formatting (colors, etc.)
            createDebug.formatArgs.call(self, args);
            const logFn = self.log || createDebug.log;
            logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.
        Object.defineProperty(debug, "enabled", {
            enumerable: true,
            configurable: false,
            get: ()=>{
                if (enableOverride !== null) {
                    return enableOverride;
                }
                if (namespacesCache !== createDebug.namespaces) {
                    namespacesCache = createDebug.namespaces;
                    enabledCache = createDebug.enabled(namespace);
                }
                return enabledCache;
            },
            set: (v)=>{
                enableOverride = v;
            }
        });
        // Env-specific initialization logic for debug instances
        if (typeof createDebug.init === "function") {
            createDebug.init(debug);
        }
        return debug;
    }
    function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
    }
    /**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/ function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for(i = 0; i < len; i++){
            if (!split[i]) {
                continue;
            }
            namespaces = split[i].replace(/\*/g, ".*?");
            if (namespaces[0] === "-") {
                createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
            } else {
                createDebug.names.push(new RegExp("^" + namespaces + "$"));
            }
        }
    }
    /**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/ function disable() {
        const namespaces = [
            ...createDebug.names.map(toNamespace),
            ...createDebug.skips.map(toNamespace).map((namespace)=>"-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
    }
    /**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/ function enabled(name) {
        if (name[name.length - 1] === "*") {
            return true;
        }
        let i;
        let len;
        for(i = 0, len = createDebug.skips.length; i < len; i++){
            if (createDebug.skips[i].test(name)) {
                return false;
            }
        }
        for(i = 0, len = createDebug.names.length; i < len; i++){
            if (createDebug.names[i].test(name)) {
                return true;
            }
        }
        return false;
    }
    /**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/ function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
    }
    /**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/ function coerce(val) {
        if (val instanceof Error) {
            return val.stack || val.message;
        }
        return val;
    }
    /**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/ function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
}
module.exports = setup;


/***/ }),

/***/ 7263:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */ 
if (typeof process === "undefined" || process.type === "renderer" || false === true || process.__nwjs) {
    module.exports = __webpack_require__(8898);
} else {
    module.exports = __webpack_require__(4684);
}


/***/ }),

/***/ 4684:
/***/ ((module, exports, __webpack_require__) => {

/**
 * Module dependencies.
 */ 
const tty = __webpack_require__(6224);
const util = __webpack_require__(3837);
/**
 * This is the Node.js implementation of `debug()`.
 */ exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.destroy = util.deprecate(()=>{}, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
/**
 * Colors.
 */ exports.colors = [
    6,
    2,
    3,
    4,
    5,
    1
];
try {
    // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
    // eslint-disable-next-line import/no-extraneous-dependencies
    const supportsColor = __webpack_require__(1416);
    if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports.colors = [
            20,
            21,
            26,
            27,
            32,
            33,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            56,
            57,
            62,
            63,
            68,
            69,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            92,
            93,
            98,
            99,
            112,
            113,
            128,
            129,
            134,
            135,
            148,
            149,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            178,
            179,
            184,
            185,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            214,
            215,
            220,
            221
        ];
    }
} catch (error) {
// Swallow - we only care if `supports-color` is available; it doesn't have to be.
}
/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */ exports.inspectOpts = Object.keys(process.env).filter((key)=>{
    return /^debug_/i.test(key);
}).reduce((obj, key)=>{
    // Camel-case
    const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k)=>{
        return k.toUpperCase();
    });
    // Coerce string value into JS value
    let val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
    } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
    } else if (val === "null") {
        val = null;
    } else {
        val = Number(val);
    }
    obj[prop] = val;
    return obj;
}, {});
/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */ function useColors() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
}
/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    const { namespace: name, useColors } = this;
    if (useColors) {
        const c = this.color;
        const colorCode = "\x1b[3" + (c < 8 ? c : "8;5;" + c);
        const prefix = `  ${colorCode};1m${name} \u001B[0m`;
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + module.exports.humanize(this.diff) + "\x1b[0m");
    } else {
        args[0] = getDate() + name + " " + args[0];
    }
}
function getDate() {
    if (exports.inspectOpts.hideDate) {
        return "";
    }
    return new Date().toISOString() + " ";
}
/**
 * Invokes `util.format()` with the specified arguments and writes to stderr.
 */ function log(...args) {
    return process.stderr.write(util.format(...args) + "\n");
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    if (namespaces) {
        process.env.DEBUG = namespaces;
    } else {
        // If you set a process.env field to null or undefined, it gets cast to the
        // string 'null' or 'undefined'. Just delete instead.
        delete process.env.DEBUG;
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    return process.env.DEBUG;
}
/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */ function init(debug) {
    debug.inspectOpts = {};
    const keys = Object.keys(exports.inspectOpts);
    for(let i = 0; i < keys.length; i++){
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
}
module.exports = __webpack_require__(3088)(exports);
const { formatters } = module.exports;
/**
 * Map %o to `util.inspect()`, all on a single line.
 */ formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split("\n").map((str)=>str.trim()).join(" ");
};
/**
 * Map %O to `util.inspect()`, allowing multiple lines if needed.
 */ formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
};


/***/ }),

/***/ 7388:
/***/ ((module) => {


var isMergeableObject = function isMergeableObject(value) {
    return isNonNullObject(value) && !isSpecial(value);
};
function isNonNullObject(value) {
    return !!value && typeof value === "object";
}
function isSpecial(value) {
    var stringValue = Object.prototype.toString.call(value);
    return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
}
// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === "function" && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 0xeac7;
function isReactElement(value) {
    return value.$$typeof === REACT_ELEMENT_TYPE;
}
function emptyTarget(val) {
    return Array.isArray(val) ? [] : {};
}
function cloneUnlessOtherwiseSpecified(value, options) {
    return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}
function defaultArrayMerge(target, source, options) {
    return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
    });
}
function getMergeFunction(key, options) {
    if (!options.customMerge) {
        return deepmerge;
    }
    var customMerge = options.customMerge(key);
    return typeof customMerge === "function" ? customMerge : deepmerge;
}
function getEnumerableOwnPropertySymbols(target) {
    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return Object.propertyIsEnumerable.call(target, symbol);
    }) : [];
}
function getKeys(target) {
    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
}
function propertyIsOnObject(object, property) {
    try {
        return property in object;
    } catch (_) {
        return false;
    }
}
// Protects from prototype poisoning and unexpected merging up the prototype chain.
function propertyIsUnsafe(target, key) {
    return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
     && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
     && Object.propertyIsEnumerable.call(target, key) // and also unsafe if they're nonenumerable.
    );
}
function mergeObject(target, source, options) {
    var destination = {};
    if (options.isMergeableObject(target)) {
        getKeys(target).forEach(function(key) {
            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
    }
    getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) {
            return;
        }
        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        } else {
            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        }
    });
    return destination;
}
function deepmerge(target, source, options) {
    options = options || {};
    options.arrayMerge = options.arrayMerge || defaultArrayMerge;
    options.isMergeableObject = options.isMergeableObject || isMergeableObject;
    // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
    // implementations can use it. The caller may not replace it.
    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
    var sourceIsArray = Array.isArray(source);
    var targetIsArray = Array.isArray(target);
    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
    if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
    } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
    } else {
        return mergeObject(target, source, options);
    }
}
deepmerge.all = function deepmergeAll(array, options) {
    if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
    }
    return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
    }, {});
};
var deepmerge_1 = deepmerge;
module.exports = deepmerge_1;


/***/ }),

/***/ 848:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var Stream = (__webpack_require__(2781).Stream);
var util = __webpack_require__(3837);
module.exports = DelayedStream;
function DelayedStream() {
    this.source = null;
    this.dataSize = 0;
    this.maxDataSize = 1024 * 1024;
    this.pauseStream = true;
    this._maxDataSizeExceeded = false;
    this._released = false;
    this._bufferedEvents = [];
}
util.inherits(DelayedStream, Stream);
DelayedStream.create = function(source, options) {
    var delayedStream = new this();
    options = options || {};
    for(var option in options){
        delayedStream[option] = options[option];
    }
    delayedStream.source = source;
    var realEmit = source.emit;
    source.emit = function() {
        delayedStream._handleEmit(arguments);
        return realEmit.apply(source, arguments);
    };
    source.on("error", function() {});
    if (delayedStream.pauseStream) {
        source.pause();
    }
    return delayedStream;
};
Object.defineProperty(DelayedStream.prototype, "readable", {
    configurable: true,
    enumerable: true,
    get: function() {
        return this.source.readable;
    }
});
DelayedStream.prototype.setEncoding = function() {
    return this.source.setEncoding.apply(this.source, arguments);
};
DelayedStream.prototype.resume = function() {
    if (!this._released) {
        this.release();
    }
    this.source.resume();
};
DelayedStream.prototype.pause = function() {
    this.source.pause();
};
DelayedStream.prototype.release = function() {
    this._released = true;
    this._bufferedEvents.forEach((function(args) {
        this.emit.apply(this, args);
    }).bind(this));
    this._bufferedEvents = [];
};
DelayedStream.prototype.pipe = function() {
    var r = Stream.prototype.pipe.apply(this, arguments);
    this.resume();
    return r;
};
DelayedStream.prototype._handleEmit = function(args) {
    if (this._released) {
        this.emit.apply(this, args);
        return;
    }
    if (args[0] === "data") {
        this.dataSize += args[1].length;
        this._checkIfMaxDataSizeExceeded();
    }
    this._bufferedEvents.push(args);
};
DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
    if (this._maxDataSizeExceeded) {
        return;
    }
    if (this.dataSize <= this.maxDataSize) {
        return;
    }
    this._maxDataSizeExceeded = true;
    var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
    this.emit("error", new Error(message));
};


/***/ }),

/***/ 3332:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.attributeNames = exports.elementNames = void 0;
exports.elementNames = new Map([
    "altGlyph",
    "altGlyphDef",
    "altGlyphItem",
    "animateColor",
    "animateMotion",
    "animateTransform",
    "clipPath",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feDistantLight",
    "feDropShadow",
    "feFlood",
    "feFuncA",
    "feFuncB",
    "feFuncG",
    "feFuncR",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMergeNode",
    "feMorphology",
    "feOffset",
    "fePointLight",
    "feSpecularLighting",
    "feSpotLight",
    "feTile",
    "feTurbulence",
    "foreignObject",
    "glyphRef",
    "linearGradient",
    "radialGradient",
    "textPath"
].map(function(val) {
    return [
        val.toLowerCase(),
        val
    ];
}));
exports.attributeNames = new Map([
    "definitionURL",
    "attributeName",
    "attributeType",
    "baseFrequency",
    "baseProfile",
    "calcMode",
    "clipPathUnits",
    "diffuseConstant",
    "edgeMode",
    "filterUnits",
    "glyphRef",
    "gradientTransform",
    "gradientUnits",
    "kernelMatrix",
    "kernelUnitLength",
    "keyPoints",
    "keySplines",
    "keyTimes",
    "lengthAdjust",
    "limitingConeAngle",
    "markerHeight",
    "markerUnits",
    "markerWidth",
    "maskContentUnits",
    "maskUnits",
    "numOctaves",
    "pathLength",
    "patternContentUnits",
    "patternTransform",
    "patternUnits",
    "pointsAtX",
    "pointsAtY",
    "pointsAtZ",
    "preserveAlpha",
    "preserveAspectRatio",
    "primitiveUnits",
    "refX",
    "refY",
    "repeatCount",
    "repeatDur",
    "requiredExtensions",
    "requiredFeatures",
    "specularConstant",
    "specularExponent",
    "spreadMethod",
    "startOffset",
    "stdDeviation",
    "stitchTiles",
    "surfaceScale",
    "systemLanguage",
    "tableValues",
    "targetX",
    "targetY",
    "textLength",
    "viewBox",
    "viewTarget",
    "xChannelSelector",
    "yChannelSelector",
    "zoomAndPan"
].map(function(val) {
    return [
        val.toLowerCase(),
        val
    ];
}));


/***/ }),

/***/ 8408:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var __assign = (void 0) && (void 0).__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = (void 0) && (void 0).__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.render = void 0;
/*
 * Module dependencies
 */ var ElementType = __importStar(__webpack_require__(288));
var entities_1 = __webpack_require__(2951);
/**
 * Mixed-case SVG and MathML tags & attributes
 * recognized by the HTML parser.
 *
 * @see https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign
 */ var foreignNames_js_1 = __webpack_require__(3332);
var unencodedElements = new Set([
    "style",
    "script",
    "xmp",
    "iframe",
    "noembed",
    "noframes",
    "plaintext",
    "noscript"
]);
function replaceQuotes(value) {
    return value.replace(/"/g, "&quot;");
}
/**
 * Format attributes
 */ function formatAttributes(attributes, opts) {
    var _a;
    if (!attributes) return;
    var encode = ((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) === false ? replaceQuotes : opts.xmlMode || opts.encodeEntities !== "utf8" ? entities_1.encodeXML : entities_1.escapeAttribute;
    return Object.keys(attributes).map(function(key) {
        var _a, _b;
        var value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : "";
        if (opts.xmlMode === "foreign") {
            /* Fix up mixed-case attribute names */ key = (_b = foreignNames_js_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;
        }
        if (!opts.emptyAttrs && !opts.xmlMode && value === "") {
            return key;
        }
        return "".concat(key, '="').concat(encode(value), '"');
    }).join(" ");
}
/**
 * Self-enclosing tags
 */ var singleTag = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
]);
/**
 * Renders a DOM node or an array of DOM nodes to a string.
 *
 * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).
 *
 * @param node Node to be rendered.
 * @param options Changes serialization behavior
 */ function render(node, options) {
    if (options === void 0) {
        options = {};
    }
    var nodes = "length" in node ? node : [
        node
    ];
    var output = "";
    for(var i = 0; i < nodes.length; i++){
        output += renderNode(nodes[i], options);
    }
    return output;
}
exports.render = render;
exports["default"] = render;
function renderNode(node, options) {
    switch(node.type){
        case ElementType.Root:
            return render(node.children, options);
        // @ts-expect-error We don't use `Doctype` yet
        case ElementType.Doctype:
        case ElementType.Directive:
            return renderDirective(node);
        case ElementType.Comment:
            return renderComment(node);
        case ElementType.CDATA:
            return renderCdata(node);
        case ElementType.Script:
        case ElementType.Style:
        case ElementType.Tag:
            return renderTag(node, options);
        case ElementType.Text:
            return renderText(node, options);
    }
}
var foreignModeIntegrationPoints = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignObject",
    "desc",
    "title"
]);
var foreignElements = new Set([
    "svg",
    "math"
]);
function renderTag(elem, opts) {
    var _a;
    // Handle SVG / MathML in HTML
    if (opts.xmlMode === "foreign") {
        /* Fix up mixed-case element names */ elem.name = (_a = foreignNames_js_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;
        /* Exit foreign mode at integration points */ if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {
            opts = __assign(__assign({}, opts), {
                xmlMode: false
            });
        }
    }
    if (!opts.xmlMode && foreignElements.has(elem.name)) {
        opts = __assign(__assign({}, opts), {
            xmlMode: "foreign"
        });
    }
    var tag = "<".concat(elem.name);
    var attribs = formatAttributes(elem.attribs, opts);
    if (attribs) {
        tag += " ".concat(attribs);
    }
    if (elem.children.length === 0 && (opts.xmlMode ? opts.selfClosingTags !== false : opts.selfClosingTags && singleTag.has(elem.name))) {
        if (!opts.xmlMode) tag += " ";
        tag += "/>";
    } else {
        tag += ">";
        if (elem.children.length > 0) {
            tag += render(elem.children, opts);
        }
        if (opts.xmlMode || !singleTag.has(elem.name)) {
            tag += "</".concat(elem.name, ">");
        }
    }
    return tag;
}
function renderDirective(elem) {
    return "<".concat(elem.data, ">");
}
function renderText(elem, opts) {
    var _a;
    var data = elem.data || "";
    // If entities weren't decoded, no need to encode them back
    if (((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) {
        data = opts.xmlMode || opts.encodeEntities !== "utf8" ? (0, entities_1.encodeXML)(data) : (0, entities_1.escapeText)(data);
    }
    return data;
}
function renderCdata(elem) {
    return "<![CDATA[".concat(elem.children[0].data, "]]>");
}
function renderComment(elem) {
    return "<!--".concat(elem.data, "-->");
}


/***/ }),

/***/ 288:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;
/** Types of elements found in htmlparser2's DOM */ var ElementType;
(function(ElementType) {
    /** Type for the root element of a document */ ElementType["Root"] = "root";
    /** Type for Text */ ElementType["Text"] = "text";
    /** Type for <? ... ?> */ ElementType["Directive"] = "directive";
    /** Type for <!-- ... --> */ ElementType["Comment"] = "comment";
    /** Type for <script> tags */ ElementType["Script"] = "script";
    /** Type for <style> tags */ ElementType["Style"] = "style";
    /** Type for Any tag */ ElementType["Tag"] = "tag";
    /** Type for <![CDATA[ ... ]]> */ ElementType["CDATA"] = "cdata";
    /** Type for <!doctype ...> */ ElementType["Doctype"] = "doctype";
})(ElementType = exports.ElementType || (exports.ElementType = {}));
/**
 * Tests whether an element is a tag or not.
 *
 * @param elem Element to test
 */ function isTag(elem) {
    return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;
}
exports.isTag = isTag;
// Exports for backwards compatibility
/** Type for the root element of a document */ exports.Root = ElementType.Root;
/** Type for Text */ exports.Text = ElementType.Text;
/** Type for <? ... ?> */ exports.Directive = ElementType.Directive;
/** Type for <!-- ... --> */ exports.Comment = ElementType.Comment;
/** Type for <script> tags */ exports.Script = ElementType.Script;
/** Type for <style> tags */ exports.Style = ElementType.Style;
/** Type for Any tag */ exports.Tag = ElementType.Tag;
/** Type for <![CDATA[ ... ]]> */ exports.CDATA = ElementType.CDATA;
/** Type for <!doctype ...> */ exports.Doctype = ElementType.Doctype;


/***/ }),

/***/ 3673:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DomHandler = void 0;
var domelementtype_1 = __webpack_require__(288);
var node_js_1 = __webpack_require__(4221);
__exportStar(__webpack_require__(4221), exports);
// Default options
var defaultOpts = {
    withStartIndices: false,
    withEndIndices: false,
    xmlMode: false
};
var DomHandler = /** @class */ function() {
    /**
     * @param callback Called once parsing has completed.
     * @param options Settings for the handler.
     * @param elementCB Callback whenever a tag is closed.
     */ function DomHandler(callback, options, elementCB) {
        /** The elements of the DOM */ this.dom = [];
        /** The root element for the DOM */ this.root = new node_js_1.Document(this.dom);
        /** Indicated whether parsing has been completed. */ this.done = false;
        /** Stack of open tags. */ this.tagStack = [
            this.root
        ];
        /** A data node that is still being written to. */ this.lastNode = null;
        /** Reference to the parser instance. Used for location information. */ this.parser = null;
        // Make it possible to skip arguments, for backwards-compatibility
        if (typeof options === "function") {
            elementCB = options;
            options = defaultOpts;
        }
        if (typeof callback === "object") {
            options = callback;
            callback = undefined;
        }
        this.callback = callback !== null && callback !== void 0 ? callback : null;
        this.options = options !== null && options !== void 0 ? options : defaultOpts;
        this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
    }
    DomHandler.prototype.onparserinit = function(parser) {
        this.parser = parser;
    };
    // Resets the handler back to starting state
    DomHandler.prototype.onreset = function() {
        this.dom = [];
        this.root = new node_js_1.Document(this.dom);
        this.done = false;
        this.tagStack = [
            this.root
        ];
        this.lastNode = null;
        this.parser = null;
    };
    // Signals the handler that parsing is done
    DomHandler.prototype.onend = function() {
        if (this.done) return;
        this.done = true;
        this.parser = null;
        this.handleCallback(null);
    };
    DomHandler.prototype.onerror = function(error) {
        this.handleCallback(error);
    };
    DomHandler.prototype.onclosetag = function() {
        this.lastNode = null;
        var elem = this.tagStack.pop();
        if (this.options.withEndIndices) {
            elem.endIndex = this.parser.endIndex;
        }
        if (this.elementCB) this.elementCB(elem);
    };
    DomHandler.prototype.onopentag = function(name, attribs) {
        var type = this.options.xmlMode ? domelementtype_1.ElementType.Tag : undefined;
        var element = new node_js_1.Element(name, attribs, undefined, type);
        this.addNode(element);
        this.tagStack.push(element);
    };
    DomHandler.prototype.ontext = function(data) {
        var lastNode = this.lastNode;
        if (lastNode && lastNode.type === domelementtype_1.ElementType.Text) {
            lastNode.data += data;
            if (this.options.withEndIndices) {
                lastNode.endIndex = this.parser.endIndex;
            }
        } else {
            var node = new node_js_1.Text(data);
            this.addNode(node);
            this.lastNode = node;
        }
    };
    DomHandler.prototype.oncomment = function(data) {
        if (this.lastNode && this.lastNode.type === domelementtype_1.ElementType.Comment) {
            this.lastNode.data += data;
            return;
        }
        var node = new node_js_1.Comment(data);
        this.addNode(node);
        this.lastNode = node;
    };
    DomHandler.prototype.oncommentend = function() {
        this.lastNode = null;
    };
    DomHandler.prototype.oncdatastart = function() {
        var text = new node_js_1.Text("");
        var node = new node_js_1.CDATA([
            text
        ]);
        this.addNode(node);
        text.parent = node;
        this.lastNode = text;
    };
    DomHandler.prototype.oncdataend = function() {
        this.lastNode = null;
    };
    DomHandler.prototype.onprocessinginstruction = function(name, data) {
        var node = new node_js_1.ProcessingInstruction(name, data);
        this.addNode(node);
    };
    DomHandler.prototype.handleCallback = function(error) {
        if (typeof this.callback === "function") {
            this.callback(error, this.dom);
        } else if (error) {
            throw error;
        }
    };
    DomHandler.prototype.addNode = function(node) {
        var parent = this.tagStack[this.tagStack.length - 1];
        var previousSibling = parent.children[parent.children.length - 1];
        if (this.options.withStartIndices) {
            node.startIndex = this.parser.startIndex;
        }
        if (this.options.withEndIndices) {
            node.endIndex = this.parser.endIndex;
        }
        parent.children.push(node);
        if (previousSibling) {
            node.prev = previousSibling;
            previousSibling.next = node;
        }
        node.parent = parent;
        this.lastNode = null;
    };
    return DomHandler;
}();
exports.DomHandler = DomHandler;
exports["default"] = DomHandler;


/***/ }),

/***/ 4221:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var __extends = (void 0) && (void 0).__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = (void 0) && (void 0).__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.cloneNode = exports.hasChildren = exports.isDocument = exports.isDirective = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = exports.Element = exports.Document = exports.CDATA = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;
var domelementtype_1 = __webpack_require__(288);
/**
 * This object will be used as the prototype for Nodes when creating a
 * DOM-Level-1-compliant structure.
 */ var Node = /** @class */ function() {
    function Node() {
        /** Parent of the node */ this.parent = null;
        /** Previous sibling */ this.prev = null;
        /** Next sibling */ this.next = null;
        /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */ this.startIndex = null;
        /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */ this.endIndex = null;
    }
    Object.defineProperty(Node.prototype, "parentNode", {
        // Read-write aliases for properties
        /**
         * Same as {@link parent}.
         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
         */ get: function() {
            return this.parent;
        },
        set: function(parent) {
            this.parent = parent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "previousSibling", {
        /**
         * Same as {@link prev}.
         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
         */ get: function() {
            return this.prev;
        },
        set: function(prev) {
            this.prev = prev;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "nextSibling", {
        /**
         * Same as {@link next}.
         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
         */ get: function() {
            return this.next;
        },
        set: function(next) {
            this.next = next;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Clone this node, and optionally its children.
     *
     * @param recursive Clone child nodes as well.
     * @returns A clone of the node.
     */ Node.prototype.cloneNode = function(recursive) {
        if (recursive === void 0) {
            recursive = false;
        }
        return cloneNode(this, recursive);
    };
    return Node;
}();
exports.Node = Node;
/**
 * A node that contains some data.
 */ var DataNode = /** @class */ function(_super) {
    __extends(DataNode, _super);
    /**
     * @param data The content of the data node
     */ function DataNode(data) {
        var _this = _super.call(this) || this;
        _this.data = data;
        return _this;
    }
    Object.defineProperty(DataNode.prototype, "nodeValue", {
        /**
         * Same as {@link data}.
         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
         */ get: function() {
            return this.data;
        },
        set: function(data) {
            this.data = data;
        },
        enumerable: false,
        configurable: true
    });
    return DataNode;
}(Node);
exports.DataNode = DataNode;
/**
 * Text within the document.
 */ var Text = /** @class */ function(_super) {
    __extends(Text, _super);
    function Text() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = domelementtype_1.ElementType.Text;
        return _this;
    }
    Object.defineProperty(Text.prototype, "nodeType", {
        get: function() {
            return 3;
        },
        enumerable: false,
        configurable: true
    });
    return Text;
}(DataNode);
exports.Text = Text;
/**
 * Comments within the document.
 */ var Comment = /** @class */ function(_super) {
    __extends(Comment, _super);
    function Comment() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = domelementtype_1.ElementType.Comment;
        return _this;
    }
    Object.defineProperty(Comment.prototype, "nodeType", {
        get: function() {
            return 8;
        },
        enumerable: false,
        configurable: true
    });
    return Comment;
}(DataNode);
exports.Comment = Comment;
/**
 * Processing instructions, including doc types.
 */ var ProcessingInstruction = /** @class */ function(_super) {
    __extends(ProcessingInstruction, _super);
    function ProcessingInstruction(name, data) {
        var _this = _super.call(this, data) || this;
        _this.name = name;
        _this.type = domelementtype_1.ElementType.Directive;
        return _this;
    }
    Object.defineProperty(ProcessingInstruction.prototype, "nodeType", {
        get: function() {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    return ProcessingInstruction;
}(DataNode);
exports.ProcessingInstruction = ProcessingInstruction;
/**
 * A `Node` that can have children.
 */ var NodeWithChildren = /** @class */ function(_super) {
    __extends(NodeWithChildren, _super);
    /**
     * @param children Children of the node. Only certain node types can have children.
     */ function NodeWithChildren(children) {
        var _this = _super.call(this) || this;
        _this.children = children;
        return _this;
    }
    Object.defineProperty(NodeWithChildren.prototype, "firstChild", {
        // Aliases
        /** First child of the node. */ get: function() {
            var _a;
            return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NodeWithChildren.prototype, "lastChild", {
        /** Last child of the node. */ get: function() {
            return this.children.length > 0 ? this.children[this.children.length - 1] : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NodeWithChildren.prototype, "childNodes", {
        /**
         * Same as {@link children}.
         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
         */ get: function() {
            return this.children;
        },
        set: function(children) {
            this.children = children;
        },
        enumerable: false,
        configurable: true
    });
    return NodeWithChildren;
}(Node);
exports.NodeWithChildren = NodeWithChildren;
var CDATA = /** @class */ function(_super) {
    __extends(CDATA, _super);
    function CDATA() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = domelementtype_1.ElementType.CDATA;
        return _this;
    }
    Object.defineProperty(CDATA.prototype, "nodeType", {
        get: function() {
            return 4;
        },
        enumerable: false,
        configurable: true
    });
    return CDATA;
}(NodeWithChildren);
exports.CDATA = CDATA;
/**
 * The root node of the document.
 */ var Document = /** @class */ function(_super) {
    __extends(Document, _super);
    function Document() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = domelementtype_1.ElementType.Root;
        return _this;
    }
    Object.defineProperty(Document.prototype, "nodeType", {
        get: function() {
            return 9;
        },
        enumerable: false,
        configurable: true
    });
    return Document;
}(NodeWithChildren);
exports.Document = Document;
/**
 * An element within the DOM.
 */ var Element = /** @class */ function(_super) {
    __extends(Element, _super);
    /**
     * @param name Name of the tag, eg. `div`, `span`.
     * @param attribs Object mapping attribute names to attribute values.
     * @param children Children of the node.
     */ function Element(name, attribs, children, type) {
        if (children === void 0) {
            children = [];
        }
        if (type === void 0) {
            type = name === "script" ? domelementtype_1.ElementType.Script : name === "style" ? domelementtype_1.ElementType.Style : domelementtype_1.ElementType.Tag;
        }
        var _this = _super.call(this, children) || this;
        _this.name = name;
        _this.attribs = attribs;
        _this.type = type;
        return _this;
    }
    Object.defineProperty(Element.prototype, "nodeType", {
        get: function() {
            return 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "tagName", {
        // DOM Level 1 aliases
        /**
         * Same as {@link name}.
         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
         */ get: function() {
            return this.name;
        },
        set: function(name) {
            this.name = name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "attributes", {
        get: function() {
            var _this = this;
            return Object.keys(this.attribs).map(function(name) {
                var _a, _b;
                return {
                    name: name,
                    value: _this.attribs[name],
                    namespace: (_a = _this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name],
                    prefix: (_b = _this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name]
                };
            });
        },
        enumerable: false,
        configurable: true
    });
    return Element;
}(NodeWithChildren);
exports.Element = Element;
/**
 * @param node Node to check.
 * @returns `true` if the node is a `Element`, `false` otherwise.
 */ function isTag(node) {
    return (0, domelementtype_1.isTag)(node);
}
exports.isTag = isTag;
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `CDATA`, `false` otherwise.
 */ function isCDATA(node) {
    return node.type === domelementtype_1.ElementType.CDATA;
}
exports.isCDATA = isCDATA;
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `Text`, `false` otherwise.
 */ function isText(node) {
    return node.type === domelementtype_1.ElementType.Text;
}
exports.isText = isText;
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `Comment`, `false` otherwise.
 */ function isComment(node) {
    return node.type === domelementtype_1.ElementType.Comment;
}
exports.isComment = isComment;
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.
 */ function isDirective(node) {
    return node.type === domelementtype_1.ElementType.Directive;
}
exports.isDirective = isDirective;
/**
 * @param node Node to check.
 * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.
 */ function isDocument(node) {
    return node.type === domelementtype_1.ElementType.Root;
}
exports.isDocument = isDocument;
/**
 * @param node Node to check.
 * @returns `true` if the node has children, `false` otherwise.
 */ function hasChildren(node) {
    return Object.prototype.hasOwnProperty.call(node, "children");
}
exports.hasChildren = hasChildren;
/**
 * Clone a node, and optionally its children.
 *
 * @param recursive Clone child nodes as well.
 * @returns A clone of the node.
 */ function cloneNode(node, recursive) {
    if (recursive === void 0) {
        recursive = false;
    }
    var result;
    if (isText(node)) {
        result = new Text(node.data);
    } else if (isComment(node)) {
        result = new Comment(node.data);
    } else if (isTag(node)) {
        var children = recursive ? cloneChildren(node.children) : [];
        var clone_1 = new Element(node.name, __assign({}, node.attribs), children);
        children.forEach(function(child) {
            return child.parent = clone_1;
        });
        if (node.namespace != null) {
            clone_1.namespace = node.namespace;
        }
        if (node["x-attribsNamespace"]) {
            clone_1["x-attribsNamespace"] = __assign({}, node["x-attribsNamespace"]);
        }
        if (node["x-attribsPrefix"]) {
            clone_1["x-attribsPrefix"] = __assign({}, node["x-attribsPrefix"]);
        }
        result = clone_1;
    } else if (isCDATA(node)) {
        var children = recursive ? cloneChildren(node.children) : [];
        var clone_2 = new CDATA(children);
        children.forEach(function(child) {
            return child.parent = clone_2;
        });
        result = clone_2;
    } else if (isDocument(node)) {
        var children = recursive ? cloneChildren(node.children) : [];
        var clone_3 = new Document(children);
        children.forEach(function(child) {
            return child.parent = clone_3;
        });
        if (node["x-mode"]) {
            clone_3["x-mode"] = node["x-mode"];
        }
        result = clone_3;
    } else if (isDirective(node)) {
        var instruction = new ProcessingInstruction(node.name, node.data);
        if (node["x-name"] != null) {
            instruction["x-name"] = node["x-name"];
            instruction["x-publicId"] = node["x-publicId"];
            instruction["x-systemId"] = node["x-systemId"];
        }
        result = instruction;
    } else {
        throw new Error("Not implemented yet: ".concat(node.type));
    }
    result.startIndex = node.startIndex;
    result.endIndex = node.endIndex;
    if (node.sourceCodeLocation != null) {
        result.sourceCodeLocation = node.sourceCodeLocation;
    }
    return result;
}
exports.cloneNode = cloneNode;
function cloneChildren(childs) {
    var children = childs.map(function(child) {
        return cloneNode(child, true);
    });
    for(var i = 1; i < children.length; i++){
        children[i].prev = children[i - 1];
        children[i - 1].next = children[i];
    }
    return children;
}


/***/ }),

/***/ 6381:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getFeed = void 0;
var stringify_js_1 = __webpack_require__(1953);
var legacy_js_1 = __webpack_require__(1317);
/**
 * Get the feed object from the root of a DOM tree.
 *
 * @category Feeds
 * @param doc - The DOM to to extract the feed from.
 * @returns The feed.
 */ function getFeed(doc) {
    var feedRoot = getOneElement(isValidFeed, doc);
    return !feedRoot ? null : feedRoot.name === "feed" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);
}
exports.getFeed = getFeed;
/**
 * Parse an Atom feed.
 *
 * @param feedRoot The root of the feed.
 * @returns The parsed feed.
 */ function getAtomFeed(feedRoot) {
    var _a;
    var childs = feedRoot.children;
    var feed = {
        type: "atom",
        items: (0, legacy_js_1.getElementsByTagName)("entry", childs).map(function(item) {
            var _a;
            var children = item.children;
            var entry = {
                media: getMediaElements(children)
            };
            addConditionally(entry, "id", "id", children);
            addConditionally(entry, "title", "title", children);
            var href = (_a = getOneElement("link", children)) === null || _a === void 0 ? void 0 : _a.attribs["href"];
            if (href) {
                entry.link = href;
            }
            var description = fetch("summary", children) || fetch("content", children);
            if (description) {
                entry.description = description;
            }
            var pubDate = fetch("updated", children);
            if (pubDate) {
                entry.pubDate = new Date(pubDate);
            }
            return entry;
        })
    };
    addConditionally(feed, "id", "id", childs);
    addConditionally(feed, "title", "title", childs);
    var href = (_a = getOneElement("link", childs)) === null || _a === void 0 ? void 0 : _a.attribs["href"];
    if (href) {
        feed.link = href;
    }
    addConditionally(feed, "description", "subtitle", childs);
    var updated = fetch("updated", childs);
    if (updated) {
        feed.updated = new Date(updated);
    }
    addConditionally(feed, "author", "email", childs, true);
    return feed;
}
/**
 * Parse a RSS feed.
 *
 * @param feedRoot The root of the feed.
 * @returns The parsed feed.
 */ function getRssFeed(feedRoot) {
    var _a, _b;
    var childs = (_b = (_a = getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
    var feed = {
        type: feedRoot.name.substr(0, 3),
        id: "",
        items: (0, legacy_js_1.getElementsByTagName)("item", feedRoot.children).map(function(item) {
            var children = item.children;
            var entry = {
                media: getMediaElements(children)
            };
            addConditionally(entry, "id", "guid", children);
            addConditionally(entry, "title", "title", children);
            addConditionally(entry, "link", "link", children);
            addConditionally(entry, "description", "description", children);
            var pubDate = fetch("pubDate", children) || fetch("dc:date", children);
            if (pubDate) entry.pubDate = new Date(pubDate);
            return entry;
        })
    };
    addConditionally(feed, "title", "title", childs);
    addConditionally(feed, "link", "link", childs);
    addConditionally(feed, "description", "description", childs);
    var updated = fetch("lastBuildDate", childs);
    if (updated) {
        feed.updated = new Date(updated);
    }
    addConditionally(feed, "author", "managingEditor", childs, true);
    return feed;
}
var MEDIA_KEYS_STRING = [
    "url",
    "type",
    "lang"
];
var MEDIA_KEYS_INT = [
    "fileSize",
    "bitrate",
    "framerate",
    "samplingrate",
    "channels",
    "duration",
    "height",
    "width"
];
/**
 * Get all media elements of a feed item.
 *
 * @param where Nodes to search in.
 * @returns Media elements.
 */ function getMediaElements(where) {
    return (0, legacy_js_1.getElementsByTagName)("media:content", where).map(function(elem) {
        var attribs = elem.attribs;
        var media = {
            medium: attribs["medium"],
            isDefault: !!attribs["isDefault"]
        };
        for(var _i = 0, MEDIA_KEYS_STRING_1 = MEDIA_KEYS_STRING; _i < MEDIA_KEYS_STRING_1.length; _i++){
            var attrib = MEDIA_KEYS_STRING_1[_i];
            if (attribs[attrib]) {
                media[attrib] = attribs[attrib];
            }
        }
        for(var _a = 0, MEDIA_KEYS_INT_1 = MEDIA_KEYS_INT; _a < MEDIA_KEYS_INT_1.length; _a++){
            var attrib = MEDIA_KEYS_INT_1[_a];
            if (attribs[attrib]) {
                media[attrib] = parseInt(attribs[attrib], 10);
            }
        }
        if (attribs["expression"]) {
            media.expression = attribs["expression"];
        }
        return media;
    });
}
/**
 * Get one element by tag name.
 *
 * @param tagName Tag name to look for
 * @param node Node to search in
 * @returns The element or null
 */ function getOneElement(tagName, node) {
    return (0, legacy_js_1.getElementsByTagName)(tagName, node, true, 1)[0];
}
/**
 * Get the text content of an element with a certain tag name.
 *
 * @param tagName Tag name to look for.
 * @param where Node to search in.
 * @param recurse Whether to recurse into child nodes.
 * @returns The text content of the element.
 */ function fetch(tagName, where, recurse) {
    if (recurse === void 0) {
        recurse = false;
    }
    return (0, stringify_js_1.textContent)((0, legacy_js_1.getElementsByTagName)(tagName, where, recurse, 1)).trim();
}
/**
 * Adds a property to an object if it has a value.
 *
 * @param obj Object to be extended
 * @param prop Property name
 * @param tagName Tag name that contains the conditionally added property
 * @param where Element to search for the property
 * @param recurse Whether to recurse into child nodes.
 */ function addConditionally(obj, prop, tagName, where, recurse) {
    if (recurse === void 0) {
        recurse = false;
    }
    var val = fetch(tagName, where, recurse);
    if (val) obj[prop] = val;
}
/**
 * Checks if an element is a feed root node.
 *
 * @param value The name of the element to check.
 * @returns Whether an element is a feed root node.
 */ function isValidFeed(value) {
    return value === "rss" || value === "feed" || value === "rdf:RDF";
} //# sourceMappingURL=feeds.js.map


/***/ }),

/***/ 808:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.uniqueSort = exports.compareDocumentPosition = exports.DocumentPosition = exports.removeSubsets = void 0;
var domhandler_1 = __webpack_require__(3673);
/**
 * Given an array of nodes, remove any member that is contained by another
 * member.
 *
 * @category Helpers
 * @param nodes Nodes to filter.
 * @returns Remaining nodes that aren't contained by other nodes.
 */ function removeSubsets(nodes) {
    var idx = nodes.length;
    /*
     * Check if each node (or one of its ancestors) is already contained in the
     * array.
     */ while(--idx >= 0){
        var node = nodes[idx];
        /*
         * Remove the node if it is not unique.
         * We are going through the array from the end, so we only
         * have to check nodes that preceed the node under consideration in the array.
         */ if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
            nodes.splice(idx, 1);
            continue;
        }
        for(var ancestor = node.parent; ancestor; ancestor = ancestor.parent){
            if (nodes.includes(ancestor)) {
                nodes.splice(idx, 1);
                break;
            }
        }
    }
    return nodes;
}
exports.removeSubsets = removeSubsets;
/**
 * @category Helpers
 * @see {@link http://dom.spec.whatwg.org/#dom-node-comparedocumentposition}
 */ var DocumentPosition;
(function(DocumentPosition) {
    DocumentPosition[DocumentPosition["DISCONNECTED"] = 1] = "DISCONNECTED";
    DocumentPosition[DocumentPosition["PRECEDING"] = 2] = "PRECEDING";
    DocumentPosition[DocumentPosition["FOLLOWING"] = 4] = "FOLLOWING";
    DocumentPosition[DocumentPosition["CONTAINS"] = 8] = "CONTAINS";
    DocumentPosition[DocumentPosition["CONTAINED_BY"] = 16] = "CONTAINED_BY";
})(DocumentPosition = exports.DocumentPosition || (exports.DocumentPosition = {}));
/**
 * Compare the position of one node against another node in any other document,
 * returning a bitmask with the values from {@link DocumentPosition}.
 *
 * Document order:
 * > There is an ordering, document order, defined on all the nodes in the
 * > document corresponding to the order in which the first character of the
 * > XML representation of each node occurs in the XML representation of the
 * > document after expansion of general entities. Thus, the document element
 * > node will be the first node. Element nodes occur before their children.
 * > Thus, document order orders element nodes in order of the occurrence of
 * > their start-tag in the XML (after expansion of entities). The attribute
 * > nodes of an element occur after the element and before its children. The
 * > relative order of attribute nodes is implementation-dependent.
 *
 * Source:
 * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
 *
 * @category Helpers
 * @param nodeA The first node to use in the comparison
 * @param nodeB The second node to use in the comparison
 * @returns A bitmask describing the input nodes' relative position.
 *
 * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
 * a description of these values.
 */ function compareDocumentPosition(nodeA, nodeB) {
    var aParents = [];
    var bParents = [];
    if (nodeA === nodeB) {
        return 0;
    }
    var current = (0, domhandler_1.hasChildren)(nodeA) ? nodeA : nodeA.parent;
    while(current){
        aParents.unshift(current);
        current = current.parent;
    }
    current = (0, domhandler_1.hasChildren)(nodeB) ? nodeB : nodeB.parent;
    while(current){
        bParents.unshift(current);
        current = current.parent;
    }
    var maxIdx = Math.min(aParents.length, bParents.length);
    var idx = 0;
    while(idx < maxIdx && aParents[idx] === bParents[idx]){
        idx++;
    }
    if (idx === 0) {
        return DocumentPosition.DISCONNECTED;
    }
    var sharedParent = aParents[idx - 1];
    var siblings = sharedParent.children;
    var aSibling = aParents[idx];
    var bSibling = bParents[idx];
    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
        if (sharedParent === nodeB) {
            return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;
        }
        return DocumentPosition.FOLLOWING;
    }
    if (sharedParent === nodeA) {
        return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;
    }
    return DocumentPosition.PRECEDING;
}
exports.compareDocumentPosition = compareDocumentPosition;
/**
 * Sort an array of nodes based on their relative position in the document,
 * removing any duplicate nodes. If the array contains nodes that do not belong
 * to the same document, sort order is unspecified.
 *
 * @category Helpers
 * @param nodes Array of DOM nodes.
 * @returns Collection of unique nodes, sorted in document order.
 */ function uniqueSort(nodes) {
    nodes = nodes.filter(function(node, i, arr) {
        return !arr.includes(node, i + 1);
    });
    nodes.sort(function(a, b) {
        var relative = compareDocumentPosition(a, b);
        if (relative & DocumentPosition.PRECEDING) {
            return -1;
        } else if (relative & DocumentPosition.FOLLOWING) {
            return 1;
        }
        return 0;
    });
    return nodes;
}
exports.uniqueSort = uniqueSort; //# sourceMappingURL=helpers.js.map


/***/ }),

/***/ 5777:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.hasChildren = exports.isDocument = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;
__exportStar(__webpack_require__(1953), exports);
__exportStar(__webpack_require__(7304), exports);
__exportStar(__webpack_require__(6861), exports);
__exportStar(__webpack_require__(3959), exports);
__exportStar(__webpack_require__(1317), exports);
__exportStar(__webpack_require__(808), exports);
__exportStar(__webpack_require__(6381), exports);
/** @deprecated Use these methods from `domhandler` directly. */ var domhandler_1 = __webpack_require__(3673);
Object.defineProperty(exports, "isTag", ({
    enumerable: true,
    get: function() {
        return domhandler_1.isTag;
    }
}));
Object.defineProperty(exports, "isCDATA", ({
    enumerable: true,
    get: function() {
        return domhandler_1.isCDATA;
    }
}));
Object.defineProperty(exports, "isText", ({
    enumerable: true,
    get: function() {
        return domhandler_1.isText;
    }
}));
Object.defineProperty(exports, "isComment", ({
    enumerable: true,
    get: function() {
        return domhandler_1.isComment;
    }
}));
Object.defineProperty(exports, "isDocument", ({
    enumerable: true,
    get: function() {
        return domhandler_1.isDocument;
    }
}));
Object.defineProperty(exports, "hasChildren", ({
    enumerable: true,
    get: function() {
        return domhandler_1.hasChildren;
    }
})); //# sourceMappingURL=index.js.map


/***/ }),

/***/ 1317:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;
var domhandler_1 = __webpack_require__(3673);
var querying_js_1 = __webpack_require__(3959);
/**
 * A map of functions to check nodes against.
 */ var Checks = {
    tag_name: function(name) {
        if (typeof name === "function") {
            return function(elem) {
                return (0, domhandler_1.isTag)(elem) && name(elem.name);
            };
        } else if (name === "*") {
            return domhandler_1.isTag;
        }
        return function(elem) {
            return (0, domhandler_1.isTag)(elem) && elem.name === name;
        };
    },
    tag_type: function(type) {
        if (typeof type === "function") {
            return function(elem) {
                return type(elem.type);
            };
        }
        return function(elem) {
            return elem.type === type;
        };
    },
    tag_contains: function(data) {
        if (typeof data === "function") {
            return function(elem) {
                return (0, domhandler_1.isText)(elem) && data(elem.data);
            };
        }
        return function(elem) {
            return (0, domhandler_1.isText)(elem) && elem.data === data;
        };
    }
};
/**
 * Returns a function to check whether a node has an attribute with a particular
 * value.
 *
 * @param attrib Attribute to check.
 * @param value Attribute value to look for.
 * @returns A function to check whether the a node has an attribute with a
 *   particular value.
 */ function getAttribCheck(attrib, value) {
    if (typeof value === "function") {
        return function(elem) {
            return (0, domhandler_1.isTag)(elem) && value(elem.attribs[attrib]);
        };
    }
    return function(elem) {
        return (0, domhandler_1.isTag)(elem) && elem.attribs[attrib] === value;
    };
}
/**
 * Returns a function that returns `true` if either of the input functions
 * returns `true` for a node.
 *
 * @param a First function to combine.
 * @param b Second function to combine.
 * @returns A function taking a node and returning `true` if either of the input
 *   functions returns `true` for the node.
 */ function combineFuncs(a, b) {
    return function(elem) {
        return a(elem) || b(elem);
    };
}
/**
 * Returns a function that executes all checks in `options` and returns `true`
 * if any of them match a node.
 *
 * @param options An object describing nodes to look for.
 * @returns A function that executes all checks in `options` and returns `true`
 *   if any of them match a node.
 */ function compileTest(options) {
    var funcs = Object.keys(options).map(function(key) {
        var value = options[key];
        return Object.prototype.hasOwnProperty.call(Checks, key) ? Checks[key](value) : getAttribCheck(key, value);
    });
    return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
}
/**
 * Checks whether a node matches the description in `options`.
 *
 * @category Legacy Query Functions
 * @param options An object describing nodes to look for.
 * @param node The element to test.
 * @returns Whether the element matches the description in `options`.
 */ function testElement(options, node) {
    var test = compileTest(options);
    return test ? test(node) : true;
}
exports.testElement = testElement;
/**
 * Returns all nodes that match `options`.
 *
 * @category Legacy Query Functions
 * @param options An object describing nodes to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes that match `options`.
 */ function getElements(options, nodes, recurse, limit) {
    if (limit === void 0) {
        limit = Infinity;
    }
    var test = compileTest(options);
    return test ? (0, querying_js_1.filter)(test, nodes, recurse, limit) : [];
}
exports.getElements = getElements;
/**
 * Returns the node with the supplied ID.
 *
 * @category Legacy Query Functions
 * @param id The unique ID attribute value to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @returns The node with the supplied ID.
 */ function getElementById(id, nodes, recurse) {
    if (recurse === void 0) {
        recurse = true;
    }
    if (!Array.isArray(nodes)) nodes = [
        nodes
    ];
    return (0, querying_js_1.findOne)(getAttribCheck("id", id), nodes, recurse);
}
exports.getElementById = getElementById;
/**
 * Returns all nodes with the supplied `tagName`.
 *
 * @category Legacy Query Functions
 * @param tagName Tag name to search for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes with the supplied `tagName`.
 */ function getElementsByTagName(tagName, nodes, recurse, limit) {
    if (recurse === void 0) {
        recurse = true;
    }
    if (limit === void 0) {
        limit = Infinity;
    }
    return (0, querying_js_1.filter)(Checks["tag_name"](tagName), nodes, recurse, limit);
}
exports.getElementsByTagName = getElementsByTagName;
/**
 * Returns all nodes with the supplied `type`.
 *
 * @category Legacy Query Functions
 * @param type Element type to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes with the supplied `type`.
 */ function getElementsByTagType(type, nodes, recurse, limit) {
    if (recurse === void 0) {
        recurse = true;
    }
    if (limit === void 0) {
        limit = Infinity;
    }
    return (0, querying_js_1.filter)(Checks["tag_type"](type), nodes, recurse, limit);
}
exports.getElementsByTagType = getElementsByTagType; //# sourceMappingURL=legacy.js.map


/***/ }),

/***/ 6861:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.prepend = exports.prependChild = exports.append = exports.appendChild = exports.replaceElement = exports.removeElement = void 0;
/**
 * Remove an element from the dom
 *
 * @category Manipulation
 * @param elem The element to be removed
 */ function removeElement(elem) {
    if (elem.prev) elem.prev.next = elem.next;
    if (elem.next) elem.next.prev = elem.prev;
    if (elem.parent) {
        var childs = elem.parent.children;
        var childsIndex = childs.lastIndexOf(elem);
        if (childsIndex >= 0) {
            childs.splice(childsIndex, 1);
        }
    }
    elem.next = null;
    elem.prev = null;
    elem.parent = null;
}
exports.removeElement = removeElement;
/**
 * Replace an element in the dom
 *
 * @category Manipulation
 * @param elem The element to be replaced
 * @param replacement The element to be added
 */ function replaceElement(elem, replacement) {
    var prev = replacement.prev = elem.prev;
    if (prev) {
        prev.next = replacement;
    }
    var next = replacement.next = elem.next;
    if (next) {
        next.prev = replacement;
    }
    var parent = replacement.parent = elem.parent;
    if (parent) {
        var childs = parent.children;
        childs[childs.lastIndexOf(elem)] = replacement;
        elem.parent = null;
    }
}
exports.replaceElement = replaceElement;
/**
 * Append a child to an element.
 *
 * @category Manipulation
 * @param parent The element to append to.
 * @param child The element to be added as a child.
 */ function appendChild(parent, child) {
    removeElement(child);
    child.next = null;
    child.parent = parent;
    if (parent.children.push(child) > 1) {
        var sibling = parent.children[parent.children.length - 2];
        sibling.next = child;
        child.prev = sibling;
    } else {
        child.prev = null;
    }
}
exports.appendChild = appendChild;
/**
 * Append an element after another.
 *
 * @category Manipulation
 * @param elem The element to append after.
 * @param next The element be added.
 */ function append(elem, next) {
    removeElement(next);
    var parent = elem.parent;
    var currNext = elem.next;
    next.next = currNext;
    next.prev = elem;
    elem.next = next;
    next.parent = parent;
    if (currNext) {
        currNext.prev = next;
        if (parent) {
            var childs = parent.children;
            childs.splice(childs.lastIndexOf(currNext), 0, next);
        }
    } else if (parent) {
        parent.children.push(next);
    }
}
exports.append = append;
/**
 * Prepend a child to an element.
 *
 * @category Manipulation
 * @param parent The element to prepend before.
 * @param child The element to be added as a child.
 */ function prependChild(parent, child) {
    removeElement(child);
    child.parent = parent;
    child.prev = null;
    if (parent.children.unshift(child) !== 1) {
        var sibling = parent.children[1];
        sibling.prev = child;
        child.next = sibling;
    } else {
        child.next = null;
    }
}
exports.prependChild = prependChild;
/**
 * Prepend an element before another.
 *
 * @category Manipulation
 * @param elem The element to prepend before.
 * @param prev The element be added.
 */ function prepend(elem, prev) {
    removeElement(prev);
    var parent = elem.parent;
    if (parent) {
        var childs = parent.children;
        childs.splice(childs.indexOf(elem), 0, prev);
    }
    if (elem.prev) {
        elem.prev.next = prev;
    }
    prev.parent = parent;
    prev.prev = elem.prev;
    prev.next = elem;
    elem.prev = prev;
}
exports.prepend = prepend; //# sourceMappingURL=manipulation.js.map


/***/ }),

/***/ 3959:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;
var domhandler_1 = __webpack_require__(3673);
/**
 * Search a node and its children for nodes passing a test function. If `node` is not an array, it will be wrapped in one.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param node Node to search. Will be included in the result set if it matches.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes passing `test`.
 */ function filter(test, node, recurse, limit) {
    if (recurse === void 0) {
        recurse = true;
    }
    if (limit === void 0) {
        limit = Infinity;
    }
    return find(test, Array.isArray(node) ? node : [
        node
    ], recurse, limit);
}
exports.filter = filter;
/**
 * Search an array of nodes and their children for nodes passing a test function.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes passing `test`.
 */ function find(test, nodes, recurse, limit) {
    var result = [];
    /** Stack of the arrays we are looking at. */ var nodeStack = [
        nodes
    ];
    /** Stack of the indices within the arrays. */ var indexStack = [
        0
    ];
    for(;;){
        // First, check if the current array has any more elements to look at.
        if (indexStack[0] >= nodeStack[0].length) {
            // If we have no more arrays to look at, we are done.
            if (indexStack.length === 1) {
                return result;
            }
            // Otherwise, remove the current array from the stack.
            nodeStack.shift();
            indexStack.shift();
            continue;
        }
        var elem = nodeStack[0][indexStack[0]++];
        if (test(elem)) {
            result.push(elem);
            if (--limit <= 0) return result;
        }
        if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {
            /*
             * Add the children to the stack. We are depth-first, so this is
             * the next array we look at.
             */ indexStack.unshift(0);
            nodeStack.unshift(elem.children);
        }
    }
}
exports.find = find;
/**
 * Finds the first element inside of an array that matches a test function. This is an alias for `Array.prototype.find`.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns The first node in the array that passes `test`.
 * @deprecated Use `Array.prototype.find` directly.
 */ function findOneChild(test, nodes) {
    return nodes.find(test);
}
exports.findOneChild = findOneChild;
/**
 * Finds one element in a tree that passes a test.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Node or array of nodes to search.
 * @param recurse Also consider child nodes.
 * @returns The first node that passes `test`.
 */ function findOne(test, nodes, recurse) {
    if (recurse === void 0) {
        recurse = true;
    }
    var elem = null;
    for(var i = 0; i < nodes.length && !elem; i++){
        var node = nodes[i];
        if (!(0, domhandler_1.isTag)(node)) {
            continue;
        } else if (test(node)) {
            elem = node;
        } else if (recurse && node.children.length > 0) {
            elem = findOne(test, node.children, true);
        }
    }
    return elem;
}
exports.findOne = findOne;
/**
 * Checks if a tree of nodes contains at least one node passing a test.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns Whether a tree of nodes contains at least one node passing the test.
 */ function existsOne(test, nodes) {
    return nodes.some(function(checked) {
        return (0, domhandler_1.isTag)(checked) && (test(checked) || existsOne(test, checked.children));
    });
}
exports.existsOne = existsOne;
/**
 * Search an array of nodes and their children for elements passing a test function.
 *
 * Same as `find`, but limited to elements and with less options, leading to reduced complexity.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns All nodes passing `test`.
 */ function findAll(test, nodes) {
    var result = [];
    var nodeStack = [
        nodes
    ];
    var indexStack = [
        0
    ];
    for(;;){
        if (indexStack[0] >= nodeStack[0].length) {
            if (nodeStack.length === 1) {
                return result;
            }
            // Otherwise, remove the current array from the stack.
            nodeStack.shift();
            indexStack.shift();
            continue;
        }
        var elem = nodeStack[0][indexStack[0]++];
        if (!(0, domhandler_1.isTag)(elem)) continue;
        if (test(elem)) result.push(elem);
        if (elem.children.length > 0) {
            indexStack.unshift(0);
            nodeStack.unshift(elem.children);
        }
    }
}
exports.findAll = findAll; //# sourceMappingURL=querying.js.map


/***/ }),

/***/ 1953:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.innerText = exports.textContent = exports.getText = exports.getInnerHTML = exports.getOuterHTML = void 0;
var domhandler_1 = __webpack_require__(3673);
var dom_serializer_1 = __importDefault(__webpack_require__(8408));
var domelementtype_1 = __webpack_require__(288);
/**
 * @category Stringify
 * @deprecated Use the `dom-serializer` module directly.
 * @param node Node to get the outer HTML of.
 * @param options Options for serialization.
 * @returns `node`'s outer HTML.
 */ function getOuterHTML(node, options) {
    return (0, dom_serializer_1.default)(node, options);
}
exports.getOuterHTML = getOuterHTML;
/**
 * @category Stringify
 * @deprecated Use the `dom-serializer` module directly.
 * @param node Node to get the inner HTML of.
 * @param options Options for serialization.
 * @returns `node`'s inner HTML.
 */ function getInnerHTML(node, options) {
    return (0, domhandler_1.hasChildren)(node) ? node.children.map(function(node) {
        return getOuterHTML(node, options);
    }).join("") : "";
}
exports.getInnerHTML = getInnerHTML;
/**
 * Get a node's inner text. Same as `textContent`, but inserts newlines for `<br>` tags. Ignores comments.
 *
 * @category Stringify
 * @deprecated Use `textContent` instead.
 * @param node Node to get the inner text of.
 * @returns `node`'s inner text.
 */ function getText(node) {
    if (Array.isArray(node)) return node.map(getText).join("");
    if ((0, domhandler_1.isTag)(node)) return node.name === "br" ? "\n" : getText(node.children);
    if ((0, domhandler_1.isCDATA)(node)) return getText(node.children);
    if ((0, domhandler_1.isText)(node)) return node.data;
    return "";
}
exports.getText = getText;
/**
 * Get a node's text content. Ignores comments.
 *
 * @category Stringify
 * @param node Node to get the text content of.
 * @returns `node`'s text content.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent}
 */ function textContent(node) {
    if (Array.isArray(node)) return node.map(textContent).join("");
    if ((0, domhandler_1.hasChildren)(node) && !(0, domhandler_1.isComment)(node)) {
        return textContent(node.children);
    }
    if ((0, domhandler_1.isText)(node)) return node.data;
    return "";
}
exports.textContent = textContent;
/**
 * Get a node's inner text, ignoring `<script>` and `<style>` tags. Ignores comments.
 *
 * @category Stringify
 * @param node Node to get the inner text of.
 * @returns `node`'s inner text.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText}
 */ function innerText(node) {
    if (Array.isArray(node)) return node.map(innerText).join("");
    if ((0, domhandler_1.hasChildren)(node) && (node.type === domelementtype_1.ElementType.Tag || (0, domhandler_1.isCDATA)(node))) {
        return innerText(node.children);
    }
    if ((0, domhandler_1.isText)(node)) return node.data;
    return "";
}
exports.innerText = innerText; //# sourceMappingURL=stringify.js.map


/***/ }),

/***/ 7304:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.prevElementSibling = exports.nextElementSibling = exports.getName = exports.hasAttrib = exports.getAttributeValue = exports.getSiblings = exports.getParent = exports.getChildren = void 0;
var domhandler_1 = __webpack_require__(3673);
/**
 * Get a node's children.
 *
 * @category Traversal
 * @param elem Node to get the children of.
 * @returns `elem`'s children, or an empty array.
 */ function getChildren(elem) {
    return (0, domhandler_1.hasChildren)(elem) ? elem.children : [];
}
exports.getChildren = getChildren;
/**
 * Get a node's parent.
 *
 * @category Traversal
 * @param elem Node to get the parent of.
 * @returns `elem`'s parent node, or `null` if `elem` is a root node.
 */ function getParent(elem) {
    return elem.parent || null;
}
exports.getParent = getParent;
/**
 * Gets an elements siblings, including the element itself.
 *
 * Attempts to get the children through the element's parent first. If we don't
 * have a parent (the element is a root node), we walk the element's `prev` &
 * `next` to get all remaining nodes.
 *
 * @category Traversal
 * @param elem Element to get the siblings of.
 * @returns `elem`'s siblings, including `elem`.
 */ function getSiblings(elem) {
    var _a, _b;
    var parent = getParent(elem);
    if (parent != null) return getChildren(parent);
    var siblings = [
        elem
    ];
    var prev = elem.prev, next = elem.next;
    while(prev != null){
        siblings.unshift(prev);
        _a = prev, prev = _a.prev;
    }
    while(next != null){
        siblings.push(next);
        _b = next, next = _b.next;
    }
    return siblings;
}
exports.getSiblings = getSiblings;
/**
 * Gets an attribute from an element.
 *
 * @category Traversal
 * @param elem Element to check.
 * @param name Attribute name to retrieve.
 * @returns The element's attribute value, or `undefined`.
 */ function getAttributeValue(elem, name) {
    var _a;
    return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
}
exports.getAttributeValue = getAttributeValue;
/**
 * Checks whether an element has an attribute.
 *
 * @category Traversal
 * @param elem Element to check.
 * @param name Attribute name to look for.
 * @returns Returns whether `elem` has the attribute `name`.
 */ function hasAttrib(elem, name) {
    return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;
}
exports.hasAttrib = hasAttrib;
/**
 * Get the tag name of an element.
 *
 * @category Traversal
 * @param elem The element to get the name for.
 * @returns The tag name of `elem`.
 */ function getName(elem) {
    return elem.name;
}
exports.getName = getName;
/**
 * Returns the next element sibling of a node.
 *
 * @category Traversal
 * @param elem The element to get the next sibling of.
 * @returns `elem`'s next sibling that is a tag, or `null` if there is no next
 * sibling.
 */ function nextElementSibling(elem) {
    var _a;
    var next = elem.next;
    while(next !== null && !(0, domhandler_1.isTag)(next))_a = next, next = _a.next;
    return next;
}
exports.nextElementSibling = nextElementSibling;
/**
 * Returns the previous element sibling of a node.
 *
 * @category Traversal
 * @param elem The element to get the previous sibling of.
 * @returns `elem`'s previous sibling that is a tag, or `null` if there is no
 * previous sibling.
 */ function prevElementSibling(elem) {
    var _a;
    var prev = elem.prev;
    while(prev !== null && !(0, domhandler_1.isTag)(prev))_a = prev, prev = _a.prev;
    return prev;
}
exports.prevElementSibling = prevElementSibling; //# sourceMappingURL=traversal.js.map


/***/ }),

/***/ 4188:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = (void 0) && (void 0).__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTMLAttribute = exports.decodeHTML = exports.determineBranch = exports.EntityDecoder = exports.DecodingMode = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;
var decode_data_html_js_1 = __importDefault(__webpack_require__(5576));
exports.htmlDecodeTree = decode_data_html_js_1.default;
var decode_data_xml_js_1 = __importDefault(__webpack_require__(2859));
exports.xmlDecodeTree = decode_data_xml_js_1.default;
var decode_codepoint_js_1 = __importStar(__webpack_require__(9794));
exports.decodeCodePoint = decode_codepoint_js_1.default;
var decode_codepoint_js_2 = __webpack_require__(9794);
Object.defineProperty(exports, "replaceCodePoint", ({
    enumerable: true,
    get: function() {
        return decode_codepoint_js_2.replaceCodePoint;
    }
}));
Object.defineProperty(exports, "fromCodePoint", ({
    enumerable: true,
    get: function() {
        return decode_codepoint_js_2.fromCodePoint;
    }
}));
var CharCodes;
(function(CharCodes) {
    CharCodes[CharCodes["NUM"] = 35] = "NUM";
    CharCodes[CharCodes["SEMI"] = 59] = "SEMI";
    CharCodes[CharCodes["EQUALS"] = 61] = "EQUALS";
    CharCodes[CharCodes["ZERO"] = 48] = "ZERO";
    CharCodes[CharCodes["NINE"] = 57] = "NINE";
    CharCodes[CharCodes["LOWER_A"] = 97] = "LOWER_A";
    CharCodes[CharCodes["LOWER_F"] = 102] = "LOWER_F";
    CharCodes[CharCodes["LOWER_X"] = 120] = "LOWER_X";
    CharCodes[CharCodes["LOWER_Z"] = 122] = "LOWER_Z";
    CharCodes[CharCodes["UPPER_A"] = 65] = "UPPER_A";
    CharCodes[CharCodes["UPPER_F"] = 70] = "UPPER_F";
    CharCodes[CharCodes["UPPER_Z"] = 90] = "UPPER_Z";
})(CharCodes || (CharCodes = {}));
/** Bit that needs to be set to convert an upper case ASCII character to lower case */ var TO_LOWER_BIT = 32;
var BinTrieFlags;
(function(BinTrieFlags) {
    BinTrieFlags[BinTrieFlags["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
    BinTrieFlags[BinTrieFlags["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
    BinTrieFlags[BinTrieFlags["JUMP_TABLE"] = 127] = "JUMP_TABLE";
})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));
function isNumber(code) {
    return code >= CharCodes.ZERO && code <= CharCodes.NINE;
}
function isHexadecimalCharacter(code) {
    return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;
}
function isAsciiAlphaNumeric(code) {
    return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);
}
/**
 * Checks if the given character is a valid end character for an entity in an attribute.
 *
 * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.
 * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state
 */ function isEntityInAttributeInvalidEnd(code) {
    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);
}
var EntityDecoderState;
(function(EntityDecoderState) {
    EntityDecoderState[EntityDecoderState["EntityStart"] = 0] = "EntityStart";
    EntityDecoderState[EntityDecoderState["NumericStart"] = 1] = "NumericStart";
    EntityDecoderState[EntityDecoderState["NumericDecimal"] = 2] = "NumericDecimal";
    EntityDecoderState[EntityDecoderState["NumericHex"] = 3] = "NumericHex";
    EntityDecoderState[EntityDecoderState["NamedEntity"] = 4] = "NamedEntity";
})(EntityDecoderState || (EntityDecoderState = {}));
var DecodingMode;
(function(DecodingMode) {
    /** Entities in text nodes that can end with any character. */ DecodingMode[DecodingMode["Legacy"] = 0] = "Legacy";
    /** Only allow entities terminated with a semicolon. */ DecodingMode[DecodingMode["Strict"] = 1] = "Strict";
    /** Entities in attributes have limitations on ending characters. */ DecodingMode[DecodingMode["Attribute"] = 2] = "Attribute";
})(DecodingMode = exports.DecodingMode || (exports.DecodingMode = {}));
/**
 * Token decoder with support of writing partial entities.
 */ var EntityDecoder = /** @class */ function() {
    function EntityDecoder(/** The tree used to decode entities. */ decodeTree, /**
     * The function that is called when a codepoint is decoded.
     *
     * For multi-byte named entities, this will be called multiple times,
     * with the second codepoint, and the same `consumed` value.
     *
     * @param codepoint The decoded codepoint.
     * @param consumed The number of bytes consumed by the decoder.
     */ emitCodePoint, /** An object that is used to produce errors. */ errors) {
        this.decodeTree = decodeTree;
        this.emitCodePoint = emitCodePoint;
        this.errors = errors;
        /** The current state of the decoder. */ this.state = EntityDecoderState.EntityStart;
        /** Characters that were consumed while parsing an entity. */ this.consumed = 1;
        /**
         * The result of the entity.
         *
         * Either the result index of a numeric entity, or the codepoint of a
         * numeric entity.
         */ this.result = 0;
        /** The current index in the decode tree. */ this.treeIndex = 0;
        /** The number of characters that were consumed in excess. */ this.excess = 1;
        /** The mode in which the decoder is operating. */ this.decodeMode = DecodingMode.Strict;
    }
    /** Resets the instance to make it reusable. */ EntityDecoder.prototype.startEntity = function(decodeMode) {
        this.decodeMode = decodeMode;
        this.state = EntityDecoderState.EntityStart;
        this.result = 0;
        this.treeIndex = 0;
        this.excess = 1;
        this.consumed = 1;
    };
    /**
     * Write an entity to the decoder. This can be called multiple times with partial entities.
     * If the entity is incomplete, the decoder will return -1.
     *
     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
     * entity is incomplete, and resume when the next string is written.
     *
     * @param string The string containing the entity (or a continuation of the entity).
     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ EntityDecoder.prototype.write = function(str, offset) {
        switch(this.state){
            case EntityDecoderState.EntityStart:
                {
                    if (str.charCodeAt(offset) === CharCodes.NUM) {
                        this.state = EntityDecoderState.NumericStart;
                        this.consumed += 1;
                        return this.stateNumericStart(str, offset + 1);
                    }
                    this.state = EntityDecoderState.NamedEntity;
                    return this.stateNamedEntity(str, offset);
                }
            case EntityDecoderState.NumericStart:
                {
                    return this.stateNumericStart(str, offset);
                }
            case EntityDecoderState.NumericDecimal:
                {
                    return this.stateNumericDecimal(str, offset);
                }
            case EntityDecoderState.NumericHex:
                {
                    return this.stateNumericHex(str, offset);
                }
            case EntityDecoderState.NamedEntity:
                {
                    return this.stateNamedEntity(str, offset);
                }
        }
    };
    /**
     * Switches between the numeric decimal and hexadecimal states.
     *
     * Equivalent to the `Numeric character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ EntityDecoder.prototype.stateNumericStart = function(str, offset) {
        if (offset >= str.length) {
            return -1;
        }
        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
            this.state = EntityDecoderState.NumericHex;
            this.consumed += 1;
            return this.stateNumericHex(str, offset + 1);
        }
        this.state = EntityDecoderState.NumericDecimal;
        return this.stateNumericDecimal(str, offset);
    };
    EntityDecoder.prototype.addToNumericResult = function(str, start, end, base) {
        if (start !== end) {
            var digitCount = end - start;
            this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);
            this.consumed += digitCount;
        }
    };
    /**
     * Parses a hexadecimal numeric entity.
     *
     * Equivalent to the `Hexademical character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ EntityDecoder.prototype.stateNumericHex = function(str, offset) {
        var startIdx = offset;
        while(offset < str.length){
            var char = str.charCodeAt(offset);
            if (isNumber(char) || isHexadecimalCharacter(char)) {
                offset += 1;
            } else {
                this.addToNumericResult(str, startIdx, offset, 16);
                return this.emitNumericEntity(char, 3);
            }
        }
        this.addToNumericResult(str, startIdx, offset, 16);
        return -1;
    };
    /**
     * Parses a decimal numeric entity.
     *
     * Equivalent to the `Decimal character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ EntityDecoder.prototype.stateNumericDecimal = function(str, offset) {
        var startIdx = offset;
        while(offset < str.length){
            var char = str.charCodeAt(offset);
            if (isNumber(char)) {
                offset += 1;
            } else {
                this.addToNumericResult(str, startIdx, offset, 10);
                return this.emitNumericEntity(char, 2);
            }
        }
        this.addToNumericResult(str, startIdx, offset, 10);
        return -1;
    };
    /**
     * Validate and emit a numeric entity.
     *
     * Implements the logic from the `Hexademical character reference start
     * state` and `Numeric character reference end state` in the HTML spec.
     *
     * @param lastCp The last code point of the entity. Used to see if the
     *               entity was terminated with a semicolon.
     * @param expectedLength The minimum number of characters that should be
     *                       consumed. Used to validate that at least one digit
     *                       was consumed.
     * @returns The number of characters that were consumed.
     */ EntityDecoder.prototype.emitNumericEntity = function(lastCp, expectedLength) {
        var _a;
        // Ensure we consumed at least one digit.
        if (this.consumed <= expectedLength) {
            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
            return 0;
        }
        // Figure out if this is a legit end of the entity
        if (lastCp === CharCodes.SEMI) {
            this.consumed += 1;
        } else if (this.decodeMode === DecodingMode.Strict) {
            return 0;
        }
        this.emitCodePoint((0, decode_codepoint_js_1.replaceCodePoint)(this.result), this.consumed);
        if (this.errors) {
            if (lastCp !== CharCodes.SEMI) {
                this.errors.missingSemicolonAfterCharacterReference();
            }
            this.errors.validateNumericCharacterReference(this.result);
        }
        return this.consumed;
    };
    /**
     * Parses a named entity.
     *
     * Equivalent to the `Named character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */ EntityDecoder.prototype.stateNamedEntity = function(str, offset) {
        var decodeTree = this.decodeTree;
        var current = decodeTree[this.treeIndex];
        // The mask is the number of bytes of the value, including the current byte.
        var valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
        for(; offset < str.length; offset++, this.excess++){
            var char = str.charCodeAt(offset);
            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
            if (this.treeIndex < 0) {
                return this.result === 0 || // If we are parsing an attribute
                this.decodeMode === DecodingMode.Attribute && // We shouldn't have consumed any characters after the entity,
                (valueLength === 0 || // And there should be no invalid characters.
                isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();
            }
            current = decodeTree[this.treeIndex];
            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
            // If the branch is a value, store it and continue
            if (valueLength !== 0) {
                // If the entity is terminated by a semicolon, we are done.
                if (char === CharCodes.SEMI) {
                    return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
                }
                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.
                if (this.decodeMode !== DecodingMode.Strict) {
                    this.result = this.treeIndex;
                    this.consumed += this.excess;
                    this.excess = 0;
                }
            }
        }
        return -1;
    };
    /**
     * Emit a named entity that was not terminated with a semicolon.
     *
     * @returns The number of characters consumed.
     */ EntityDecoder.prototype.emitNotTerminatedNamedEntity = function() {
        var _a;
        var _b = this, result = _b.result, decodeTree = _b.decodeTree;
        var valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
        this.emitNamedEntityData(result, valueLength, this.consumed);
        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();
        return this.consumed;
    };
    /**
     * Emit a named entity.
     *
     * @param result The index of the entity in the decode tree.
     * @param valueLength The number of bytes in the entity.
     * @param consumed The number of characters consumed.
     *
     * @returns The number of characters consumed.
     */ EntityDecoder.prototype.emitNamedEntityData = function(result, valueLength, consumed) {
        var decodeTree = this.decodeTree;
        this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);
        if (valueLength === 3) {
            // For multi-byte values, we need to emit the second byte.
            this.emitCodePoint(decodeTree[result + 2], consumed);
        }
        return consumed;
    };
    /**
     * Signal to the parser that the end of the input was reached.
     *
     * Remaining data will be emitted and relevant errors will be produced.
     *
     * @returns The number of characters consumed.
     */ EntityDecoder.prototype.end = function() {
        var _a;
        switch(this.state){
            case EntityDecoderState.NamedEntity:
                {
                    // Emit a named entity if we have one.
                    return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
                }
            // Otherwise, emit a numeric entity if we have one.
            case EntityDecoderState.NumericDecimal:
                {
                    return this.emitNumericEntity(0, 2);
                }
            case EntityDecoderState.NumericHex:
                {
                    return this.emitNumericEntity(0, 3);
                }
            case EntityDecoderState.NumericStart:
                {
                    (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
                    return 0;
                }
            case EntityDecoderState.EntityStart:
                {
                    // Return 0 if we have no entity.
                    return 0;
                }
        }
    };
    return EntityDecoder;
}();
exports.EntityDecoder = EntityDecoder;
/**
 * Creates a function that decodes entities in a string.
 *
 * @param decodeTree The decode tree.
 * @returns A function that decodes entities in a string.
 */ function getDecoder(decodeTree) {
    var ret = "";
    var decoder = new EntityDecoder(decodeTree, function(str) {
        return ret += (0, decode_codepoint_js_1.fromCodePoint)(str);
    });
    return function decodeWithTrie(str, decodeMode) {
        var lastIndex = 0;
        var offset = 0;
        while((offset = str.indexOf("&", offset)) >= 0){
            ret += str.slice(lastIndex, offset);
            decoder.startEntity(decodeMode);
            var len = decoder.write(str, // Skip the "&"
            offset + 1);
            if (len < 0) {
                lastIndex = offset + decoder.end();
                break;
            }
            lastIndex = offset + len;
            // If `len` is 0, skip the current `&` and continue.
            offset = len === 0 ? lastIndex + 1 : lastIndex;
        }
        var result = ret + str.slice(lastIndex);
        // Make sure we don't keep a reference to the final string.
        ret = "";
        return result;
    };
}
/**
 * Determines the branch of the current node that is taken given the current
 * character. This function is used to traverse the trie.
 *
 * @param decodeTree The trie.
 * @param current The current node.
 * @param nodeIdx The index right after the current node and its value.
 * @param char The current character.
 * @returns The index of the next node, or -1 if no branch is taken.
 */ function determineBranch(decodeTree, current, nodeIdx, char) {
    var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
    var jumpOffset = current & BinTrieFlags.JUMP_TABLE;
    // Case 1: Single branch encoded in jump offset
    if (branchCount === 0) {
        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
    }
    // Case 2: Multiple branches encoded in jump table
    if (jumpOffset) {
        var value = char - jumpOffset;
        return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;
    }
    // Case 3: Multiple branches encoded in dictionary
    // Binary search for the character.
    var lo = nodeIdx;
    var hi = lo + branchCount - 1;
    while(lo <= hi){
        var mid = lo + hi >>> 1;
        var midVal = decodeTree[mid];
        if (midVal < char) {
            lo = mid + 1;
        } else if (midVal > char) {
            hi = mid - 1;
        } else {
            return decodeTree[mid + branchCount];
        }
    }
    return -1;
}
exports.determineBranch = determineBranch;
var htmlDecoder = getDecoder(decode_data_html_js_1.default);
var xmlDecoder = getDecoder(decode_data_xml_js_1.default);
/**
 * Decodes an HTML string.
 *
 * @param str The string to decode.
 * @param mode The decoding mode.
 * @returns The decoded string.
 */ function decodeHTML(str, mode) {
    if (mode === void 0) {
        mode = DecodingMode.Legacy;
    }
    return htmlDecoder(str, mode);
}
exports.decodeHTML = decodeHTML;
/**
 * Decodes an HTML string in an attribute.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */ function decodeHTMLAttribute(str) {
    return htmlDecoder(str, DecodingMode.Attribute);
}
exports.decodeHTMLAttribute = decodeHTMLAttribute;
/**
 * Decodes an HTML string, requiring all entities to be terminated by a semicolon.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */ function decodeHTMLStrict(str) {
    return htmlDecoder(str, DecodingMode.Strict);
}
exports.decodeHTMLStrict = decodeHTMLStrict;
/**
 * Decodes an XML string, requiring all entities to be terminated by a semicolon.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */ function decodeXML(str) {
    return xmlDecoder(str, DecodingMode.Strict);
}
exports.decodeXML = decodeXML; //# sourceMappingURL=decode.js.map


/***/ }),

/***/ 9794:
/***/ ((__unused_webpack_module, exports) => {


// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134
var _a;
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.replaceCodePoint = exports.fromCodePoint = void 0;
var decodeMap = new Map([
    [
        0,
        65533
    ],
    // C1 Unicode control character reference replacements
    [
        128,
        8364
    ],
    [
        130,
        8218
    ],
    [
        131,
        402
    ],
    [
        132,
        8222
    ],
    [
        133,
        8230
    ],
    [
        134,
        8224
    ],
    [
        135,
        8225
    ],
    [
        136,
        710
    ],
    [
        137,
        8240
    ],
    [
        138,
        352
    ],
    [
        139,
        8249
    ],
    [
        140,
        338
    ],
    [
        142,
        381
    ],
    [
        145,
        8216
    ],
    [
        146,
        8217
    ],
    [
        147,
        8220
    ],
    [
        148,
        8221
    ],
    [
        149,
        8226
    ],
    [
        150,
        8211
    ],
    [
        151,
        8212
    ],
    [
        152,
        732
    ],
    [
        153,
        8482
    ],
    [
        154,
        353
    ],
    [
        155,
        8250
    ],
    [
        156,
        339
    ],
    [
        158,
        382
    ],
    [
        159,
        376
    ]
]);
/**
 * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.
 */ exports.fromCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function(codePoint) {
    var output = "";
    if (codePoint > 0xffff) {
        codePoint -= 0x10000;
        output += String.fromCharCode(codePoint >>> 10 & 0x3ff | 0xd800);
        codePoint = 0xdc00 | codePoint & 0x3ff;
    }
    output += String.fromCharCode(codePoint);
    return output;
};
/**
 * Replace the given code point with a replacement character if it is a
 * surrogate or is outside the valid range. Otherwise return the code
 * point unchanged.
 */ function replaceCodePoint(codePoint) {
    var _a;
    if (codePoint >= 0xd800 && codePoint <= 0xdfff || codePoint > 0x10ffff) {
        return 0xfffd;
    }
    return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;
}
exports.replaceCodePoint = replaceCodePoint;
/**
 * Replace the code point if relevant, then convert it to a string.
 *
 * @deprecated Use `fromCodePoint(replaceCodePoint(codePoint))` instead.
 * @param codePoint The code point to decode.
 * @returns The decoded code point.
 */ function decodeCodePoint(codePoint) {
    return (0, exports.fromCodePoint)(replaceCodePoint(codePoint));
}
exports["default"] = decodeCodePoint; //# sourceMappingURL=decode_codepoint.js.map


/***/ }),

/***/ 9791:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.encodeNonAsciiHTML = exports.encodeHTML = void 0;
var encode_html_js_1 = __importDefault(__webpack_require__(5248));
var escape_js_1 = __webpack_require__(5476);
var htmlReplacer = /[\t\n!-,./:-@[-`\f{-}$\x80-\uFFFF]/g;
/**
 * Encodes all characters in the input using HTML entities. This includes
 * characters that are valid ASCII characters in HTML documents, such as `#`.
 *
 * To get a more compact output, consider using the `encodeNonAsciiHTML`
 * function, which will only encode characters that are not valid in HTML
 * documents, as well as non-ASCII characters.
 *
 * If a character has no equivalent entity, a numeric hexadecimal reference
 * (eg. `&#xfc;`) will be used.
 */ function encodeHTML(data) {
    return encodeHTMLTrieRe(htmlReplacer, data);
}
exports.encodeHTML = encodeHTML;
/**
 * Encodes all non-ASCII characters, as well as characters not valid in HTML
 * documents using HTML entities. This function will not encode characters that
 * are valid in HTML documents, such as `#`.
 *
 * If a character has no equivalent entity, a numeric hexadecimal reference
 * (eg. `&#xfc;`) will be used.
 */ function encodeNonAsciiHTML(data) {
    return encodeHTMLTrieRe(escape_js_1.xmlReplacer, data);
}
exports.encodeNonAsciiHTML = encodeNonAsciiHTML;
function encodeHTMLTrieRe(regExp, str) {
    var ret = "";
    var lastIdx = 0;
    var match;
    while((match = regExp.exec(str)) !== null){
        var i = match.index;
        ret += str.substring(lastIdx, i);
        var char = str.charCodeAt(i);
        var next = encode_html_js_1.default.get(char);
        if (typeof next === "object") {
            // We are in a branch. Try to match the next char.
            if (i + 1 < str.length) {
                var nextChar = str.charCodeAt(i + 1);
                var value = typeof next.n === "number" ? next.n === nextChar ? next.o : undefined : next.n.get(nextChar);
                if (value !== undefined) {
                    ret += value;
                    lastIdx = regExp.lastIndex += 1;
                    continue;
                }
            }
            next = next.v;
        }
        // We might have a tree node without a value; skip and use a numeric entity.
        if (next !== undefined) {
            ret += next;
            lastIdx = i + 1;
        } else {
            var cp = (0, escape_js_1.getCodePoint)(str, i);
            ret += "&#x".concat(cp.toString(16), ";");
            // Increase by 1 if we have a surrogate pair
            lastIdx = regExp.lastIndex += Number(cp !== char);
        }
    }
    return ret + str.substr(lastIdx);
} //# sourceMappingURL=encode.js.map


/***/ }),

/***/ 5476:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.escapeText = exports.escapeAttribute = exports.escapeUTF8 = exports.escape = exports.encodeXML = exports.getCodePoint = exports.xmlReplacer = void 0;
exports.xmlReplacer = /["&'<>$\x80-\uFFFF]/g;
var xmlCodeMap = new Map([
    [
        34,
        "&quot;"
    ],
    [
        38,
        "&amp;"
    ],
    [
        39,
        "&apos;"
    ],
    [
        60,
        "&lt;"
    ],
    [
        62,
        "&gt;"
    ]
]);
// For compatibility with node < 4, we wrap `codePointAt`
exports.getCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
String.prototype.codePointAt != null ? function(str, index) {
    return str.codePointAt(index);
} : function(c, index) {
    return (c.charCodeAt(index) & 0xfc00) === 0xd800 ? (c.charCodeAt(index) - 0xd800) * 0x400 + c.charCodeAt(index + 1) - 0xdc00 + 0x10000 : c.charCodeAt(index);
};
/**
 * Encodes all non-ASCII characters, as well as characters not valid in XML
 * documents using XML entities.
 *
 * If a character has no equivalent entity, a
 * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
 */ function encodeXML(str) {
    var ret = "";
    var lastIdx = 0;
    var match;
    while((match = exports.xmlReplacer.exec(str)) !== null){
        var i = match.index;
        var char = str.charCodeAt(i);
        var next = xmlCodeMap.get(char);
        if (next !== undefined) {
            ret += str.substring(lastIdx, i) + next;
            lastIdx = i + 1;
        } else {
            ret += "".concat(str.substring(lastIdx, i), "&#x").concat((0, exports.getCodePoint)(str, i).toString(16), ";");
            // Increase by 1 if we have a surrogate pair
            lastIdx = exports.xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);
        }
    }
    return ret + str.substr(lastIdx);
}
exports.encodeXML = encodeXML;
/**
 * Encodes all non-ASCII characters, as well as characters not valid in XML
 * documents using numeric hexadecimal reference (eg. `&#xfc;`).
 *
 * Have a look at `escapeUTF8` if you want a more concise output at the expense
 * of reduced transportability.
 *
 * @param data String to escape.
 */ exports.escape = encodeXML;
/**
 * Creates a function that escapes all characters matched by the given regular
 * expression using the given map of characters to escape to their entities.
 *
 * @param regex Regular expression to match characters to escape.
 * @param map Map of characters to escape to their entities.
 *
 * @returns Function that escapes all characters matched by the given regular
 * expression using the given map of characters to escape to their entities.
 */ function getEscaper(regex, map) {
    return function escape(data) {
        var match;
        var lastIdx = 0;
        var result = "";
        while(match = regex.exec(data)){
            if (lastIdx !== match.index) {
                result += data.substring(lastIdx, match.index);
            }
            // We know that this character will be in the map.
            result += map.get(match[0].charCodeAt(0));
            // Every match will be of length 1
            lastIdx = match.index + 1;
        }
        return result + data.substring(lastIdx);
    };
}
/**
 * Encodes all characters not valid in XML documents using XML entities.
 *
 * Note that the output will be character-set dependent.
 *
 * @param data String to escape.
 */ exports.escapeUTF8 = getEscaper(/[&<>'"]/g, xmlCodeMap);
/**
 * Encodes all characters that have to be escaped in HTML attributes,
 * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
 *
 * @param data String to escape.
 */ exports.escapeAttribute = getEscaper(/["&\u00A0]/g, new Map([
    [
        34,
        "&quot;"
    ],
    [
        38,
        "&amp;"
    ],
    [
        160,
        "&nbsp;"
    ]
]));
/**
 * Encodes all characters that have to be escaped in HTML text,
 * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
 *
 * @param data String to escape.
 */ exports.escapeText = getEscaper(/[&<>\u00A0]/g, new Map([
    [
        38,
        "&amp;"
    ],
    [
        60,
        "&lt;"
    ],
    [
        62,
        "&gt;"
    ],
    [
        160,
        "&nbsp;"
    ]
])); //# sourceMappingURL=escape.js.map


/***/ }),

/***/ 5576:
/***/ ((__unused_webpack_module, exports) => {


// Generated using scripts/write-decode-map.ts
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports["default"] = new Uint16Array(// prettier-ignore
'ᵁ<\xd5ıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\x00\x00\x00\x00\x00\x00ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms\x7f\x84\x8b\x90\x95\x98\xa6\xb3\xb9\xc8\xcflig耻\xc6䃆P耻&䀦cute耻\xc1䃁reve;䄂Āiyx}rc耻\xc2䃂;䐐r;쀀\ud835\udd04rave耻\xc0䃀pha;䎑acr;䄀d;橓Āgp\x9d\xa1on;䄄f;쀀\ud835\udd38plyFunction;恡ing耻\xc5䃅Ācs\xbe\xc3r;쀀\ud835\udc9cign;扔ilde耻\xc3䃃ml耻\xc4䃄Ѐaceforsu\xe5\xfb\xfeėĜĢħĪĀcr\xea\xf2kslash;或Ŷ\xf6\xf8;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀\ud835\udd05pf;쀀\ud835\udd39eve;䋘c\xf2ēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻\xa9䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻\xc7䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷\xf2ſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀\ud835\udc9epĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀\ud835\udd07Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\x00\x00\x00͔͂\x00Ѕf;쀀\ud835\udd3bƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegra\xecȹoɴ͹\x00\x00ͻ\xbb͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔e\xe5ˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\x00\x00ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\x00ц\x00ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\x00ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀\ud835\udc9frok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻\xd0䃐cute耻\xc9䃉ƀaiyӒӗӜron;䄚rc耻\xca䃊;䐭ot;䄖r;쀀\ud835\udd08rave耻\xc8䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\x00\x00ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀\ud835\udd3csilon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻\xcb䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀\ud835\udd09lledɓ֗\x00\x00֣mallSquare;旼erySmallSquare;斪Ͱֺ\x00ֿ\x00\x00ׄf;쀀\ud835\udd3dAll;戀riertrf;愱c\xf2׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀\ud835\udd0a;拙pf;쀀\ud835\udd3eeater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀\ud835\udca2;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\x00ڲf;愍izontalLine;攀Āctۃۅ\xf2کrok;䄦mpńېۘownHum\xf0įqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻\xcd䃍Āiyܓܘrc耻\xce䃎;䐘ot;䄰r;愑rave耻\xcc䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lie\xf3ϝǴ݉\x00ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀\ud835\udd40a;䎙cr;愐ilde;䄨ǫޚ\x00ޞcy;䐆l耻\xcf䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀\ud835\udd0dpf;쀀\ud835\udd41ǣ߇\x00ߌr;쀀\ud835\udca5rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀\ud835\udd0epf;쀀\ud835\udd42cr;쀀\ud835\udca6րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\x00ࣃbleBracket;柦nǔࣈ\x00࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ight\xe1Μs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀\ud835\udd0fĀ;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊight\xe1οight\xe1ϊf;쀀\ud835\udd43erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂ\xf2ࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀\ud835\udd10nusPlus;戓pf;쀀\ud835\udd44c\xf2੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘\xeb૙eryThi\xee૙tedĀGL૸ଆreaterGreate\xf2ٳessLes\xf3ੈLine;䀊r;쀀\ud835\udd11ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀\ud835\udca9ilde耻\xd1䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻\xd3䃓Āiy෎ීrc耻\xd4䃔;䐞blac;䅐r;쀀\ud835\udd12rave耻\xd2䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀\ud835\udd46enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀\ud835\udcaaash耻\xd8䃘iŬื฼de耻\xd5䃕es;樷ml耻\xd6䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀\ud835\udd13i;䎦;䎠usMinus;䂱Āipຢອncareplan\xe5ڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀\ud835\udcab;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀\ud835\udd14pf;愚cr;쀀\ud835\udcac؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻\xae䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r\xbbཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\x00စbleBracket;柧nǔည\x00နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀\ud835\udd16ortȀDLRUᄪᄴᄾᅉownArrow\xbbОeftArrow\xbb࢚ightArrow\xbb࿝pArrow;憑gma;䎣allCircle;战pf;쀀\ud835\udd4aɲᅭ\x00\x00ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀\ud835\udcaear;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Th\xe1ྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et\xbbሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻\xde䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀\ud835\udd17Āeiቻ኉ǲኀ\x00ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀\ud835\udd4bipleDot;惛Āctዖዛr;쀀\ud835\udcafrok;䅦ૡዷጎጚጦ\x00ጬጱ\x00\x00\x00\x00\x00ጸጽ፷ᎅ\x00᏿ᐄᐊᐐĀcrዻጁute耻\xda䃚rĀ;oጇገ憟cir;楉rǣጓ\x00጖y;䐎ve;䅬Āiyጞጣrc耻\xdb䃛;䐣blac;䅰r;쀀\ud835\udd18rave耻\xd9䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀\ud835\udd4cЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥own\xe1ϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀\ud835\udcb0ilde;䅨ml耻\xdc䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀\ud835\udd19pf;쀀\ud835\udd4dcr;쀀\ud835\udcb1dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀\ud835\udd1apf;쀀\ud835\udd4ecr;쀀\ud835\udcb2Ȁfiosᓋᓐᓒᓘr;쀀\ud835\udd1b;䎞pf;쀀\ud835\udd4fcr;쀀\ud835\udcb3ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻\xdd䃝Āiyᔉᔍrc;䅶;䐫r;쀀\ud835\udd1cpf;쀀\ud835\udd50cr;쀀\ud835\udcb4ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\x00ᕛoWidt\xe8૙a;䎖r;愨pf;愤cr;쀀\ud835\udcb5௡ᖃᖊᖐ\x00ᖰᖶᖿ\x00\x00\x00\x00ᗆᗛᗫᙟ᙭\x00ᚕ᚛ᚲᚹ\x00ᚾcute耻\xe1䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻\xe2䃢te肻\xb4̆;䐰lig耻\xe6䃦Ā;r\xb2ᖺ;쀀\ud835\udd1erave耻\xe0䃠ĀepᗊᗖĀfpᗏᗔsym;愵\xe8ᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\x00\x00ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e\xbbᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢\xbb\xb9arr;捼Āgpᙣᙧon;䄅f;쀀\ud835\udd52΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒ\xf1ᚃing耻\xe5䃥ƀctyᚡᚦᚨr;쀀\ud835\udcb6;䀪mpĀ;e዁ᚯ\xf1ʈilde耻\xe3䃣ml耻\xe4䃤Āciᛂᛈonin\xf4ɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e\xbbᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰s\xe9ᜌno\xf5ēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀\ud835\udd1fg΀costuvwឍឝឳេ៕៛៞ƀaiuបពរ\xf0ݠrc;旯p\xbb፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\x00\x00ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄e\xe5ᑄ\xe5ᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\x00ᠳƲᠯ\x00ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀\ud835\udd53Ā;tᏋᡣom\xbbᏌtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻\xa6䂦Ȁceioᥑᥖᥚᥠr;쀀\ud835\udcb7mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t\xbb᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\x00᧨ᨑᨕᨲ\x00ᨷᩐ\x00\x00᪴\x00\x00᫁\x00\x00ᬡᬮ᭍᭒\x00᯽\x00ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁\xeeړȀaeiu᧰᧻ᨁᨅǰ᧵\x00᧸s;橍on;䄍dil耻\xe7䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻\xb8ƭptyv;榲t脀\xa2;eᨭᨮ䂢r\xe4Ʋr;쀀\ud835\udd20ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark\xbbᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\x00\x00᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟\xbbཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it\xbb᪼ˬ᫇᫔᫺\x00ᬊonĀ;eᫍᫎ䀺Ā;q\xc7\xc6ɭ᫙\x00\x00᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁\xeeᅠeĀmx᫱᫶ent\xbb᫩e\xf3ɍǧ᫾\x00ᬇĀ;dኻᬂot;橭n\xf4Ɇƀfryᬐᬔᬗ;쀀\ud835\udd54o\xe4ɔ脀\xa9;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀\ud835\udcb8Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\x00\x00᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\x00\x00ᯒre\xe3᭳u\xe3᭵ee;拎edge;拏en耻\xa4䂤earrowĀlrᯮ᯳eft\xbbᮀight\xbbᮽe\xe4ᯝĀciᰁᰇonin\xf4Ƿnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍r\xf2΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸\xf2ᄳhĀ;vᱚᱛ怐\xbbऊūᱡᱧarow;椏a\xe3̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻\xb0䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀\ud835\udd21arĀlrᲳᲵ\xbbࣜ\xbbသʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀\xf7;o᳧ᳰntimes;拇n\xf8᳷cy;䑒cɯᴆ\x00\x00ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀\ud835\udd55ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedg\xe5\xfanƀadhᄮᵝᵧownarrow\xf3ᲃarpoonĀlrᵲᵶef\xf4Ჴigh\xf4ᲶŢᵿᶅkaro\xf7གɯᶊ\x00\x00ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀\ud835\udcb9;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃r\xf2Щa\xf2ྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴo\xf4ᲉĀcsḎḔute耻\xe9䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻\xea䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀\ud835\udd22ƀ;rsṐṑṗ檚ave耻\xe8䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et\xbbẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀\ud835\udd56ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on\xbbớ;䏵ȀcsuvỪỳἋἣĀioữḱrc\xbbḮɩỹ\x00\x00ỻ\xedՈantĀglἂἆtr\xbbṝess\xbbṺƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯o\xf4͒ĀahὉὋ;䎷耻\xf0䃰Āmrὓὗl耻\xeb䃫o;悬ƀcipὡὤὧl;䀡s\xf4ծĀeoὬὴctatio\xeeՙnential\xe5չৡᾒ\x00ᾞ\x00ᾡᾧ\x00\x00ῆῌ\x00ΐ\x00ῦῪ \x00 ⁚llingdotse\xf1Ṅy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\x00\x00᾽g;耀ﬀig;耀ﬄ;쀀\ud835\udd23lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\x00ῳf;쀀\ud835\udd57ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\x00⁐β•‥‧‪‬\x00‮耻\xbd䂽;慓耻\xbc䂼;慕;慙;慛Ƴ‴\x00‶;慔;慖ʴ‾⁁\x00\x00⁃耻\xbe䂾;慗;慜5;慘ƶ⁌\x00⁎;慚;慝8;慞l;恄wn;挢cr;쀀\ud835\udcbbࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lan\xf4٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀\ud835\udd24Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox\xbbℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀\ud835\udd58Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\x00↎pro\xf8₞r;楸qĀlqؿ↖les\xf3₈i\xed٫Āen↣↭rtneqq;쀀≩︀\xc5↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽r\xf2ΠȀilmr⇐⇔⇗⇛rs\xf0ᒄf\xbb․il\xf4کĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it\xbb∊lip;怦con;抹r;쀀\ud835\udd25sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀\ud835\udd59bar;怕ƀclt≯≴≸r;쀀\ud835\udcbdas\xe8⇴rok;䄧Ābp⊂⊇ull;恃hen\xbbᱛૡ⊣\x00⊪\x00⊸⋅⋎\x00⋕⋳\x00\x00⋸⌢⍧⍢⍿\x00⎆⎪⎴cute耻\xed䃭ƀ;iyݱ⊰⊵rc耻\xee䃮;䐸Ācx⊼⊿y;䐵cl耻\xa1䂡ĀfrΟ⋉;쀀\ud835\udd26rave耻\xec䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓in\xe5ގar\xf4ܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝do\xf4⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙er\xf3ᕣ\xe3⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀\ud835\udd5aa;䎹uest耻\xbf䂿Āci⎊⎏r;쀀\ud835\udcbenʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\x00⎼cy;䑖l耻\xef䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀\ud835\udd27ath;䈷pf;쀀\ud835\udd5bǣ⏬\x00⏱r;쀀\ud835\udcbfrcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀\ud835\udd28reen;䄸cy;䑅cy;䑜pf;쀀\ud835\udd5ccr;쀀\ud835\udcc0஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼r\xf2৆\xf2Εail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\x00⒪\x00⒱\x00\x00\x00\x00\x00⒵Ⓔ\x00ⓆⓈⓍ\x00⓹ute;䄺mptyv;榴ra\xeeࡌbda;䎻gƀ;dlࢎⓁⓃ;榑\xe5ࢎ;檅uo耻\xab䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝\xeb≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼\xecࢰ\xe2┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□a\xe9⓶arpoonĀdu▯▴own\xbbњp\xbb०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoon\xf3྘quigarro\xf7⇰hreetimes;拋ƀ;qs▋ও◺lan\xf4বʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋ppro\xf8Ⓠot;拖qĀgq♃♅\xf4উgt\xf2⒌\xf4ছi\xedলƀilr♕࣡♚sht;楼;쀀\ud835\udd29Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖r\xf2◁orne\xf2ᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che\xbb⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox\xbb⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽r\xebࣁgƀlmr⛿✍✔eftĀar০✇ight\xe1৲apsto;柼ight\xe1৽parrowĀlr✥✩ef\xf4⓭ight;憬ƀafl✶✹✽r;榅;쀀\ud835\udd5dus;樭imes;樴š❋❏st;戗\xe1ፎƀ;ef❗❘᠀旊nge\xbb❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇r\xf2ࢨorne\xf2ᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀\ud835\udcc1mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹re\xe5◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀\xc5⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻\xaf䂯Āet⡗⡙;時Ā;e⡞⡟朠se\xbb⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻ow\xeeҌef\xf4ए\xf0Ꮡker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle\xbbᘦr;쀀\ud835\udd2ao;愧ƀcdn⢯⢴⣉ro耻\xb5䂵Ȁ;acdᑤ⢽⣀⣄s\xf4ᚧir;櫰ot肻\xb7Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛\xf2−\xf0ઁĀdp⣩⣮els;抧f;쀀\ud835\udd5eĀct⣸⣽r;쀀\ud835\udcc2pos\xbbᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la\xbb˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉ro\xf8඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\x00⧣p肻\xa0ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\x00⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸ui\xf6ୣĀei⩊⩎ar;椨\xed஘istĀ;s஠டr;쀀\ud835\udd2bȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lan\xf4௢i\xed௪Ā;rஶ⪁\xbbஷƀAap⪊⪍⪑r\xf2⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹r\xf2⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro\xf7⫁ightarro\xf7⪐ƀ;qs఻⪺⫪lan\xf4ౕĀ;sౕ⫴\xbbశi\xedౝĀ;rవ⫾iĀ;eచథi\xe4ඐĀpt⬌⬑f;쀀\ud835\udd5f膀\xac;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lle\xec୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳u\xe5ಥĀ;cಘ⭸Ā;eಒ⭽\xf1ಘȀAait⮈⮋⮝⮧r\xf2⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow\xbb⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉u\xe5൅;쀀\ud835\udcc3ortɭ⬅\x00\x00⯖ar\xe1⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭\xe5೸\xe5ഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗ\xf1സȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇ\xecௗlde耻\xf1䃱\xe7ృiangleĀlrⱒⱜeftĀ;eచⱚ\xf1దightĀ;eೋⱥ\xf1೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00ⴭ\x00ⴸⵈⵠⵥ⵲ⶄᬇ\x00\x00ⶍⶫ\x00ⷈⷎ\x00ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻\xf3䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻\xf4䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀\ud835\udd2cͯ⵹\x00\x00⵼\x00ⶂn;䋛ave耻\xf2䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨr\xf2᪀Āir⶝ⶠr;榾oss;榻n\xe5๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀\ud835\udd60ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨r\xf2᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f\xbbⷿ耻\xaa䂪耻\xba䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧\xf2⸁ash耻\xf8䃸l;折iŬⸯ⸴de耻\xf5䃵esĀ;aǛ⸺s;樶ml耻\xf6䃶bar;挽ૡ⹞\x00⹽\x00⺀⺝\x00⺢⺹\x00\x00⻋ຜ\x00⼓\x00\x00⼫⾼\x00⿈rȀ;astЃ⹧⹲຅脀\xb6;l⹭⹮䂶le\xecЃɩ⹸\x00\x00⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀\ud835\udd2dƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕ma\xf4੶ne;明ƀ;tv⺿⻀⻈䏀chfork\xbb´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎\xf6⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻\xb1ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀\ud835\udd61nd耻\xa3䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷u\xe5໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾ppro\xf8⽃urlye\xf1໙\xf1໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨i\xedໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺\xf0⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴\xef໻rel;抰Āci⿀⿅r;쀀\ud835\udcc5;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀\ud835\udd2epf;쀀\ud835\udd62rime;恗cr;쀀\ud835\udcc6ƀaeo⿸〉〓tĀei⿾々rnion\xf3ڰnt;樖stĀ;e【】䀿\xf1Ἑ\xf4༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがr\xf2Ⴓ\xf2ϝail;検ar\xf2ᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕i\xe3ᅮmptyv;榳gȀ;del࿑らるろ;榒;榥\xe5࿑uo耻\xbb䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞\xeb≝\xf0✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶al\xf3༞ƀabrョリヮr\xf2៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗\xec࿲\xe2ヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜn\xe5Ⴛar\xf4ྩt;断ƀilrㅩဣㅮsht;楽;쀀\ud835\udd2fĀaoㅷㆆrĀduㅽㅿ\xbbѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭa\xe9トarpoonĀduㆻㆿow\xeeㅾp\xbb႒eftĀah㇊㇐rrow\xf3࿪arpoon\xf3Ցightarrows;應quigarro\xf7ニhreetimes;拌g;䋚ingdotse\xf1ἲƀahm㈍㈐㈓r\xf2࿪a\xf2Ց;怏oustĀ;a㈞㈟掱che\xbb㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾r\xebဃƀafl㉇㉊㉎r;榆;쀀\ud835\udd63us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒ar\xf2㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀\ud835\udcc7Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠re\xe5ㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\x00㍺㎤\x00\x00㏬㏰\x00㐨㑈㑚㒭㒱㓊㓱\x00㘖\x00\x00㘳cute;䅛qu\xef➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\x00㋼;檸on;䅡u\xe5ᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓i\xedሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒\xeb∨Ā;oਸ਼਴t耻\xa7䂧i;䀻war;椩mĀin㍩\xf0nu\xf3\xf1t;朶rĀ;o㍶⁕쀀\ud835\udd30Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\x00\x00㎜i\xe4ᑤara\xec⹯耻\xad䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲ar\xf2ᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetm\xe9㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀\ud835\udd64aĀdr㑍ЂesĀ;u㑔㑕晠it\xbb㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍\xf1ᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝\xf1ᆮƀ;afᅻ㒦ְrť㒫ֱ\xbbᅼar\xf2ᅈȀcemt㒹㒾㓂㓅r;쀀\ud835\udcc8tm\xee\xf1i\xec㐕ar\xe6ᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psilo\xeeỠh\xe9⺯s\xbb⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦ppro\xf8㋺urlye\xf1ᇾ\xf1ᇳƀaes㖂㖈㌛ppro\xf8㌚q\xf1㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻\xb9䂹耻\xb2䂲耻\xb3䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨\xeb∮Ā;oਫ਩war;椪lig耻\xdf䃟௡㙑㙝㙠ዎ㙳㙹\x00㙾㛂\x00\x00\x00\x00\x00㛛㜃\x00㜉㝬\x00\x00\x00㞇ɲ㙖\x00\x00㙛get;挖;䏄r\xeb๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀\ud835\udd31Ȁeiko㚆㚝㚵㚼ǲ㚋\x00㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮ppro\xf8዁im\xbbኬs\xf0ኞĀas㚺㚮\xf0዁rn耻\xfe䃾Ǭ̟㛆⋧es膀\xd7;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀\xe1⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀\ud835\udd65rk;櫚\xe1㍢rime;怴ƀaip㜏㜒㝤d\xe5ቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own\xbbᶻeftĀ;e⠀㜾\xf1म;扜ightĀ;e㊪㝋\xf1ၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀\ud835\udcc9;䑆cy;䑛rok;䅧Āio㞋㞎x\xf4᝷headĀlr㞗㞠eftarro\xf7ࡏightarrow\xbbཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶r\xf2ϭar;楣Ācr㟜㟢ute耻\xfa䃺\xf2ᅐrǣ㟪\x00㟭y;䑞ve;䅭Āiy㟵㟺rc耻\xfb䃻;䑃ƀabh㠃㠆㠋r\xf2Ꭽlac;䅱a\xf2ᏃĀir㠓㠘sht;楾;쀀\ud835\udd32rave耻\xf9䃹š㠧㠱rĀlr㠬㠮\xbbॗ\xbbႃlk;斀Āct㠹㡍ɯ㠿\x00\x00㡊rnĀ;e㡅㡆挜r\xbb㡆op;挏ri;旸Āal㡖㡚cr;䅫肻\xa8͉Āgp㡢㡦on;䅳f;쀀\ud835\udd66̀adhlsuᅋ㡸㡽፲㢑㢠own\xe1ᎳarpoonĀlr㢈㢌ef\xf4㠭igh\xf4㠯iƀ;hl㢙㢚㢜䏅\xbbᏺon\xbb㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\x00\x00㣁rnĀ;e㢼㢽挝r\xbb㢽op;挎ng;䅯ri;旹cr;쀀\ud835\udccaƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨\xbb᠓Āam㣯㣲r\xf2㢨l耻\xfc䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠r\xf2ϷarĀ;v㤦㤧櫨;櫩as\xe8ϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖app\xe1␕othin\xe7ẖƀhir㓫⻈㥙op\xf4⾵Ā;hᎷ㥢\xefㆍĀiu㥩㥭gm\xe1㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟et\xe1㚜iangleĀlr㦪㦯eft\xbbथight\xbbၑy;䐲ash\xbbံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨa\xf2ᑩr;쀀\ud835\udd33tr\xe9㦮suĀbp㧯㧱\xbbജ\xbb൙pf;쀀\ud835\udd67ro\xf0໻tr\xe9㦴Ācu㨆㨋r;쀀\ud835\udccbĀbp㨐㨘nĀEe㦀㨖\xbb㥾nĀEe㦒㨞\xbb㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀\ud835\udd34pf;쀀\ud835\udd68Ā;eᑹ㩦at\xe8ᑹcr;쀀\ud835\udcccૣណ㪇\x00㪋\x00㪐㪛\x00\x00㪝㪨㪫㪯\x00\x00㫃㫎\x00㫘ៜ៟tr\xe9៑r;쀀\ud835\udd35ĀAa㪔㪗r\xf2σr\xf2৶;䎾ĀAa㪡㪤r\xf2θr\xf2৫a\xf0✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀\ud835\udd69im\xe5ឲĀAa㫇㫊r\xf2ώr\xf2ਁĀcq㫒ីr;쀀\ud835\udccdĀpt៖㫜r\xe9។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻\xfd䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻\xa5䂥r;쀀\ud835\udd36cy;䑗pf;쀀\ud835\udd6acr;쀀\ud835\udcceĀcm㬦㬩y;䑎l耻\xff䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡tr\xe6ᕟa;䎶r;쀀\ud835\udd37cy;䐶grarr;懝pf;쀀\ud835\udd6bcr;쀀\ud835\udccfĀjn㮅㮇;怍j;怌'.split("").map(function(c) {
    return c.charCodeAt(0);
})); //# sourceMappingURL=decode-data-html.js.map


/***/ }),

/***/ 2859:
/***/ ((__unused_webpack_module, exports) => {


// Generated using scripts/write-decode-map.ts
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports["default"] = new Uint16Array(// prettier-ignore
"Ȁaglq	\x15\x18\x1bɭ\x0f\x00\x00\x12p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map(function(c) {
    return c.charCodeAt(0);
})); //# sourceMappingURL=decode-data-xml.js.map


/***/ }),

/***/ 5248:
/***/ ((__unused_webpack_module, exports) => {


// Generated using scripts/write-encode-map.ts
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function restoreDiff(arr) {
    for(var i = 1; i < arr.length; i++){
        arr[i][0] += arr[i - 1][0] + 1;
    }
    return arr;
}
// prettier-ignore
exports["default"] = new Map(/* #__PURE__ */ restoreDiff([
    [
        9,
        "&Tab;"
    ],
    [
        0,
        "&NewLine;"
    ],
    [
        22,
        "&excl;"
    ],
    [
        0,
        "&quot;"
    ],
    [
        0,
        "&num;"
    ],
    [
        0,
        "&dollar;"
    ],
    [
        0,
        "&percnt;"
    ],
    [
        0,
        "&amp;"
    ],
    [
        0,
        "&apos;"
    ],
    [
        0,
        "&lpar;"
    ],
    [
        0,
        "&rpar;"
    ],
    [
        0,
        "&ast;"
    ],
    [
        0,
        "&plus;"
    ],
    [
        0,
        "&comma;"
    ],
    [
        1,
        "&period;"
    ],
    [
        0,
        "&sol;"
    ],
    [
        10,
        "&colon;"
    ],
    [
        0,
        "&semi;"
    ],
    [
        0,
        {
            v: "&lt;",
            n: 8402,
            o: "&nvlt;"
        }
    ],
    [
        0,
        {
            v: "&equals;",
            n: 8421,
            o: "&bne;"
        }
    ],
    [
        0,
        {
            v: "&gt;",
            n: 8402,
            o: "&nvgt;"
        }
    ],
    [
        0,
        "&quest;"
    ],
    [
        0,
        "&commat;"
    ],
    [
        26,
        "&lbrack;"
    ],
    [
        0,
        "&bsol;"
    ],
    [
        0,
        "&rbrack;"
    ],
    [
        0,
        "&Hat;"
    ],
    [
        0,
        "&lowbar;"
    ],
    [
        0,
        "&DiacriticalGrave;"
    ],
    [
        5,
        {
            n: 106,
            o: "&fjlig;"
        }
    ],
    [
        20,
        "&lbrace;"
    ],
    [
        0,
        "&verbar;"
    ],
    [
        0,
        "&rbrace;"
    ],
    [
        34,
        "&nbsp;"
    ],
    [
        0,
        "&iexcl;"
    ],
    [
        0,
        "&cent;"
    ],
    [
        0,
        "&pound;"
    ],
    [
        0,
        "&curren;"
    ],
    [
        0,
        "&yen;"
    ],
    [
        0,
        "&brvbar;"
    ],
    [
        0,
        "&sect;"
    ],
    [
        0,
        "&die;"
    ],
    [
        0,
        "&copy;"
    ],
    [
        0,
        "&ordf;"
    ],
    [
        0,
        "&laquo;"
    ],
    [
        0,
        "&not;"
    ],
    [
        0,
        "&shy;"
    ],
    [
        0,
        "&circledR;"
    ],
    [
        0,
        "&macr;"
    ],
    [
        0,
        "&deg;"
    ],
    [
        0,
        "&PlusMinus;"
    ],
    [
        0,
        "&sup2;"
    ],
    [
        0,
        "&sup3;"
    ],
    [
        0,
        "&acute;"
    ],
    [
        0,
        "&micro;"
    ],
    [
        0,
        "&para;"
    ],
    [
        0,
        "&centerdot;"
    ],
    [
        0,
        "&cedil;"
    ],
    [
        0,
        "&sup1;"
    ],
    [
        0,
        "&ordm;"
    ],
    [
        0,
        "&raquo;"
    ],
    [
        0,
        "&frac14;"
    ],
    [
        0,
        "&frac12;"
    ],
    [
        0,
        "&frac34;"
    ],
    [
        0,
        "&iquest;"
    ],
    [
        0,
        "&Agrave;"
    ],
    [
        0,
        "&Aacute;"
    ],
    [
        0,
        "&Acirc;"
    ],
    [
        0,
        "&Atilde;"
    ],
    [
        0,
        "&Auml;"
    ],
    [
        0,
        "&angst;"
    ],
    [
        0,
        "&AElig;"
    ],
    [
        0,
        "&Ccedil;"
    ],
    [
        0,
        "&Egrave;"
    ],
    [
        0,
        "&Eacute;"
    ],
    [
        0,
        "&Ecirc;"
    ],
    [
        0,
        "&Euml;"
    ],
    [
        0,
        "&Igrave;"
    ],
    [
        0,
        "&Iacute;"
    ],
    [
        0,
        "&Icirc;"
    ],
    [
        0,
        "&Iuml;"
    ],
    [
        0,
        "&ETH;"
    ],
    [
        0,
        "&Ntilde;"
    ],
    [
        0,
        "&Ograve;"
    ],
    [
        0,
        "&Oacute;"
    ],
    [
        0,
        "&Ocirc;"
    ],
    [
        0,
        "&Otilde;"
    ],
    [
        0,
        "&Ouml;"
    ],
    [
        0,
        "&times;"
    ],
    [
        0,
        "&Oslash;"
    ],
    [
        0,
        "&Ugrave;"
    ],
    [
        0,
        "&Uacute;"
    ],
    [
        0,
        "&Ucirc;"
    ],
    [
        0,
        "&Uuml;"
    ],
    [
        0,
        "&Yacute;"
    ],
    [
        0,
        "&THORN;"
    ],
    [
        0,
        "&szlig;"
    ],
    [
        0,
        "&agrave;"
    ],
    [
        0,
        "&aacute;"
    ],
    [
        0,
        "&acirc;"
    ],
    [
        0,
        "&atilde;"
    ],
    [
        0,
        "&auml;"
    ],
    [
        0,
        "&aring;"
    ],
    [
        0,
        "&aelig;"
    ],
    [
        0,
        "&ccedil;"
    ],
    [
        0,
        "&egrave;"
    ],
    [
        0,
        "&eacute;"
    ],
    [
        0,
        "&ecirc;"
    ],
    [
        0,
        "&euml;"
    ],
    [
        0,
        "&igrave;"
    ],
    [
        0,
        "&iacute;"
    ],
    [
        0,
        "&icirc;"
    ],
    [
        0,
        "&iuml;"
    ],
    [
        0,
        "&eth;"
    ],
    [
        0,
        "&ntilde;"
    ],
    [
        0,
        "&ograve;"
    ],
    [
        0,
        "&oacute;"
    ],
    [
        0,
        "&ocirc;"
    ],
    [
        0,
        "&otilde;"
    ],
    [
        0,
        "&ouml;"
    ],
    [
        0,
        "&div;"
    ],
    [
        0,
        "&oslash;"
    ],
    [
        0,
        "&ugrave;"
    ],
    [
        0,
        "&uacute;"
    ],
    [
        0,
        "&ucirc;"
    ],
    [
        0,
        "&uuml;"
    ],
    [
        0,
        "&yacute;"
    ],
    [
        0,
        "&thorn;"
    ],
    [
        0,
        "&yuml;"
    ],
    [
        0,
        "&Amacr;"
    ],
    [
        0,
        "&amacr;"
    ],
    [
        0,
        "&Abreve;"
    ],
    [
        0,
        "&abreve;"
    ],
    [
        0,
        "&Aogon;"
    ],
    [
        0,
        "&aogon;"
    ],
    [
        0,
        "&Cacute;"
    ],
    [
        0,
        "&cacute;"
    ],
    [
        0,
        "&Ccirc;"
    ],
    [
        0,
        "&ccirc;"
    ],
    [
        0,
        "&Cdot;"
    ],
    [
        0,
        "&cdot;"
    ],
    [
        0,
        "&Ccaron;"
    ],
    [
        0,
        "&ccaron;"
    ],
    [
        0,
        "&Dcaron;"
    ],
    [
        0,
        "&dcaron;"
    ],
    [
        0,
        "&Dstrok;"
    ],
    [
        0,
        "&dstrok;"
    ],
    [
        0,
        "&Emacr;"
    ],
    [
        0,
        "&emacr;"
    ],
    [
        2,
        "&Edot;"
    ],
    [
        0,
        "&edot;"
    ],
    [
        0,
        "&Eogon;"
    ],
    [
        0,
        "&eogon;"
    ],
    [
        0,
        "&Ecaron;"
    ],
    [
        0,
        "&ecaron;"
    ],
    [
        0,
        "&Gcirc;"
    ],
    [
        0,
        "&gcirc;"
    ],
    [
        0,
        "&Gbreve;"
    ],
    [
        0,
        "&gbreve;"
    ],
    [
        0,
        "&Gdot;"
    ],
    [
        0,
        "&gdot;"
    ],
    [
        0,
        "&Gcedil;"
    ],
    [
        1,
        "&Hcirc;"
    ],
    [
        0,
        "&hcirc;"
    ],
    [
        0,
        "&Hstrok;"
    ],
    [
        0,
        "&hstrok;"
    ],
    [
        0,
        "&Itilde;"
    ],
    [
        0,
        "&itilde;"
    ],
    [
        0,
        "&Imacr;"
    ],
    [
        0,
        "&imacr;"
    ],
    [
        2,
        "&Iogon;"
    ],
    [
        0,
        "&iogon;"
    ],
    [
        0,
        "&Idot;"
    ],
    [
        0,
        "&imath;"
    ],
    [
        0,
        "&IJlig;"
    ],
    [
        0,
        "&ijlig;"
    ],
    [
        0,
        "&Jcirc;"
    ],
    [
        0,
        "&jcirc;"
    ],
    [
        0,
        "&Kcedil;"
    ],
    [
        0,
        "&kcedil;"
    ],
    [
        0,
        "&kgreen;"
    ],
    [
        0,
        "&Lacute;"
    ],
    [
        0,
        "&lacute;"
    ],
    [
        0,
        "&Lcedil;"
    ],
    [
        0,
        "&lcedil;"
    ],
    [
        0,
        "&Lcaron;"
    ],
    [
        0,
        "&lcaron;"
    ],
    [
        0,
        "&Lmidot;"
    ],
    [
        0,
        "&lmidot;"
    ],
    [
        0,
        "&Lstrok;"
    ],
    [
        0,
        "&lstrok;"
    ],
    [
        0,
        "&Nacute;"
    ],
    [
        0,
        "&nacute;"
    ],
    [
        0,
        "&Ncedil;"
    ],
    [
        0,
        "&ncedil;"
    ],
    [
        0,
        "&Ncaron;"
    ],
    [
        0,
        "&ncaron;"
    ],
    [
        0,
        "&napos;"
    ],
    [
        0,
        "&ENG;"
    ],
    [
        0,
        "&eng;"
    ],
    [
        0,
        "&Omacr;"
    ],
    [
        0,
        "&omacr;"
    ],
    [
        2,
        "&Odblac;"
    ],
    [
        0,
        "&odblac;"
    ],
    [
        0,
        "&OElig;"
    ],
    [
        0,
        "&oelig;"
    ],
    [
        0,
        "&Racute;"
    ],
    [
        0,
        "&racute;"
    ],
    [
        0,
        "&Rcedil;"
    ],
    [
        0,
        "&rcedil;"
    ],
    [
        0,
        "&Rcaron;"
    ],
    [
        0,
        "&rcaron;"
    ],
    [
        0,
        "&Sacute;"
    ],
    [
        0,
        "&sacute;"
    ],
    [
        0,
        "&Scirc;"
    ],
    [
        0,
        "&scirc;"
    ],
    [
        0,
        "&Scedil;"
    ],
    [
        0,
        "&scedil;"
    ],
    [
        0,
        "&Scaron;"
    ],
    [
        0,
        "&scaron;"
    ],
    [
        0,
        "&Tcedil;"
    ],
    [
        0,
        "&tcedil;"
    ],
    [
        0,
        "&Tcaron;"
    ],
    [
        0,
        "&tcaron;"
    ],
    [
        0,
        "&Tstrok;"
    ],
    [
        0,
        "&tstrok;"
    ],
    [
        0,
        "&Utilde;"
    ],
    [
        0,
        "&utilde;"
    ],
    [
        0,
        "&Umacr;"
    ],
    [
        0,
        "&umacr;"
    ],
    [
        0,
        "&Ubreve;"
    ],
    [
        0,
        "&ubreve;"
    ],
    [
        0,
        "&Uring;"
    ],
    [
        0,
        "&uring;"
    ],
    [
        0,
        "&Udblac;"
    ],
    [
        0,
        "&udblac;"
    ],
    [
        0,
        "&Uogon;"
    ],
    [
        0,
        "&uogon;"
    ],
    [
        0,
        "&Wcirc;"
    ],
    [
        0,
        "&wcirc;"
    ],
    [
        0,
        "&Ycirc;"
    ],
    [
        0,
        "&ycirc;"
    ],
    [
        0,
        "&Yuml;"
    ],
    [
        0,
        "&Zacute;"
    ],
    [
        0,
        "&zacute;"
    ],
    [
        0,
        "&Zdot;"
    ],
    [
        0,
        "&zdot;"
    ],
    [
        0,
        "&Zcaron;"
    ],
    [
        0,
        "&zcaron;"
    ],
    [
        19,
        "&fnof;"
    ],
    [
        34,
        "&imped;"
    ],
    [
        63,
        "&gacute;"
    ],
    [
        65,
        "&jmath;"
    ],
    [
        142,
        "&circ;"
    ],
    [
        0,
        "&caron;"
    ],
    [
        16,
        "&breve;"
    ],
    [
        0,
        "&DiacriticalDot;"
    ],
    [
        0,
        "&ring;"
    ],
    [
        0,
        "&ogon;"
    ],
    [
        0,
        "&DiacriticalTilde;"
    ],
    [
        0,
        "&dblac;"
    ],
    [
        51,
        "&DownBreve;"
    ],
    [
        127,
        "&Alpha;"
    ],
    [
        0,
        "&Beta;"
    ],
    [
        0,
        "&Gamma;"
    ],
    [
        0,
        "&Delta;"
    ],
    [
        0,
        "&Epsilon;"
    ],
    [
        0,
        "&Zeta;"
    ],
    [
        0,
        "&Eta;"
    ],
    [
        0,
        "&Theta;"
    ],
    [
        0,
        "&Iota;"
    ],
    [
        0,
        "&Kappa;"
    ],
    [
        0,
        "&Lambda;"
    ],
    [
        0,
        "&Mu;"
    ],
    [
        0,
        "&Nu;"
    ],
    [
        0,
        "&Xi;"
    ],
    [
        0,
        "&Omicron;"
    ],
    [
        0,
        "&Pi;"
    ],
    [
        0,
        "&Rho;"
    ],
    [
        1,
        "&Sigma;"
    ],
    [
        0,
        "&Tau;"
    ],
    [
        0,
        "&Upsilon;"
    ],
    [
        0,
        "&Phi;"
    ],
    [
        0,
        "&Chi;"
    ],
    [
        0,
        "&Psi;"
    ],
    [
        0,
        "&ohm;"
    ],
    [
        7,
        "&alpha;"
    ],
    [
        0,
        "&beta;"
    ],
    [
        0,
        "&gamma;"
    ],
    [
        0,
        "&delta;"
    ],
    [
        0,
        "&epsi;"
    ],
    [
        0,
        "&zeta;"
    ],
    [
        0,
        "&eta;"
    ],
    [
        0,
        "&theta;"
    ],
    [
        0,
        "&iota;"
    ],
    [
        0,
        "&kappa;"
    ],
    [
        0,
        "&lambda;"
    ],
    [
        0,
        "&mu;"
    ],
    [
        0,
        "&nu;"
    ],
    [
        0,
        "&xi;"
    ],
    [
        0,
        "&omicron;"
    ],
    [
        0,
        "&pi;"
    ],
    [
        0,
        "&rho;"
    ],
    [
        0,
        "&sigmaf;"
    ],
    [
        0,
        "&sigma;"
    ],
    [
        0,
        "&tau;"
    ],
    [
        0,
        "&upsi;"
    ],
    [
        0,
        "&phi;"
    ],
    [
        0,
        "&chi;"
    ],
    [
        0,
        "&psi;"
    ],
    [
        0,
        "&omega;"
    ],
    [
        7,
        "&thetasym;"
    ],
    [
        0,
        "&Upsi;"
    ],
    [
        2,
        "&phiv;"
    ],
    [
        0,
        "&piv;"
    ],
    [
        5,
        "&Gammad;"
    ],
    [
        0,
        "&digamma;"
    ],
    [
        18,
        "&kappav;"
    ],
    [
        0,
        "&rhov;"
    ],
    [
        3,
        "&epsiv;"
    ],
    [
        0,
        "&backepsilon;"
    ],
    [
        10,
        "&IOcy;"
    ],
    [
        0,
        "&DJcy;"
    ],
    [
        0,
        "&GJcy;"
    ],
    [
        0,
        "&Jukcy;"
    ],
    [
        0,
        "&DScy;"
    ],
    [
        0,
        "&Iukcy;"
    ],
    [
        0,
        "&YIcy;"
    ],
    [
        0,
        "&Jsercy;"
    ],
    [
        0,
        "&LJcy;"
    ],
    [
        0,
        "&NJcy;"
    ],
    [
        0,
        "&TSHcy;"
    ],
    [
        0,
        "&KJcy;"
    ],
    [
        1,
        "&Ubrcy;"
    ],
    [
        0,
        "&DZcy;"
    ],
    [
        0,
        "&Acy;"
    ],
    [
        0,
        "&Bcy;"
    ],
    [
        0,
        "&Vcy;"
    ],
    [
        0,
        "&Gcy;"
    ],
    [
        0,
        "&Dcy;"
    ],
    [
        0,
        "&IEcy;"
    ],
    [
        0,
        "&ZHcy;"
    ],
    [
        0,
        "&Zcy;"
    ],
    [
        0,
        "&Icy;"
    ],
    [
        0,
        "&Jcy;"
    ],
    [
        0,
        "&Kcy;"
    ],
    [
        0,
        "&Lcy;"
    ],
    [
        0,
        "&Mcy;"
    ],
    [
        0,
        "&Ncy;"
    ],
    [
        0,
        "&Ocy;"
    ],
    [
        0,
        "&Pcy;"
    ],
    [
        0,
        "&Rcy;"
    ],
    [
        0,
        "&Scy;"
    ],
    [
        0,
        "&Tcy;"
    ],
    [
        0,
        "&Ucy;"
    ],
    [
        0,
        "&Fcy;"
    ],
    [
        0,
        "&KHcy;"
    ],
    [
        0,
        "&TScy;"
    ],
    [
        0,
        "&CHcy;"
    ],
    [
        0,
        "&SHcy;"
    ],
    [
        0,
        "&SHCHcy;"
    ],
    [
        0,
        "&HARDcy;"
    ],
    [
        0,
        "&Ycy;"
    ],
    [
        0,
        "&SOFTcy;"
    ],
    [
        0,
        "&Ecy;"
    ],
    [
        0,
        "&YUcy;"
    ],
    [
        0,
        "&YAcy;"
    ],
    [
        0,
        "&acy;"
    ],
    [
        0,
        "&bcy;"
    ],
    [
        0,
        "&vcy;"
    ],
    [
        0,
        "&gcy;"
    ],
    [
        0,
        "&dcy;"
    ],
    [
        0,
        "&iecy;"
    ],
    [
        0,
        "&zhcy;"
    ],
    [
        0,
        "&zcy;"
    ],
    [
        0,
        "&icy;"
    ],
    [
        0,
        "&jcy;"
    ],
    [
        0,
        "&kcy;"
    ],
    [
        0,
        "&lcy;"
    ],
    [
        0,
        "&mcy;"
    ],
    [
        0,
        "&ncy;"
    ],
    [
        0,
        "&ocy;"
    ],
    [
        0,
        "&pcy;"
    ],
    [
        0,
        "&rcy;"
    ],
    [
        0,
        "&scy;"
    ],
    [
        0,
        "&tcy;"
    ],
    [
        0,
        "&ucy;"
    ],
    [
        0,
        "&fcy;"
    ],
    [
        0,
        "&khcy;"
    ],
    [
        0,
        "&tscy;"
    ],
    [
        0,
        "&chcy;"
    ],
    [
        0,
        "&shcy;"
    ],
    [
        0,
        "&shchcy;"
    ],
    [
        0,
        "&hardcy;"
    ],
    [
        0,
        "&ycy;"
    ],
    [
        0,
        "&softcy;"
    ],
    [
        0,
        "&ecy;"
    ],
    [
        0,
        "&yucy;"
    ],
    [
        0,
        "&yacy;"
    ],
    [
        1,
        "&iocy;"
    ],
    [
        0,
        "&djcy;"
    ],
    [
        0,
        "&gjcy;"
    ],
    [
        0,
        "&jukcy;"
    ],
    [
        0,
        "&dscy;"
    ],
    [
        0,
        "&iukcy;"
    ],
    [
        0,
        "&yicy;"
    ],
    [
        0,
        "&jsercy;"
    ],
    [
        0,
        "&ljcy;"
    ],
    [
        0,
        "&njcy;"
    ],
    [
        0,
        "&tshcy;"
    ],
    [
        0,
        "&kjcy;"
    ],
    [
        1,
        "&ubrcy;"
    ],
    [
        0,
        "&dzcy;"
    ],
    [
        7074,
        "&ensp;"
    ],
    [
        0,
        "&emsp;"
    ],
    [
        0,
        "&emsp13;"
    ],
    [
        0,
        "&emsp14;"
    ],
    [
        1,
        "&numsp;"
    ],
    [
        0,
        "&puncsp;"
    ],
    [
        0,
        "&ThinSpace;"
    ],
    [
        0,
        "&hairsp;"
    ],
    [
        0,
        "&NegativeMediumSpace;"
    ],
    [
        0,
        "&zwnj;"
    ],
    [
        0,
        "&zwj;"
    ],
    [
        0,
        "&lrm;"
    ],
    [
        0,
        "&rlm;"
    ],
    [
        0,
        "&dash;"
    ],
    [
        2,
        "&ndash;"
    ],
    [
        0,
        "&mdash;"
    ],
    [
        0,
        "&horbar;"
    ],
    [
        0,
        "&Verbar;"
    ],
    [
        1,
        "&lsquo;"
    ],
    [
        0,
        "&CloseCurlyQuote;"
    ],
    [
        0,
        "&lsquor;"
    ],
    [
        1,
        "&ldquo;"
    ],
    [
        0,
        "&CloseCurlyDoubleQuote;"
    ],
    [
        0,
        "&bdquo;"
    ],
    [
        1,
        "&dagger;"
    ],
    [
        0,
        "&Dagger;"
    ],
    [
        0,
        "&bull;"
    ],
    [
        2,
        "&nldr;"
    ],
    [
        0,
        "&hellip;"
    ],
    [
        9,
        "&permil;"
    ],
    [
        0,
        "&pertenk;"
    ],
    [
        0,
        "&prime;"
    ],
    [
        0,
        "&Prime;"
    ],
    [
        0,
        "&tprime;"
    ],
    [
        0,
        "&backprime;"
    ],
    [
        3,
        "&lsaquo;"
    ],
    [
        0,
        "&rsaquo;"
    ],
    [
        3,
        "&oline;"
    ],
    [
        2,
        "&caret;"
    ],
    [
        1,
        "&hybull;"
    ],
    [
        0,
        "&frasl;"
    ],
    [
        10,
        "&bsemi;"
    ],
    [
        7,
        "&qprime;"
    ],
    [
        7,
        {
            v: "&MediumSpace;",
            n: 8202,
            o: "&ThickSpace;"
        }
    ],
    [
        0,
        "&NoBreak;"
    ],
    [
        0,
        "&af;"
    ],
    [
        0,
        "&InvisibleTimes;"
    ],
    [
        0,
        "&ic;"
    ],
    [
        72,
        "&euro;"
    ],
    [
        46,
        "&tdot;"
    ],
    [
        0,
        "&DotDot;"
    ],
    [
        37,
        "&complexes;"
    ],
    [
        2,
        "&incare;"
    ],
    [
        4,
        "&gscr;"
    ],
    [
        0,
        "&hamilt;"
    ],
    [
        0,
        "&Hfr;"
    ],
    [
        0,
        "&Hopf;"
    ],
    [
        0,
        "&planckh;"
    ],
    [
        0,
        "&hbar;"
    ],
    [
        0,
        "&imagline;"
    ],
    [
        0,
        "&Ifr;"
    ],
    [
        0,
        "&lagran;"
    ],
    [
        0,
        "&ell;"
    ],
    [
        1,
        "&naturals;"
    ],
    [
        0,
        "&numero;"
    ],
    [
        0,
        "&copysr;"
    ],
    [
        0,
        "&weierp;"
    ],
    [
        0,
        "&Popf;"
    ],
    [
        0,
        "&Qopf;"
    ],
    [
        0,
        "&realine;"
    ],
    [
        0,
        "&real;"
    ],
    [
        0,
        "&reals;"
    ],
    [
        0,
        "&rx;"
    ],
    [
        3,
        "&trade;"
    ],
    [
        1,
        "&integers;"
    ],
    [
        2,
        "&mho;"
    ],
    [
        0,
        "&zeetrf;"
    ],
    [
        0,
        "&iiota;"
    ],
    [
        2,
        "&bernou;"
    ],
    [
        0,
        "&Cayleys;"
    ],
    [
        1,
        "&escr;"
    ],
    [
        0,
        "&Escr;"
    ],
    [
        0,
        "&Fouriertrf;"
    ],
    [
        1,
        "&Mellintrf;"
    ],
    [
        0,
        "&order;"
    ],
    [
        0,
        "&alefsym;"
    ],
    [
        0,
        "&beth;"
    ],
    [
        0,
        "&gimel;"
    ],
    [
        0,
        "&daleth;"
    ],
    [
        12,
        "&CapitalDifferentialD;"
    ],
    [
        0,
        "&dd;"
    ],
    [
        0,
        "&ee;"
    ],
    [
        0,
        "&ii;"
    ],
    [
        10,
        "&frac13;"
    ],
    [
        0,
        "&frac23;"
    ],
    [
        0,
        "&frac15;"
    ],
    [
        0,
        "&frac25;"
    ],
    [
        0,
        "&frac35;"
    ],
    [
        0,
        "&frac45;"
    ],
    [
        0,
        "&frac16;"
    ],
    [
        0,
        "&frac56;"
    ],
    [
        0,
        "&frac18;"
    ],
    [
        0,
        "&frac38;"
    ],
    [
        0,
        "&frac58;"
    ],
    [
        0,
        "&frac78;"
    ],
    [
        49,
        "&larr;"
    ],
    [
        0,
        "&ShortUpArrow;"
    ],
    [
        0,
        "&rarr;"
    ],
    [
        0,
        "&darr;"
    ],
    [
        0,
        "&harr;"
    ],
    [
        0,
        "&updownarrow;"
    ],
    [
        0,
        "&nwarr;"
    ],
    [
        0,
        "&nearr;"
    ],
    [
        0,
        "&LowerRightArrow;"
    ],
    [
        0,
        "&LowerLeftArrow;"
    ],
    [
        0,
        "&nlarr;"
    ],
    [
        0,
        "&nrarr;"
    ],
    [
        1,
        {
            v: "&rarrw;",
            n: 824,
            o: "&nrarrw;"
        }
    ],
    [
        0,
        "&Larr;"
    ],
    [
        0,
        "&Uarr;"
    ],
    [
        0,
        "&Rarr;"
    ],
    [
        0,
        "&Darr;"
    ],
    [
        0,
        "&larrtl;"
    ],
    [
        0,
        "&rarrtl;"
    ],
    [
        0,
        "&LeftTeeArrow;"
    ],
    [
        0,
        "&mapstoup;"
    ],
    [
        0,
        "&map;"
    ],
    [
        0,
        "&DownTeeArrow;"
    ],
    [
        1,
        "&hookleftarrow;"
    ],
    [
        0,
        "&hookrightarrow;"
    ],
    [
        0,
        "&larrlp;"
    ],
    [
        0,
        "&looparrowright;"
    ],
    [
        0,
        "&harrw;"
    ],
    [
        0,
        "&nharr;"
    ],
    [
        1,
        "&lsh;"
    ],
    [
        0,
        "&rsh;"
    ],
    [
        0,
        "&ldsh;"
    ],
    [
        0,
        "&rdsh;"
    ],
    [
        1,
        "&crarr;"
    ],
    [
        0,
        "&cularr;"
    ],
    [
        0,
        "&curarr;"
    ],
    [
        2,
        "&circlearrowleft;"
    ],
    [
        0,
        "&circlearrowright;"
    ],
    [
        0,
        "&leftharpoonup;"
    ],
    [
        0,
        "&DownLeftVector;"
    ],
    [
        0,
        "&RightUpVector;"
    ],
    [
        0,
        "&LeftUpVector;"
    ],
    [
        0,
        "&rharu;"
    ],
    [
        0,
        "&DownRightVector;"
    ],
    [
        0,
        "&dharr;"
    ],
    [
        0,
        "&dharl;"
    ],
    [
        0,
        "&RightArrowLeftArrow;"
    ],
    [
        0,
        "&udarr;"
    ],
    [
        0,
        "&LeftArrowRightArrow;"
    ],
    [
        0,
        "&leftleftarrows;"
    ],
    [
        0,
        "&upuparrows;"
    ],
    [
        0,
        "&rightrightarrows;"
    ],
    [
        0,
        "&ddarr;"
    ],
    [
        0,
        "&leftrightharpoons;"
    ],
    [
        0,
        "&Equilibrium;"
    ],
    [
        0,
        "&nlArr;"
    ],
    [
        0,
        "&nhArr;"
    ],
    [
        0,
        "&nrArr;"
    ],
    [
        0,
        "&DoubleLeftArrow;"
    ],
    [
        0,
        "&DoubleUpArrow;"
    ],
    [
        0,
        "&DoubleRightArrow;"
    ],
    [
        0,
        "&dArr;"
    ],
    [
        0,
        "&DoubleLeftRightArrow;"
    ],
    [
        0,
        "&DoubleUpDownArrow;"
    ],
    [
        0,
        "&nwArr;"
    ],
    [
        0,
        "&neArr;"
    ],
    [
        0,
        "&seArr;"
    ],
    [
        0,
        "&swArr;"
    ],
    [
        0,
        "&lAarr;"
    ],
    [
        0,
        "&rAarr;"
    ],
    [
        1,
        "&zigrarr;"
    ],
    [
        6,
        "&larrb;"
    ],
    [
        0,
        "&rarrb;"
    ],
    [
        15,
        "&DownArrowUpArrow;"
    ],
    [
        7,
        "&loarr;"
    ],
    [
        0,
        "&roarr;"
    ],
    [
        0,
        "&hoarr;"
    ],
    [
        0,
        "&forall;"
    ],
    [
        0,
        "&comp;"
    ],
    [
        0,
        {
            v: "&part;",
            n: 824,
            o: "&npart;"
        }
    ],
    [
        0,
        "&exist;"
    ],
    [
        0,
        "&nexist;"
    ],
    [
        0,
        "&empty;"
    ],
    [
        1,
        "&Del;"
    ],
    [
        0,
        "&Element;"
    ],
    [
        0,
        "&NotElement;"
    ],
    [
        1,
        "&ni;"
    ],
    [
        0,
        "&notni;"
    ],
    [
        2,
        "&prod;"
    ],
    [
        0,
        "&coprod;"
    ],
    [
        0,
        "&sum;"
    ],
    [
        0,
        "&minus;"
    ],
    [
        0,
        "&MinusPlus;"
    ],
    [
        0,
        "&dotplus;"
    ],
    [
        1,
        "&Backslash;"
    ],
    [
        0,
        "&lowast;"
    ],
    [
        0,
        "&compfn;"
    ],
    [
        1,
        "&radic;"
    ],
    [
        2,
        "&prop;"
    ],
    [
        0,
        "&infin;"
    ],
    [
        0,
        "&angrt;"
    ],
    [
        0,
        {
            v: "&ang;",
            n: 8402,
            o: "&nang;"
        }
    ],
    [
        0,
        "&angmsd;"
    ],
    [
        0,
        "&angsph;"
    ],
    [
        0,
        "&mid;"
    ],
    [
        0,
        "&nmid;"
    ],
    [
        0,
        "&DoubleVerticalBar;"
    ],
    [
        0,
        "&NotDoubleVerticalBar;"
    ],
    [
        0,
        "&and;"
    ],
    [
        0,
        "&or;"
    ],
    [
        0,
        {
            v: "&cap;",
            n: 65024,
            o: "&caps;"
        }
    ],
    [
        0,
        {
            v: "&cup;",
            n: 65024,
            o: "&cups;"
        }
    ],
    [
        0,
        "&int;"
    ],
    [
        0,
        "&Int;"
    ],
    [
        0,
        "&iiint;"
    ],
    [
        0,
        "&conint;"
    ],
    [
        0,
        "&Conint;"
    ],
    [
        0,
        "&Cconint;"
    ],
    [
        0,
        "&cwint;"
    ],
    [
        0,
        "&ClockwiseContourIntegral;"
    ],
    [
        0,
        "&awconint;"
    ],
    [
        0,
        "&there4;"
    ],
    [
        0,
        "&becaus;"
    ],
    [
        0,
        "&ratio;"
    ],
    [
        0,
        "&Colon;"
    ],
    [
        0,
        "&dotminus;"
    ],
    [
        1,
        "&mDDot;"
    ],
    [
        0,
        "&homtht;"
    ],
    [
        0,
        {
            v: "&sim;",
            n: 8402,
            o: "&nvsim;"
        }
    ],
    [
        0,
        {
            v: "&backsim;",
            n: 817,
            o: "&race;"
        }
    ],
    [
        0,
        {
            v: "&ac;",
            n: 819,
            o: "&acE;"
        }
    ],
    [
        0,
        "&acd;"
    ],
    [
        0,
        "&VerticalTilde;"
    ],
    [
        0,
        "&NotTilde;"
    ],
    [
        0,
        {
            v: "&eqsim;",
            n: 824,
            o: "&nesim;"
        }
    ],
    [
        0,
        "&sime;"
    ],
    [
        0,
        "&NotTildeEqual;"
    ],
    [
        0,
        "&cong;"
    ],
    [
        0,
        "&simne;"
    ],
    [
        0,
        "&ncong;"
    ],
    [
        0,
        "&ap;"
    ],
    [
        0,
        "&nap;"
    ],
    [
        0,
        "&ape;"
    ],
    [
        0,
        {
            v: "&apid;",
            n: 824,
            o: "&napid;"
        }
    ],
    [
        0,
        "&backcong;"
    ],
    [
        0,
        {
            v: "&asympeq;",
            n: 8402,
            o: "&nvap;"
        }
    ],
    [
        0,
        {
            v: "&bump;",
            n: 824,
            o: "&nbump;"
        }
    ],
    [
        0,
        {
            v: "&bumpe;",
            n: 824,
            o: "&nbumpe;"
        }
    ],
    [
        0,
        {
            v: "&doteq;",
            n: 824,
            o: "&nedot;"
        }
    ],
    [
        0,
        "&doteqdot;"
    ],
    [
        0,
        "&efDot;"
    ],
    [
        0,
        "&erDot;"
    ],
    [
        0,
        "&Assign;"
    ],
    [
        0,
        "&ecolon;"
    ],
    [
        0,
        "&ecir;"
    ],
    [
        0,
        "&circeq;"
    ],
    [
        1,
        "&wedgeq;"
    ],
    [
        0,
        "&veeeq;"
    ],
    [
        1,
        "&triangleq;"
    ],
    [
        2,
        "&equest;"
    ],
    [
        0,
        "&ne;"
    ],
    [
        0,
        {
            v: "&Congruent;",
            n: 8421,
            o: "&bnequiv;"
        }
    ],
    [
        0,
        "&nequiv;"
    ],
    [
        1,
        {
            v: "&le;",
            n: 8402,
            o: "&nvle;"
        }
    ],
    [
        0,
        {
            v: "&ge;",
            n: 8402,
            o: "&nvge;"
        }
    ],
    [
        0,
        {
            v: "&lE;",
            n: 824,
            o: "&nlE;"
        }
    ],
    [
        0,
        {
            v: "&gE;",
            n: 824,
            o: "&ngE;"
        }
    ],
    [
        0,
        {
            v: "&lnE;",
            n: 65024,
            o: "&lvertneqq;"
        }
    ],
    [
        0,
        {
            v: "&gnE;",
            n: 65024,
            o: "&gvertneqq;"
        }
    ],
    [
        0,
        {
            v: "&ll;",
            n: new Map(/* #__PURE__ */ restoreDiff([
                [
                    824,
                    "&nLtv;"
                ],
                [
                    7577,
                    "&nLt;"
                ]
            ]))
        }
    ],
    [
        0,
        {
            v: "&gg;",
            n: new Map(/* #__PURE__ */ restoreDiff([
                [
                    824,
                    "&nGtv;"
                ],
                [
                    7577,
                    "&nGt;"
                ]
            ]))
        }
    ],
    [
        0,
        "&between;"
    ],
    [
        0,
        "&NotCupCap;"
    ],
    [
        0,
        "&nless;"
    ],
    [
        0,
        "&ngt;"
    ],
    [
        0,
        "&nle;"
    ],
    [
        0,
        "&nge;"
    ],
    [
        0,
        "&lesssim;"
    ],
    [
        0,
        "&GreaterTilde;"
    ],
    [
        0,
        "&nlsim;"
    ],
    [
        0,
        "&ngsim;"
    ],
    [
        0,
        "&LessGreater;"
    ],
    [
        0,
        "&gl;"
    ],
    [
        0,
        "&NotLessGreater;"
    ],
    [
        0,
        "&NotGreaterLess;"
    ],
    [
        0,
        "&pr;"
    ],
    [
        0,
        "&sc;"
    ],
    [
        0,
        "&prcue;"
    ],
    [
        0,
        "&sccue;"
    ],
    [
        0,
        "&PrecedesTilde;"
    ],
    [
        0,
        {
            v: "&scsim;",
            n: 824,
            o: "&NotSucceedsTilde;"
        }
    ],
    [
        0,
        "&NotPrecedes;"
    ],
    [
        0,
        "&NotSucceeds;"
    ],
    [
        0,
        {
            v: "&sub;",
            n: 8402,
            o: "&NotSubset;"
        }
    ],
    [
        0,
        {
            v: "&sup;",
            n: 8402,
            o: "&NotSuperset;"
        }
    ],
    [
        0,
        "&nsub;"
    ],
    [
        0,
        "&nsup;"
    ],
    [
        0,
        "&sube;"
    ],
    [
        0,
        "&supe;"
    ],
    [
        0,
        "&NotSubsetEqual;"
    ],
    [
        0,
        "&NotSupersetEqual;"
    ],
    [
        0,
        {
            v: "&subne;",
            n: 65024,
            o: "&varsubsetneq;"
        }
    ],
    [
        0,
        {
            v: "&supne;",
            n: 65024,
            o: "&varsupsetneq;"
        }
    ],
    [
        1,
        "&cupdot;"
    ],
    [
        0,
        "&UnionPlus;"
    ],
    [
        0,
        {
            v: "&sqsub;",
            n: 824,
            o: "&NotSquareSubset;"
        }
    ],
    [
        0,
        {
            v: "&sqsup;",
            n: 824,
            o: "&NotSquareSuperset;"
        }
    ],
    [
        0,
        "&sqsube;"
    ],
    [
        0,
        "&sqsupe;"
    ],
    [
        0,
        {
            v: "&sqcap;",
            n: 65024,
            o: "&sqcaps;"
        }
    ],
    [
        0,
        {
            v: "&sqcup;",
            n: 65024,
            o: "&sqcups;"
        }
    ],
    [
        0,
        "&CirclePlus;"
    ],
    [
        0,
        "&CircleMinus;"
    ],
    [
        0,
        "&CircleTimes;"
    ],
    [
        0,
        "&osol;"
    ],
    [
        0,
        "&CircleDot;"
    ],
    [
        0,
        "&circledcirc;"
    ],
    [
        0,
        "&circledast;"
    ],
    [
        1,
        "&circleddash;"
    ],
    [
        0,
        "&boxplus;"
    ],
    [
        0,
        "&boxminus;"
    ],
    [
        0,
        "&boxtimes;"
    ],
    [
        0,
        "&dotsquare;"
    ],
    [
        0,
        "&RightTee;"
    ],
    [
        0,
        "&dashv;"
    ],
    [
        0,
        "&DownTee;"
    ],
    [
        0,
        "&bot;"
    ],
    [
        1,
        "&models;"
    ],
    [
        0,
        "&DoubleRightTee;"
    ],
    [
        0,
        "&Vdash;"
    ],
    [
        0,
        "&Vvdash;"
    ],
    [
        0,
        "&VDash;"
    ],
    [
        0,
        "&nvdash;"
    ],
    [
        0,
        "&nvDash;"
    ],
    [
        0,
        "&nVdash;"
    ],
    [
        0,
        "&nVDash;"
    ],
    [
        0,
        "&prurel;"
    ],
    [
        1,
        "&LeftTriangle;"
    ],
    [
        0,
        "&RightTriangle;"
    ],
    [
        0,
        {
            v: "&LeftTriangleEqual;",
            n: 8402,
            o: "&nvltrie;"
        }
    ],
    [
        0,
        {
            v: "&RightTriangleEqual;",
            n: 8402,
            o: "&nvrtrie;"
        }
    ],
    [
        0,
        "&origof;"
    ],
    [
        0,
        "&imof;"
    ],
    [
        0,
        "&multimap;"
    ],
    [
        0,
        "&hercon;"
    ],
    [
        0,
        "&intcal;"
    ],
    [
        0,
        "&veebar;"
    ],
    [
        1,
        "&barvee;"
    ],
    [
        0,
        "&angrtvb;"
    ],
    [
        0,
        "&lrtri;"
    ],
    [
        0,
        "&bigwedge;"
    ],
    [
        0,
        "&bigvee;"
    ],
    [
        0,
        "&bigcap;"
    ],
    [
        0,
        "&bigcup;"
    ],
    [
        0,
        "&diam;"
    ],
    [
        0,
        "&sdot;"
    ],
    [
        0,
        "&sstarf;"
    ],
    [
        0,
        "&divideontimes;"
    ],
    [
        0,
        "&bowtie;"
    ],
    [
        0,
        "&ltimes;"
    ],
    [
        0,
        "&rtimes;"
    ],
    [
        0,
        "&leftthreetimes;"
    ],
    [
        0,
        "&rightthreetimes;"
    ],
    [
        0,
        "&backsimeq;"
    ],
    [
        0,
        "&curlyvee;"
    ],
    [
        0,
        "&curlywedge;"
    ],
    [
        0,
        "&Sub;"
    ],
    [
        0,
        "&Sup;"
    ],
    [
        0,
        "&Cap;"
    ],
    [
        0,
        "&Cup;"
    ],
    [
        0,
        "&fork;"
    ],
    [
        0,
        "&epar;"
    ],
    [
        0,
        "&lessdot;"
    ],
    [
        0,
        "&gtdot;"
    ],
    [
        0,
        {
            v: "&Ll;",
            n: 824,
            o: "&nLl;"
        }
    ],
    [
        0,
        {
            v: "&Gg;",
            n: 824,
            o: "&nGg;"
        }
    ],
    [
        0,
        {
            v: "&leg;",
            n: 65024,
            o: "&lesg;"
        }
    ],
    [
        0,
        {
            v: "&gel;",
            n: 65024,
            o: "&gesl;"
        }
    ],
    [
        2,
        "&cuepr;"
    ],
    [
        0,
        "&cuesc;"
    ],
    [
        0,
        "&NotPrecedesSlantEqual;"
    ],
    [
        0,
        "&NotSucceedsSlantEqual;"
    ],
    [
        0,
        "&NotSquareSubsetEqual;"
    ],
    [
        0,
        "&NotSquareSupersetEqual;"
    ],
    [
        2,
        "&lnsim;"
    ],
    [
        0,
        "&gnsim;"
    ],
    [
        0,
        "&precnsim;"
    ],
    [
        0,
        "&scnsim;"
    ],
    [
        0,
        "&nltri;"
    ],
    [
        0,
        "&NotRightTriangle;"
    ],
    [
        0,
        "&nltrie;"
    ],
    [
        0,
        "&NotRightTriangleEqual;"
    ],
    [
        0,
        "&vellip;"
    ],
    [
        0,
        "&ctdot;"
    ],
    [
        0,
        "&utdot;"
    ],
    [
        0,
        "&dtdot;"
    ],
    [
        0,
        "&disin;"
    ],
    [
        0,
        "&isinsv;"
    ],
    [
        0,
        "&isins;"
    ],
    [
        0,
        {
            v: "&isindot;",
            n: 824,
            o: "&notindot;"
        }
    ],
    [
        0,
        "&notinvc;"
    ],
    [
        0,
        "&notinvb;"
    ],
    [
        1,
        {
            v: "&isinE;",
            n: 824,
            o: "&notinE;"
        }
    ],
    [
        0,
        "&nisd;"
    ],
    [
        0,
        "&xnis;"
    ],
    [
        0,
        "&nis;"
    ],
    [
        0,
        "&notnivc;"
    ],
    [
        0,
        "&notnivb;"
    ],
    [
        6,
        "&barwed;"
    ],
    [
        0,
        "&Barwed;"
    ],
    [
        1,
        "&lceil;"
    ],
    [
        0,
        "&rceil;"
    ],
    [
        0,
        "&LeftFloor;"
    ],
    [
        0,
        "&rfloor;"
    ],
    [
        0,
        "&drcrop;"
    ],
    [
        0,
        "&dlcrop;"
    ],
    [
        0,
        "&urcrop;"
    ],
    [
        0,
        "&ulcrop;"
    ],
    [
        0,
        "&bnot;"
    ],
    [
        1,
        "&profline;"
    ],
    [
        0,
        "&profsurf;"
    ],
    [
        1,
        "&telrec;"
    ],
    [
        0,
        "&target;"
    ],
    [
        5,
        "&ulcorn;"
    ],
    [
        0,
        "&urcorn;"
    ],
    [
        0,
        "&dlcorn;"
    ],
    [
        0,
        "&drcorn;"
    ],
    [
        2,
        "&frown;"
    ],
    [
        0,
        "&smile;"
    ],
    [
        9,
        "&cylcty;"
    ],
    [
        0,
        "&profalar;"
    ],
    [
        7,
        "&topbot;"
    ],
    [
        6,
        "&ovbar;"
    ],
    [
        1,
        "&solbar;"
    ],
    [
        60,
        "&angzarr;"
    ],
    [
        51,
        "&lmoustache;"
    ],
    [
        0,
        "&rmoustache;"
    ],
    [
        2,
        "&OverBracket;"
    ],
    [
        0,
        "&bbrk;"
    ],
    [
        0,
        "&bbrktbrk;"
    ],
    [
        37,
        "&OverParenthesis;"
    ],
    [
        0,
        "&UnderParenthesis;"
    ],
    [
        0,
        "&OverBrace;"
    ],
    [
        0,
        "&UnderBrace;"
    ],
    [
        2,
        "&trpezium;"
    ],
    [
        4,
        "&elinters;"
    ],
    [
        59,
        "&blank;"
    ],
    [
        164,
        "&circledS;"
    ],
    [
        55,
        "&boxh;"
    ],
    [
        1,
        "&boxv;"
    ],
    [
        9,
        "&boxdr;"
    ],
    [
        3,
        "&boxdl;"
    ],
    [
        3,
        "&boxur;"
    ],
    [
        3,
        "&boxul;"
    ],
    [
        3,
        "&boxvr;"
    ],
    [
        7,
        "&boxvl;"
    ],
    [
        7,
        "&boxhd;"
    ],
    [
        7,
        "&boxhu;"
    ],
    [
        7,
        "&boxvh;"
    ],
    [
        19,
        "&boxH;"
    ],
    [
        0,
        "&boxV;"
    ],
    [
        0,
        "&boxdR;"
    ],
    [
        0,
        "&boxDr;"
    ],
    [
        0,
        "&boxDR;"
    ],
    [
        0,
        "&boxdL;"
    ],
    [
        0,
        "&boxDl;"
    ],
    [
        0,
        "&boxDL;"
    ],
    [
        0,
        "&boxuR;"
    ],
    [
        0,
        "&boxUr;"
    ],
    [
        0,
        "&boxUR;"
    ],
    [
        0,
        "&boxuL;"
    ],
    [
        0,
        "&boxUl;"
    ],
    [
        0,
        "&boxUL;"
    ],
    [
        0,
        "&boxvR;"
    ],
    [
        0,
        "&boxVr;"
    ],
    [
        0,
        "&boxVR;"
    ],
    [
        0,
        "&boxvL;"
    ],
    [
        0,
        "&boxVl;"
    ],
    [
        0,
        "&boxVL;"
    ],
    [
        0,
        "&boxHd;"
    ],
    [
        0,
        "&boxhD;"
    ],
    [
        0,
        "&boxHD;"
    ],
    [
        0,
        "&boxHu;"
    ],
    [
        0,
        "&boxhU;"
    ],
    [
        0,
        "&boxHU;"
    ],
    [
        0,
        "&boxvH;"
    ],
    [
        0,
        "&boxVh;"
    ],
    [
        0,
        "&boxVH;"
    ],
    [
        19,
        "&uhblk;"
    ],
    [
        3,
        "&lhblk;"
    ],
    [
        3,
        "&block;"
    ],
    [
        8,
        "&blk14;"
    ],
    [
        0,
        "&blk12;"
    ],
    [
        0,
        "&blk34;"
    ],
    [
        13,
        "&square;"
    ],
    [
        8,
        "&blacksquare;"
    ],
    [
        0,
        "&EmptyVerySmallSquare;"
    ],
    [
        1,
        "&rect;"
    ],
    [
        0,
        "&marker;"
    ],
    [
        2,
        "&fltns;"
    ],
    [
        1,
        "&bigtriangleup;"
    ],
    [
        0,
        "&blacktriangle;"
    ],
    [
        0,
        "&triangle;"
    ],
    [
        2,
        "&blacktriangleright;"
    ],
    [
        0,
        "&rtri;"
    ],
    [
        3,
        "&bigtriangledown;"
    ],
    [
        0,
        "&blacktriangledown;"
    ],
    [
        0,
        "&dtri;"
    ],
    [
        2,
        "&blacktriangleleft;"
    ],
    [
        0,
        "&ltri;"
    ],
    [
        6,
        "&loz;"
    ],
    [
        0,
        "&cir;"
    ],
    [
        32,
        "&tridot;"
    ],
    [
        2,
        "&bigcirc;"
    ],
    [
        8,
        "&ultri;"
    ],
    [
        0,
        "&urtri;"
    ],
    [
        0,
        "&lltri;"
    ],
    [
        0,
        "&EmptySmallSquare;"
    ],
    [
        0,
        "&FilledSmallSquare;"
    ],
    [
        8,
        "&bigstar;"
    ],
    [
        0,
        "&star;"
    ],
    [
        7,
        "&phone;"
    ],
    [
        49,
        "&female;"
    ],
    [
        1,
        "&male;"
    ],
    [
        29,
        "&spades;"
    ],
    [
        2,
        "&clubs;"
    ],
    [
        1,
        "&hearts;"
    ],
    [
        0,
        "&diamondsuit;"
    ],
    [
        3,
        "&sung;"
    ],
    [
        2,
        "&flat;"
    ],
    [
        0,
        "&natural;"
    ],
    [
        0,
        "&sharp;"
    ],
    [
        163,
        "&check;"
    ],
    [
        3,
        "&cross;"
    ],
    [
        8,
        "&malt;"
    ],
    [
        21,
        "&sext;"
    ],
    [
        33,
        "&VerticalSeparator;"
    ],
    [
        25,
        "&lbbrk;"
    ],
    [
        0,
        "&rbbrk;"
    ],
    [
        84,
        "&bsolhsub;"
    ],
    [
        0,
        "&suphsol;"
    ],
    [
        28,
        "&LeftDoubleBracket;"
    ],
    [
        0,
        "&RightDoubleBracket;"
    ],
    [
        0,
        "&lang;"
    ],
    [
        0,
        "&rang;"
    ],
    [
        0,
        "&Lang;"
    ],
    [
        0,
        "&Rang;"
    ],
    [
        0,
        "&loang;"
    ],
    [
        0,
        "&roang;"
    ],
    [
        7,
        "&longleftarrow;"
    ],
    [
        0,
        "&longrightarrow;"
    ],
    [
        0,
        "&longleftrightarrow;"
    ],
    [
        0,
        "&DoubleLongLeftArrow;"
    ],
    [
        0,
        "&DoubleLongRightArrow;"
    ],
    [
        0,
        "&DoubleLongLeftRightArrow;"
    ],
    [
        1,
        "&longmapsto;"
    ],
    [
        2,
        "&dzigrarr;"
    ],
    [
        258,
        "&nvlArr;"
    ],
    [
        0,
        "&nvrArr;"
    ],
    [
        0,
        "&nvHarr;"
    ],
    [
        0,
        "&Map;"
    ],
    [
        6,
        "&lbarr;"
    ],
    [
        0,
        "&bkarow;"
    ],
    [
        0,
        "&lBarr;"
    ],
    [
        0,
        "&dbkarow;"
    ],
    [
        0,
        "&drbkarow;"
    ],
    [
        0,
        "&DDotrahd;"
    ],
    [
        0,
        "&UpArrowBar;"
    ],
    [
        0,
        "&DownArrowBar;"
    ],
    [
        2,
        "&Rarrtl;"
    ],
    [
        2,
        "&latail;"
    ],
    [
        0,
        "&ratail;"
    ],
    [
        0,
        "&lAtail;"
    ],
    [
        0,
        "&rAtail;"
    ],
    [
        0,
        "&larrfs;"
    ],
    [
        0,
        "&rarrfs;"
    ],
    [
        0,
        "&larrbfs;"
    ],
    [
        0,
        "&rarrbfs;"
    ],
    [
        2,
        "&nwarhk;"
    ],
    [
        0,
        "&nearhk;"
    ],
    [
        0,
        "&hksearow;"
    ],
    [
        0,
        "&hkswarow;"
    ],
    [
        0,
        "&nwnear;"
    ],
    [
        0,
        "&nesear;"
    ],
    [
        0,
        "&seswar;"
    ],
    [
        0,
        "&swnwar;"
    ],
    [
        8,
        {
            v: "&rarrc;",
            n: 824,
            o: "&nrarrc;"
        }
    ],
    [
        1,
        "&cudarrr;"
    ],
    [
        0,
        "&ldca;"
    ],
    [
        0,
        "&rdca;"
    ],
    [
        0,
        "&cudarrl;"
    ],
    [
        0,
        "&larrpl;"
    ],
    [
        2,
        "&curarrm;"
    ],
    [
        0,
        "&cularrp;"
    ],
    [
        7,
        "&rarrpl;"
    ],
    [
        2,
        "&harrcir;"
    ],
    [
        0,
        "&Uarrocir;"
    ],
    [
        0,
        "&lurdshar;"
    ],
    [
        0,
        "&ldrushar;"
    ],
    [
        2,
        "&LeftRightVector;"
    ],
    [
        0,
        "&RightUpDownVector;"
    ],
    [
        0,
        "&DownLeftRightVector;"
    ],
    [
        0,
        "&LeftUpDownVector;"
    ],
    [
        0,
        "&LeftVectorBar;"
    ],
    [
        0,
        "&RightVectorBar;"
    ],
    [
        0,
        "&RightUpVectorBar;"
    ],
    [
        0,
        "&RightDownVectorBar;"
    ],
    [
        0,
        "&DownLeftVectorBar;"
    ],
    [
        0,
        "&DownRightVectorBar;"
    ],
    [
        0,
        "&LeftUpVectorBar;"
    ],
    [
        0,
        "&LeftDownVectorBar;"
    ],
    [
        0,
        "&LeftTeeVector;"
    ],
    [
        0,
        "&RightTeeVector;"
    ],
    [
        0,
        "&RightUpTeeVector;"
    ],
    [
        0,
        "&RightDownTeeVector;"
    ],
    [
        0,
        "&DownLeftTeeVector;"
    ],
    [
        0,
        "&DownRightTeeVector;"
    ],
    [
        0,
        "&LeftUpTeeVector;"
    ],
    [
        0,
        "&LeftDownTeeVector;"
    ],
    [
        0,
        "&lHar;"
    ],
    [
        0,
        "&uHar;"
    ],
    [
        0,
        "&rHar;"
    ],
    [
        0,
        "&dHar;"
    ],
    [
        0,
        "&luruhar;"
    ],
    [
        0,
        "&ldrdhar;"
    ],
    [
        0,
        "&ruluhar;"
    ],
    [
        0,
        "&rdldhar;"
    ],
    [
        0,
        "&lharul;"
    ],
    [
        0,
        "&llhard;"
    ],
    [
        0,
        "&rharul;"
    ],
    [
        0,
        "&lrhard;"
    ],
    [
        0,
        "&udhar;"
    ],
    [
        0,
        "&duhar;"
    ],
    [
        0,
        "&RoundImplies;"
    ],
    [
        0,
        "&erarr;"
    ],
    [
        0,
        "&simrarr;"
    ],
    [
        0,
        "&larrsim;"
    ],
    [
        0,
        "&rarrsim;"
    ],
    [
        0,
        "&rarrap;"
    ],
    [
        0,
        "&ltlarr;"
    ],
    [
        1,
        "&gtrarr;"
    ],
    [
        0,
        "&subrarr;"
    ],
    [
        1,
        "&suplarr;"
    ],
    [
        0,
        "&lfisht;"
    ],
    [
        0,
        "&rfisht;"
    ],
    [
        0,
        "&ufisht;"
    ],
    [
        0,
        "&dfisht;"
    ],
    [
        5,
        "&lopar;"
    ],
    [
        0,
        "&ropar;"
    ],
    [
        4,
        "&lbrke;"
    ],
    [
        0,
        "&rbrke;"
    ],
    [
        0,
        "&lbrkslu;"
    ],
    [
        0,
        "&rbrksld;"
    ],
    [
        0,
        "&lbrksld;"
    ],
    [
        0,
        "&rbrkslu;"
    ],
    [
        0,
        "&langd;"
    ],
    [
        0,
        "&rangd;"
    ],
    [
        0,
        "&lparlt;"
    ],
    [
        0,
        "&rpargt;"
    ],
    [
        0,
        "&gtlPar;"
    ],
    [
        0,
        "&ltrPar;"
    ],
    [
        3,
        "&vzigzag;"
    ],
    [
        1,
        "&vangrt;"
    ],
    [
        0,
        "&angrtvbd;"
    ],
    [
        6,
        "&ange;"
    ],
    [
        0,
        "&range;"
    ],
    [
        0,
        "&dwangle;"
    ],
    [
        0,
        "&uwangle;"
    ],
    [
        0,
        "&angmsdaa;"
    ],
    [
        0,
        "&angmsdab;"
    ],
    [
        0,
        "&angmsdac;"
    ],
    [
        0,
        "&angmsdad;"
    ],
    [
        0,
        "&angmsdae;"
    ],
    [
        0,
        "&angmsdaf;"
    ],
    [
        0,
        "&angmsdag;"
    ],
    [
        0,
        "&angmsdah;"
    ],
    [
        0,
        "&bemptyv;"
    ],
    [
        0,
        "&demptyv;"
    ],
    [
        0,
        "&cemptyv;"
    ],
    [
        0,
        "&raemptyv;"
    ],
    [
        0,
        "&laemptyv;"
    ],
    [
        0,
        "&ohbar;"
    ],
    [
        0,
        "&omid;"
    ],
    [
        0,
        "&opar;"
    ],
    [
        1,
        "&operp;"
    ],
    [
        1,
        "&olcross;"
    ],
    [
        0,
        "&odsold;"
    ],
    [
        1,
        "&olcir;"
    ],
    [
        0,
        "&ofcir;"
    ],
    [
        0,
        "&olt;"
    ],
    [
        0,
        "&ogt;"
    ],
    [
        0,
        "&cirscir;"
    ],
    [
        0,
        "&cirE;"
    ],
    [
        0,
        "&solb;"
    ],
    [
        0,
        "&bsolb;"
    ],
    [
        3,
        "&boxbox;"
    ],
    [
        3,
        "&trisb;"
    ],
    [
        0,
        "&rtriltri;"
    ],
    [
        0,
        {
            v: "&LeftTriangleBar;",
            n: 824,
            o: "&NotLeftTriangleBar;"
        }
    ],
    [
        0,
        {
            v: "&RightTriangleBar;",
            n: 824,
            o: "&NotRightTriangleBar;"
        }
    ],
    [
        11,
        "&iinfin;"
    ],
    [
        0,
        "&infintie;"
    ],
    [
        0,
        "&nvinfin;"
    ],
    [
        4,
        "&eparsl;"
    ],
    [
        0,
        "&smeparsl;"
    ],
    [
        0,
        "&eqvparsl;"
    ],
    [
        5,
        "&blacklozenge;"
    ],
    [
        8,
        "&RuleDelayed;"
    ],
    [
        1,
        "&dsol;"
    ],
    [
        9,
        "&bigodot;"
    ],
    [
        0,
        "&bigoplus;"
    ],
    [
        0,
        "&bigotimes;"
    ],
    [
        1,
        "&biguplus;"
    ],
    [
        1,
        "&bigsqcup;"
    ],
    [
        5,
        "&iiiint;"
    ],
    [
        0,
        "&fpartint;"
    ],
    [
        2,
        "&cirfnint;"
    ],
    [
        0,
        "&awint;"
    ],
    [
        0,
        "&rppolint;"
    ],
    [
        0,
        "&scpolint;"
    ],
    [
        0,
        "&npolint;"
    ],
    [
        0,
        "&pointint;"
    ],
    [
        0,
        "&quatint;"
    ],
    [
        0,
        "&intlarhk;"
    ],
    [
        10,
        "&pluscir;"
    ],
    [
        0,
        "&plusacir;"
    ],
    [
        0,
        "&simplus;"
    ],
    [
        0,
        "&plusdu;"
    ],
    [
        0,
        "&plussim;"
    ],
    [
        0,
        "&plustwo;"
    ],
    [
        1,
        "&mcomma;"
    ],
    [
        0,
        "&minusdu;"
    ],
    [
        2,
        "&loplus;"
    ],
    [
        0,
        "&roplus;"
    ],
    [
        0,
        "&Cross;"
    ],
    [
        0,
        "&timesd;"
    ],
    [
        0,
        "&timesbar;"
    ],
    [
        1,
        "&smashp;"
    ],
    [
        0,
        "&lotimes;"
    ],
    [
        0,
        "&rotimes;"
    ],
    [
        0,
        "&otimesas;"
    ],
    [
        0,
        "&Otimes;"
    ],
    [
        0,
        "&odiv;"
    ],
    [
        0,
        "&triplus;"
    ],
    [
        0,
        "&triminus;"
    ],
    [
        0,
        "&tritime;"
    ],
    [
        0,
        "&intprod;"
    ],
    [
        2,
        "&amalg;"
    ],
    [
        0,
        "&capdot;"
    ],
    [
        1,
        "&ncup;"
    ],
    [
        0,
        "&ncap;"
    ],
    [
        0,
        "&capand;"
    ],
    [
        0,
        "&cupor;"
    ],
    [
        0,
        "&cupcap;"
    ],
    [
        0,
        "&capcup;"
    ],
    [
        0,
        "&cupbrcap;"
    ],
    [
        0,
        "&capbrcup;"
    ],
    [
        0,
        "&cupcup;"
    ],
    [
        0,
        "&capcap;"
    ],
    [
        0,
        "&ccups;"
    ],
    [
        0,
        "&ccaps;"
    ],
    [
        2,
        "&ccupssm;"
    ],
    [
        2,
        "&And;"
    ],
    [
        0,
        "&Or;"
    ],
    [
        0,
        "&andand;"
    ],
    [
        0,
        "&oror;"
    ],
    [
        0,
        "&orslope;"
    ],
    [
        0,
        "&andslope;"
    ],
    [
        1,
        "&andv;"
    ],
    [
        0,
        "&orv;"
    ],
    [
        0,
        "&andd;"
    ],
    [
        0,
        "&ord;"
    ],
    [
        1,
        "&wedbar;"
    ],
    [
        6,
        "&sdote;"
    ],
    [
        3,
        "&simdot;"
    ],
    [
        2,
        {
            v: "&congdot;",
            n: 824,
            o: "&ncongdot;"
        }
    ],
    [
        0,
        "&easter;"
    ],
    [
        0,
        "&apacir;"
    ],
    [
        0,
        {
            v: "&apE;",
            n: 824,
            o: "&napE;"
        }
    ],
    [
        0,
        "&eplus;"
    ],
    [
        0,
        "&pluse;"
    ],
    [
        0,
        "&Esim;"
    ],
    [
        0,
        "&Colone;"
    ],
    [
        0,
        "&Equal;"
    ],
    [
        1,
        "&ddotseq;"
    ],
    [
        0,
        "&equivDD;"
    ],
    [
        0,
        "&ltcir;"
    ],
    [
        0,
        "&gtcir;"
    ],
    [
        0,
        "&ltquest;"
    ],
    [
        0,
        "&gtquest;"
    ],
    [
        0,
        {
            v: "&leqslant;",
            n: 824,
            o: "&nleqslant;"
        }
    ],
    [
        0,
        {
            v: "&geqslant;",
            n: 824,
            o: "&ngeqslant;"
        }
    ],
    [
        0,
        "&lesdot;"
    ],
    [
        0,
        "&gesdot;"
    ],
    [
        0,
        "&lesdoto;"
    ],
    [
        0,
        "&gesdoto;"
    ],
    [
        0,
        "&lesdotor;"
    ],
    [
        0,
        "&gesdotol;"
    ],
    [
        0,
        "&lap;"
    ],
    [
        0,
        "&gap;"
    ],
    [
        0,
        "&lne;"
    ],
    [
        0,
        "&gne;"
    ],
    [
        0,
        "&lnap;"
    ],
    [
        0,
        "&gnap;"
    ],
    [
        0,
        "&lEg;"
    ],
    [
        0,
        "&gEl;"
    ],
    [
        0,
        "&lsime;"
    ],
    [
        0,
        "&gsime;"
    ],
    [
        0,
        "&lsimg;"
    ],
    [
        0,
        "&gsiml;"
    ],
    [
        0,
        "&lgE;"
    ],
    [
        0,
        "&glE;"
    ],
    [
        0,
        "&lesges;"
    ],
    [
        0,
        "&gesles;"
    ],
    [
        0,
        "&els;"
    ],
    [
        0,
        "&egs;"
    ],
    [
        0,
        "&elsdot;"
    ],
    [
        0,
        "&egsdot;"
    ],
    [
        0,
        "&el;"
    ],
    [
        0,
        "&eg;"
    ],
    [
        2,
        "&siml;"
    ],
    [
        0,
        "&simg;"
    ],
    [
        0,
        "&simlE;"
    ],
    [
        0,
        "&simgE;"
    ],
    [
        0,
        {
            v: "&LessLess;",
            n: 824,
            o: "&NotNestedLessLess;"
        }
    ],
    [
        0,
        {
            v: "&GreaterGreater;",
            n: 824,
            o: "&NotNestedGreaterGreater;"
        }
    ],
    [
        1,
        "&glj;"
    ],
    [
        0,
        "&gla;"
    ],
    [
        0,
        "&ltcc;"
    ],
    [
        0,
        "&gtcc;"
    ],
    [
        0,
        "&lescc;"
    ],
    [
        0,
        "&gescc;"
    ],
    [
        0,
        "&smt;"
    ],
    [
        0,
        "&lat;"
    ],
    [
        0,
        {
            v: "&smte;",
            n: 65024,
            o: "&smtes;"
        }
    ],
    [
        0,
        {
            v: "&late;",
            n: 65024,
            o: "&lates;"
        }
    ],
    [
        0,
        "&bumpE;"
    ],
    [
        0,
        {
            v: "&PrecedesEqual;",
            n: 824,
            o: "&NotPrecedesEqual;"
        }
    ],
    [
        0,
        {
            v: "&sce;",
            n: 824,
            o: "&NotSucceedsEqual;"
        }
    ],
    [
        2,
        "&prE;"
    ],
    [
        0,
        "&scE;"
    ],
    [
        0,
        "&precneqq;"
    ],
    [
        0,
        "&scnE;"
    ],
    [
        0,
        "&prap;"
    ],
    [
        0,
        "&scap;"
    ],
    [
        0,
        "&precnapprox;"
    ],
    [
        0,
        "&scnap;"
    ],
    [
        0,
        "&Pr;"
    ],
    [
        0,
        "&Sc;"
    ],
    [
        0,
        "&subdot;"
    ],
    [
        0,
        "&supdot;"
    ],
    [
        0,
        "&subplus;"
    ],
    [
        0,
        "&supplus;"
    ],
    [
        0,
        "&submult;"
    ],
    [
        0,
        "&supmult;"
    ],
    [
        0,
        "&subedot;"
    ],
    [
        0,
        "&supedot;"
    ],
    [
        0,
        {
            v: "&subE;",
            n: 824,
            o: "&nsubE;"
        }
    ],
    [
        0,
        {
            v: "&supE;",
            n: 824,
            o: "&nsupE;"
        }
    ],
    [
        0,
        "&subsim;"
    ],
    [
        0,
        "&supsim;"
    ],
    [
        2,
        {
            v: "&subnE;",
            n: 65024,
            o: "&varsubsetneqq;"
        }
    ],
    [
        0,
        {
            v: "&supnE;",
            n: 65024,
            o: "&varsupsetneqq;"
        }
    ],
    [
        2,
        "&csub;"
    ],
    [
        0,
        "&csup;"
    ],
    [
        0,
        "&csube;"
    ],
    [
        0,
        "&csupe;"
    ],
    [
        0,
        "&subsup;"
    ],
    [
        0,
        "&supsub;"
    ],
    [
        0,
        "&subsub;"
    ],
    [
        0,
        "&supsup;"
    ],
    [
        0,
        "&suphsub;"
    ],
    [
        0,
        "&supdsub;"
    ],
    [
        0,
        "&forkv;"
    ],
    [
        0,
        "&topfork;"
    ],
    [
        0,
        "&mlcp;"
    ],
    [
        8,
        "&Dashv;"
    ],
    [
        1,
        "&Vdashl;"
    ],
    [
        0,
        "&Barv;"
    ],
    [
        0,
        "&vBar;"
    ],
    [
        0,
        "&vBarv;"
    ],
    [
        1,
        "&Vbar;"
    ],
    [
        0,
        "&Not;"
    ],
    [
        0,
        "&bNot;"
    ],
    [
        0,
        "&rnmid;"
    ],
    [
        0,
        "&cirmid;"
    ],
    [
        0,
        "&midcir;"
    ],
    [
        0,
        "&topcir;"
    ],
    [
        0,
        "&nhpar;"
    ],
    [
        0,
        "&parsim;"
    ],
    [
        9,
        {
            v: "&parsl;",
            n: 8421,
            o: "&nparsl;"
        }
    ],
    [
        44343,
        {
            n: new Map(/* #__PURE__ */ restoreDiff([
                [
                    56476,
                    "&Ascr;"
                ],
                [
                    1,
                    "&Cscr;"
                ],
                [
                    0,
                    "&Dscr;"
                ],
                [
                    2,
                    "&Gscr;"
                ],
                [
                    2,
                    "&Jscr;"
                ],
                [
                    0,
                    "&Kscr;"
                ],
                [
                    2,
                    "&Nscr;"
                ],
                [
                    0,
                    "&Oscr;"
                ],
                [
                    0,
                    "&Pscr;"
                ],
                [
                    0,
                    "&Qscr;"
                ],
                [
                    1,
                    "&Sscr;"
                ],
                [
                    0,
                    "&Tscr;"
                ],
                [
                    0,
                    "&Uscr;"
                ],
                [
                    0,
                    "&Vscr;"
                ],
                [
                    0,
                    "&Wscr;"
                ],
                [
                    0,
                    "&Xscr;"
                ],
                [
                    0,
                    "&Yscr;"
                ],
                [
                    0,
                    "&Zscr;"
                ],
                [
                    0,
                    "&ascr;"
                ],
                [
                    0,
                    "&bscr;"
                ],
                [
                    0,
                    "&cscr;"
                ],
                [
                    0,
                    "&dscr;"
                ],
                [
                    1,
                    "&fscr;"
                ],
                [
                    1,
                    "&hscr;"
                ],
                [
                    0,
                    "&iscr;"
                ],
                [
                    0,
                    "&jscr;"
                ],
                [
                    0,
                    "&kscr;"
                ],
                [
                    0,
                    "&lscr;"
                ],
                [
                    0,
                    "&mscr;"
                ],
                [
                    0,
                    "&nscr;"
                ],
                [
                    1,
                    "&pscr;"
                ],
                [
                    0,
                    "&qscr;"
                ],
                [
                    0,
                    "&rscr;"
                ],
                [
                    0,
                    "&sscr;"
                ],
                [
                    0,
                    "&tscr;"
                ],
                [
                    0,
                    "&uscr;"
                ],
                [
                    0,
                    "&vscr;"
                ],
                [
                    0,
                    "&wscr;"
                ],
                [
                    0,
                    "&xscr;"
                ],
                [
                    0,
                    "&yscr;"
                ],
                [
                    0,
                    "&zscr;"
                ],
                [
                    52,
                    "&Afr;"
                ],
                [
                    0,
                    "&Bfr;"
                ],
                [
                    1,
                    "&Dfr;"
                ],
                [
                    0,
                    "&Efr;"
                ],
                [
                    0,
                    "&Ffr;"
                ],
                [
                    0,
                    "&Gfr;"
                ],
                [
                    2,
                    "&Jfr;"
                ],
                [
                    0,
                    "&Kfr;"
                ],
                [
                    0,
                    "&Lfr;"
                ],
                [
                    0,
                    "&Mfr;"
                ],
                [
                    0,
                    "&Nfr;"
                ],
                [
                    0,
                    "&Ofr;"
                ],
                [
                    0,
                    "&Pfr;"
                ],
                [
                    0,
                    "&Qfr;"
                ],
                [
                    1,
                    "&Sfr;"
                ],
                [
                    0,
                    "&Tfr;"
                ],
                [
                    0,
                    "&Ufr;"
                ],
                [
                    0,
                    "&Vfr;"
                ],
                [
                    0,
                    "&Wfr;"
                ],
                [
                    0,
                    "&Xfr;"
                ],
                [
                    0,
                    "&Yfr;"
                ],
                [
                    1,
                    "&afr;"
                ],
                [
                    0,
                    "&bfr;"
                ],
                [
                    0,
                    "&cfr;"
                ],
                [
                    0,
                    "&dfr;"
                ],
                [
                    0,
                    "&efr;"
                ],
                [
                    0,
                    "&ffr;"
                ],
                [
                    0,
                    "&gfr;"
                ],
                [
                    0,
                    "&hfr;"
                ],
                [
                    0,
                    "&ifr;"
                ],
                [
                    0,
                    "&jfr;"
                ],
                [
                    0,
                    "&kfr;"
                ],
                [
                    0,
                    "&lfr;"
                ],
                [
                    0,
                    "&mfr;"
                ],
                [
                    0,
                    "&nfr;"
                ],
                [
                    0,
                    "&ofr;"
                ],
                [
                    0,
                    "&pfr;"
                ],
                [
                    0,
                    "&qfr;"
                ],
                [
                    0,
                    "&rfr;"
                ],
                [
                    0,
                    "&sfr;"
                ],
                [
                    0,
                    "&tfr;"
                ],
                [
                    0,
                    "&ufr;"
                ],
                [
                    0,
                    "&vfr;"
                ],
                [
                    0,
                    "&wfr;"
                ],
                [
                    0,
                    "&xfr;"
                ],
                [
                    0,
                    "&yfr;"
                ],
                [
                    0,
                    "&zfr;"
                ],
                [
                    0,
                    "&Aopf;"
                ],
                [
                    0,
                    "&Bopf;"
                ],
                [
                    1,
                    "&Dopf;"
                ],
                [
                    0,
                    "&Eopf;"
                ],
                [
                    0,
                    "&Fopf;"
                ],
                [
                    0,
                    "&Gopf;"
                ],
                [
                    1,
                    "&Iopf;"
                ],
                [
                    0,
                    "&Jopf;"
                ],
                [
                    0,
                    "&Kopf;"
                ],
                [
                    0,
                    "&Lopf;"
                ],
                [
                    0,
                    "&Mopf;"
                ],
                [
                    1,
                    "&Oopf;"
                ],
                [
                    3,
                    "&Sopf;"
                ],
                [
                    0,
                    "&Topf;"
                ],
                [
                    0,
                    "&Uopf;"
                ],
                [
                    0,
                    "&Vopf;"
                ],
                [
                    0,
                    "&Wopf;"
                ],
                [
                    0,
                    "&Xopf;"
                ],
                [
                    0,
                    "&Yopf;"
                ],
                [
                    1,
                    "&aopf;"
                ],
                [
                    0,
                    "&bopf;"
                ],
                [
                    0,
                    "&copf;"
                ],
                [
                    0,
                    "&dopf;"
                ],
                [
                    0,
                    "&eopf;"
                ],
                [
                    0,
                    "&fopf;"
                ],
                [
                    0,
                    "&gopf;"
                ],
                [
                    0,
                    "&hopf;"
                ],
                [
                    0,
                    "&iopf;"
                ],
                [
                    0,
                    "&jopf;"
                ],
                [
                    0,
                    "&kopf;"
                ],
                [
                    0,
                    "&lopf;"
                ],
                [
                    0,
                    "&mopf;"
                ],
                [
                    0,
                    "&nopf;"
                ],
                [
                    0,
                    "&oopf;"
                ],
                [
                    0,
                    "&popf;"
                ],
                [
                    0,
                    "&qopf;"
                ],
                [
                    0,
                    "&ropf;"
                ],
                [
                    0,
                    "&sopf;"
                ],
                [
                    0,
                    "&topf;"
                ],
                [
                    0,
                    "&uopf;"
                ],
                [
                    0,
                    "&vopf;"
                ],
                [
                    0,
                    "&wopf;"
                ],
                [
                    0,
                    "&xopf;"
                ],
                [
                    0,
                    "&yopf;"
                ],
                [
                    0,
                    "&zopf;"
                ]
            ]))
        }
    ],
    [
        8906,
        "&fflig;"
    ],
    [
        0,
        "&filig;"
    ],
    [
        0,
        "&fllig;"
    ],
    [
        0,
        "&ffilig;"
    ],
    [
        0,
        "&ffllig;"
    ]
])); //# sourceMappingURL=encode-html.js.map


/***/ }),

/***/ 2951:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLAttribute = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.DecodingMode = exports.EntityDecoder = exports.encodeHTML5 = exports.encodeHTML4 = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.escapeText = exports.escapeAttribute = exports.escapeUTF8 = exports.escape = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = exports.EncodingMode = exports.EntityLevel = void 0;
var decode_js_1 = __webpack_require__(4188);
var encode_js_1 = __webpack_require__(9791);
var escape_js_1 = __webpack_require__(5476);
/** The level of entities to support. */ var EntityLevel;
(function(EntityLevel) {
    /** Support only XML entities. */ EntityLevel[EntityLevel["XML"] = 0] = "XML";
    /** Support HTML entities, which are a superset of XML entities. */ EntityLevel[EntityLevel["HTML"] = 1] = "HTML";
})(EntityLevel = exports.EntityLevel || (exports.EntityLevel = {}));
var EncodingMode;
(function(EncodingMode) {
    /**
     * The output is UTF-8 encoded. Only characters that need escaping within
     * XML will be escaped.
     */ EncodingMode[EncodingMode["UTF8"] = 0] = "UTF8";
    /**
     * The output consists only of ASCII characters. Characters that need
     * escaping within HTML, and characters that aren't ASCII characters will
     * be escaped.
     */ EncodingMode[EncodingMode["ASCII"] = 1] = "ASCII";
    /**
     * Encode all characters that have an equivalent entity, as well as all
     * characters that are not ASCII characters.
     */ EncodingMode[EncodingMode["Extensive"] = 2] = "Extensive";
    /**
     * Encode all characters that have to be escaped in HTML attributes,
     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
     */ EncodingMode[EncodingMode["Attribute"] = 3] = "Attribute";
    /**
     * Encode all characters that have to be escaped in HTML text,
     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
     */ EncodingMode[EncodingMode["Text"] = 4] = "Text";
})(EncodingMode = exports.EncodingMode || (exports.EncodingMode = {}));
/**
 * Decodes a string with entities.
 *
 * @param data String to decode.
 * @param options Decoding options.
 */ function decode(data, options) {
    if (options === void 0) {
        options = EntityLevel.XML;
    }
    var level = typeof options === "number" ? options : options.level;
    if (level === EntityLevel.HTML) {
        var mode = typeof options === "object" ? options.mode : undefined;
        return (0, decode_js_1.decodeHTML)(data, mode);
    }
    return (0, decode_js_1.decodeXML)(data);
}
exports.decode = decode;
/**
 * Decodes a string with entities. Does not allow missing trailing semicolons for entities.
 *
 * @param data String to decode.
 * @param options Decoding options.
 * @deprecated Use `decode` with the `mode` set to `Strict`.
 */ function decodeStrict(data, options) {
    var _a;
    if (options === void 0) {
        options = EntityLevel.XML;
    }
    var opts = typeof options === "number" ? {
        level: options
    } : options;
    (_a = opts.mode) !== null && _a !== void 0 ? _a : opts.mode = decode_js_1.DecodingMode.Strict;
    return decode(data, opts);
}
exports.decodeStrict = decodeStrict;
/**
 * Encodes a string with entities.
 *
 * @param data String to encode.
 * @param options Encoding options.
 */ function encode(data, options) {
    if (options === void 0) {
        options = EntityLevel.XML;
    }
    var opts = typeof options === "number" ? {
        level: options
    } : options;
    // Mode `UTF8` just escapes XML entities
    if (opts.mode === EncodingMode.UTF8) return (0, escape_js_1.escapeUTF8)(data);
    if (opts.mode === EncodingMode.Attribute) return (0, escape_js_1.escapeAttribute)(data);
    if (opts.mode === EncodingMode.Text) return (0, escape_js_1.escapeText)(data);
    if (opts.level === EntityLevel.HTML) {
        if (opts.mode === EncodingMode.ASCII) {
            return (0, encode_js_1.encodeNonAsciiHTML)(data);
        }
        return (0, encode_js_1.encodeHTML)(data);
    }
    // ASCII and Extensive are equivalent
    return (0, escape_js_1.encodeXML)(data);
}
exports.encode = encode;
var escape_js_2 = __webpack_require__(5476);
Object.defineProperty(exports, "encodeXML", ({
    enumerable: true,
    get: function() {
        return escape_js_2.encodeXML;
    }
}));
Object.defineProperty(exports, "escape", ({
    enumerable: true,
    get: function() {
        return escape_js_2.escape;
    }
}));
Object.defineProperty(exports, "escapeUTF8", ({
    enumerable: true,
    get: function() {
        return escape_js_2.escapeUTF8;
    }
}));
Object.defineProperty(exports, "escapeAttribute", ({
    enumerable: true,
    get: function() {
        return escape_js_2.escapeAttribute;
    }
}));
Object.defineProperty(exports, "escapeText", ({
    enumerable: true,
    get: function() {
        return escape_js_2.escapeText;
    }
}));
var encode_js_2 = __webpack_require__(9791);
Object.defineProperty(exports, "encodeHTML", ({
    enumerable: true,
    get: function() {
        return encode_js_2.encodeHTML;
    }
}));
Object.defineProperty(exports, "encodeNonAsciiHTML", ({
    enumerable: true,
    get: function() {
        return encode_js_2.encodeNonAsciiHTML;
    }
}));
// Legacy aliases (deprecated)
Object.defineProperty(exports, "encodeHTML4", ({
    enumerable: true,
    get: function() {
        return encode_js_2.encodeHTML;
    }
}));
Object.defineProperty(exports, "encodeHTML5", ({
    enumerable: true,
    get: function() {
        return encode_js_2.encodeHTML;
    }
}));
var decode_js_2 = __webpack_require__(4188);
Object.defineProperty(exports, "EntityDecoder", ({
    enumerable: true,
    get: function() {
        return decode_js_2.EntityDecoder;
    }
}));
Object.defineProperty(exports, "DecodingMode", ({
    enumerable: true,
    get: function() {
        return decode_js_2.DecodingMode;
    }
}));
Object.defineProperty(exports, "decodeXML", ({
    enumerable: true,
    get: function() {
        return decode_js_2.decodeXML;
    }
}));
Object.defineProperty(exports, "decodeHTML", ({
    enumerable: true,
    get: function() {
        return decode_js_2.decodeHTML;
    }
}));
Object.defineProperty(exports, "decodeHTMLStrict", ({
    enumerable: true,
    get: function() {
        return decode_js_2.decodeHTMLStrict;
    }
}));
Object.defineProperty(exports, "decodeHTMLAttribute", ({
    enumerable: true,
    get: function() {
        return decode_js_2.decodeHTMLAttribute;
    }
}));
// Legacy aliases (deprecated)
Object.defineProperty(exports, "decodeHTML4", ({
    enumerable: true,
    get: function() {
        return decode_js_2.decodeHTML;
    }
}));
Object.defineProperty(exports, "decodeHTML5", ({
    enumerable: true,
    get: function() {
        return decode_js_2.decodeHTML;
    }
}));
Object.defineProperty(exports, "decodeHTML4Strict", ({
    enumerable: true,
    get: function() {
        return decode_js_2.decodeHTMLStrict;
    }
}));
Object.defineProperty(exports, "decodeHTML5Strict", ({
    enumerable: true,
    get: function() {
        return decode_js_2.decodeHTMLStrict;
    }
}));
Object.defineProperty(exports, "decodeXMLStrict", ({
    enumerable: true,
    get: function() {
        return decode_js_2.decodeXML;
    }
})); //# sourceMappingURL=index.js.map


/***/ }),

/***/ 4683:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var isObject = __webpack_require__(215);
module.exports = function extend(o /*, objects*/ ) {
    if (!isObject(o)) {
        o = {};
    }
    var len = arguments.length;
    for(var i = 1; i < len; i++){
        var obj = arguments[i];
        if (isObject(obj)) {
            assign(o, obj);
        }
    }
    return o;
};
function assign(a, b) {
    for(var key in b){
        if (hasOwn(b, key)) {
            a[key] = b[key];
        }
    }
}
/**
 * Returns true if the given `key` is an own property of `obj`.
 */ function hasOwn(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}


/***/ }),

/***/ 170:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var debug;
module.exports = function() {
    if (!debug) {
        try {
            /* eslint global-require: off */ debug = __webpack_require__(7263)("follow-redirects");
        } catch (error) {}
        if (typeof debug !== "function") {
            debug = function() {};
        }
    }
    debug.apply(null, arguments);
};


/***/ }),

/***/ 1191:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var url = __webpack_require__(7310);
var URL = url.URL;
var http = __webpack_require__(3685);
var https = __webpack_require__(5687);
var Writable = (__webpack_require__(2781).Writable);
var assert = __webpack_require__(9491);
var debug = __webpack_require__(170);
// Create handlers that pass events from native requests
var events = [
    "abort",
    "aborted",
    "connect",
    "error",
    "socket",
    "timeout"
];
var eventHandlers = Object.create(null);
events.forEach(function(event) {
    eventHandlers[event] = function(arg1, arg2, arg3) {
        this._redirectable.emit(event, arg1, arg2, arg3);
    };
});
var InvalidUrlError = createErrorType("ERR_INVALID_URL", "Invalid URL", TypeError);
// Error types with codes
var RedirectionError = createErrorType("ERR_FR_REDIRECTION_FAILURE", "Redirected request failed");
var TooManyRedirectsError = createErrorType("ERR_FR_TOO_MANY_REDIRECTS", "Maximum number of redirects exceeded");
var MaxBodyLengthExceededError = createErrorType("ERR_FR_MAX_BODY_LENGTH_EXCEEDED", "Request body larger than maxBodyLength limit");
var WriteAfterEndError = createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
// An HTTP(S) request that can be redirected
function RedirectableRequest(options, responseCallback) {
    // Initialize the request
    Writable.call(this);
    this._sanitizeOptions(options);
    this._options = options;
    this._ended = false;
    this._ending = false;
    this._redirectCount = 0;
    this._redirects = [];
    this._requestBodyLength = 0;
    this._requestBodyBuffers = [];
    // Attach a callback if passed
    if (responseCallback) {
        this.on("response", responseCallback);
    }
    // React to responses of native requests
    var self = this;
    this._onNativeResponse = function(response) {
        self._processResponse(response);
    };
    // Perform the first request
    this._performRequest();
}
RedirectableRequest.prototype = Object.create(Writable.prototype);
RedirectableRequest.prototype.abort = function() {
    abortRequest(this._currentRequest);
    this.emit("abort");
};
// Writes buffered data to the current native request
RedirectableRequest.prototype.write = function(data, encoding, callback) {
    // Writing is not allowed if end has been called
    if (this._ending) {
        throw new WriteAfterEndError();
    }
    // Validate input and shift parameters if necessary
    if (!isString(data) && !isBuffer(data)) {
        throw new TypeError("data should be a string, Buffer or Uint8Array");
    }
    if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
    }
    // Ignore empty buffers, since writing them doesn't invoke the callback
    // https://github.com/nodejs/node/issues/22066
    if (data.length === 0) {
        if (callback) {
            callback();
        }
        return;
    }
    // Only write when we don't exceed the maximum body length
    if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
        this._requestBodyLength += data.length;
        this._requestBodyBuffers.push({
            data: data,
            encoding: encoding
        });
        this._currentRequest.write(data, encoding, callback);
    } else {
        this.emit("error", new MaxBodyLengthExceededError());
        this.abort();
    }
};
// Ends the current native request
RedirectableRequest.prototype.end = function(data, encoding, callback) {
    // Shift parameters if necessary
    if (isFunction(data)) {
        callback = data;
        data = encoding = null;
    } else if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
    }
    // Write data if needed and end
    if (!data) {
        this._ended = this._ending = true;
        this._currentRequest.end(null, null, callback);
    } else {
        var self = this;
        var currentRequest = this._currentRequest;
        this.write(data, encoding, function() {
            self._ended = true;
            currentRequest.end(null, null, callback);
        });
        this._ending = true;
    }
};
// Sets a header value on the current native request
RedirectableRequest.prototype.setHeader = function(name, value) {
    this._options.headers[name] = value;
    this._currentRequest.setHeader(name, value);
};
// Clears a header value on the current native request
RedirectableRequest.prototype.removeHeader = function(name) {
    delete this._options.headers[name];
    this._currentRequest.removeHeader(name);
};
// Global timeout for all underlying requests
RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
    var self = this;
    // Destroys the socket on timeout
    function destroyOnTimeout(socket) {
        socket.setTimeout(msecs);
        socket.removeListener("timeout", socket.destroy);
        socket.addListener("timeout", socket.destroy);
    }
    // Sets up a timer to trigger a timeout event
    function startTimer(socket) {
        if (self._timeout) {
            clearTimeout(self._timeout);
        }
        self._timeout = setTimeout(function() {
            self.emit("timeout");
            clearTimer();
        }, msecs);
        destroyOnTimeout(socket);
    }
    // Stops a timeout from triggering
    function clearTimer() {
        // Clear the timeout
        if (self._timeout) {
            clearTimeout(self._timeout);
            self._timeout = null;
        }
        // Clean up all attached listeners
        self.removeListener("abort", clearTimer);
        self.removeListener("error", clearTimer);
        self.removeListener("response", clearTimer);
        if (callback) {
            self.removeListener("timeout", callback);
        }
        if (!self.socket) {
            self._currentRequest.removeListener("socket", startTimer);
        }
    }
    // Attach callback if passed
    if (callback) {
        this.on("timeout", callback);
    }
    // Start the timer if or when the socket is opened
    if (this.socket) {
        startTimer(this.socket);
    } else {
        this._currentRequest.once("socket", startTimer);
    }
    // Clean up on events
    this.on("socket", destroyOnTimeout);
    this.on("abort", clearTimer);
    this.on("error", clearTimer);
    this.on("response", clearTimer);
    return this;
};
// Proxy all other public ClientRequest methods
[
    "flushHeaders",
    "getHeader",
    "setNoDelay",
    "setSocketKeepAlive"
].forEach(function(method) {
    RedirectableRequest.prototype[method] = function(a, b) {
        return this._currentRequest[method](a, b);
    };
});
// Proxy all public ClientRequest properties
[
    "aborted",
    "connection",
    "socket"
].forEach(function(property) {
    Object.defineProperty(RedirectableRequest.prototype, property, {
        get: function() {
            return this._currentRequest[property];
        }
    });
});
RedirectableRequest.prototype._sanitizeOptions = function(options) {
    // Ensure headers are always present
    if (!options.headers) {
        options.headers = {};
    }
    // Since http.request treats host as an alias of hostname,
    // but the url module interprets host as hostname plus port,
    // eliminate the host property to avoid confusion.
    if (options.host) {
        // Use hostname if set, because it has precedence
        if (!options.hostname) {
            options.hostname = options.host;
        }
        delete options.host;
    }
    // Complete the URL object when necessary
    if (!options.pathname && options.path) {
        var searchPos = options.path.indexOf("?");
        if (searchPos < 0) {
            options.pathname = options.path;
        } else {
            options.pathname = options.path.substring(0, searchPos);
            options.search = options.path.substring(searchPos);
        }
    }
};
// Executes the next native request (initial or redirect)
RedirectableRequest.prototype._performRequest = function() {
    // Load the native protocol
    var protocol = this._options.protocol;
    var nativeProtocol = this._options.nativeProtocols[protocol];
    if (!nativeProtocol) {
        this.emit("error", new TypeError("Unsupported protocol " + protocol));
        return;
    }
    // If specified, use the agent corresponding to the protocol
    // (HTTP and HTTPS use different types of agents)
    if (this._options.agents) {
        var scheme = protocol.slice(0, -1);
        this._options.agent = this._options.agents[scheme];
    }
    // Create the native request and set up its event handlers
    var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
    request._redirectable = this;
    for (var event of events){
        request.on(event, eventHandlers[event]);
    }
    // RFC7230§5.3.1: When making a request directly to an origin server, […]
    // a client MUST send only the absolute path […] as the request-target.
    this._currentUrl = /^\//.test(this._options.path) ? url.format(this._options) : // When making a request to a proxy, […]
    // a client MUST send the target URI in absolute-form […].
    this._options.path;
    // End a redirected request
    // (The first request must be ended explicitly with RedirectableRequest#end)
    if (this._isRedirect) {
        // Write the request entity and end
        var i = 0;
        var self = this;
        var buffers = this._requestBodyBuffers;
        (function writeNext(error) {
            // Only write if this request has not been redirected yet
            /* istanbul ignore else */ if (request === self._currentRequest) {
                // Report any write errors
                /* istanbul ignore if */ if (error) {
                    self.emit("error", error);
                } else if (i < buffers.length) {
                    var buffer = buffers[i++];
                    /* istanbul ignore else */ if (!request.finished) {
                        request.write(buffer.data, buffer.encoding, writeNext);
                    }
                } else if (self._ended) {
                    request.end();
                }
            }
        })();
    }
};
// Processes a response from the current native request
RedirectableRequest.prototype._processResponse = function(response) {
    // Store the redirected response
    var statusCode = response.statusCode;
    if (this._options.trackRedirects) {
        this._redirects.push({
            url: this._currentUrl,
            headers: response.headers,
            statusCode: statusCode
        });
    }
    // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
    // that further action needs to be taken by the user agent in order to
    // fulfill the request. If a Location header field is provided,
    // the user agent MAY automatically redirect its request to the URI
    // referenced by the Location field value,
    // even if the specific status code is not understood.
    // If the response is not a redirect; return it as-is
    var location = response.headers.location;
    if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
        response.responseUrl = this._currentUrl;
        response.redirects = this._redirects;
        this.emit("response", response);
        // Clean up
        this._requestBodyBuffers = [];
        return;
    }
    // The response is a redirect, so abort the current request
    abortRequest(this._currentRequest);
    // Discard the remainder of the response to avoid waiting for data
    response.destroy();
    // RFC7231§6.4: A client SHOULD detect and intervene
    // in cyclical redirections (i.e., "infinite" redirection loops).
    if (++this._redirectCount > this._options.maxRedirects) {
        this.emit("error", new TooManyRedirectsError());
        return;
    }
    // Store the request headers if applicable
    var requestHeaders;
    var beforeRedirect = this._options.beforeRedirect;
    if (beforeRedirect) {
        requestHeaders = Object.assign({
            // The Host header was set by nativeProtocol.request
            Host: response.req.getHeader("host")
        }, this._options.headers);
    }
    // RFC7231§6.4: Automatic redirection needs to done with
    // care for methods not known to be safe, […]
    // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
    // the request method from POST to GET for the subsequent request.
    var method = this._options.method;
    if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || // RFC7231§6.4.4: The 303 (See Other) status code indicates that
    // the server is redirecting the user agent to a different resource […]
    // A user agent can perform a retrieval request targeting that URI
    // (a GET or HEAD request if using HTTP) […]
    statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
        this._options.method = "GET";
        // Drop a possible entity and headers related to it
        this._requestBodyBuffers = [];
        removeMatchingHeaders(/^content-/i, this._options.headers);
    }
    // Drop the Host header, as the redirect might lead to a different host
    var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
    // If the redirect is relative, carry over the host of the last request
    var currentUrlParts = url.parse(this._currentUrl);
    var currentHost = currentHostHeader || currentUrlParts.host;
    var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, {
        host: currentHost
    }));
    // Determine the URL of the redirection
    var redirectUrl;
    try {
        redirectUrl = url.resolve(currentUrl, location);
    } catch (cause) {
        this.emit("error", new RedirectionError({
            cause: cause
        }));
        return;
    }
    // Create the redirected request
    debug("redirecting to", redirectUrl);
    this._isRedirect = true;
    var redirectUrlParts = url.parse(redirectUrl);
    Object.assign(this._options, redirectUrlParts);
    // Drop confidential headers when redirecting to a less secure protocol
    // or to a different domain that is not a superdomain
    if (redirectUrlParts.protocol !== currentUrlParts.protocol && redirectUrlParts.protocol !== "https:" || redirectUrlParts.host !== currentHost && !isSubdomain(redirectUrlParts.host, currentHost)) {
        removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
    }
    // Evaluate the beforeRedirect callback
    if (isFunction(beforeRedirect)) {
        var responseDetails = {
            headers: response.headers,
            statusCode: statusCode
        };
        var requestDetails = {
            url: currentUrl,
            method: method,
            headers: requestHeaders
        };
        try {
            beforeRedirect(this._options, responseDetails, requestDetails);
        } catch (err) {
            this.emit("error", err);
            return;
        }
        this._sanitizeOptions(this._options);
    }
    // Perform the redirected request
    try {
        this._performRequest();
    } catch (cause) {
        this.emit("error", new RedirectionError({
            cause: cause
        }));
    }
};
// Wraps the key/value object of protocols with redirect functionality
function wrap(protocols) {
    // Default settings
    var exports = {
        maxRedirects: 21,
        maxBodyLength: 10 * 1024 * 1024
    };
    // Wrap each protocol
    var nativeProtocols = {};
    Object.keys(protocols).forEach(function(scheme) {
        var protocol = scheme + ":";
        var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
        var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);
        // Executes a request, following redirects
        function request(input, options, callback) {
            // Parse parameters
            if (isString(input)) {
                var parsed;
                try {
                    parsed = urlToOptions(new URL(input));
                } catch (err) {
                    /* istanbul ignore next */ parsed = url.parse(input);
                }
                if (!isString(parsed.protocol)) {
                    throw new InvalidUrlError({
                        input
                    });
                }
                input = parsed;
            } else if (URL && input instanceof URL) {
                input = urlToOptions(input);
            } else {
                callback = options;
                options = input;
                input = {
                    protocol: protocol
                };
            }
            if (isFunction(options)) {
                callback = options;
                options = null;
            }
            // Set defaults
            options = Object.assign({
                maxRedirects: exports.maxRedirects,
                maxBodyLength: exports.maxBodyLength
            }, input, options);
            options.nativeProtocols = nativeProtocols;
            if (!isString(options.host) && !isString(options.hostname)) {
                options.hostname = "::1";
            }
            assert.equal(options.protocol, protocol, "protocol mismatch");
            debug("options", options);
            return new RedirectableRequest(options, callback);
        }
        // Executes a GET request, following redirects
        function get(input, options, callback) {
            var wrappedRequest = wrappedProtocol.request(input, options, callback);
            wrappedRequest.end();
            return wrappedRequest;
        }
        // Expose the properties on the wrapped protocol
        Object.defineProperties(wrappedProtocol, {
            request: {
                value: request,
                configurable: true,
                enumerable: true,
                writable: true
            },
            get: {
                value: get,
                configurable: true,
                enumerable: true,
                writable: true
            }
        });
    });
    return exports;
}
/* istanbul ignore next */ function noop() {}
// from https://github.com/nodejs/node/blob/master/lib/internal/url.js
function urlToOptions(urlObject) {
    var options = {
        protocol: urlObject.protocol,
        hostname: urlObject.hostname.startsWith("[") ? /* istanbul ignore next */ urlObject.hostname.slice(1, -1) : urlObject.hostname,
        hash: urlObject.hash,
        search: urlObject.search,
        pathname: urlObject.pathname,
        path: urlObject.pathname + urlObject.search,
        href: urlObject.href
    };
    if (urlObject.port !== "") {
        options.port = Number(urlObject.port);
    }
    return options;
}
function removeMatchingHeaders(regex, headers) {
    var lastValue;
    for(var header in headers){
        if (regex.test(header)) {
            lastValue = headers[header];
            delete headers[header];
        }
    }
    return lastValue === null || typeof lastValue === "undefined" ? undefined : String(lastValue).trim();
}
function createErrorType(code, message, baseClass) {
    // Create constructor
    function CustomError(properties) {
        Error.captureStackTrace(this, this.constructor);
        Object.assign(this, properties || {});
        this.code = code;
        this.message = this.cause ? message + ": " + this.cause.message : message;
    }
    // Attach constructor and set default properties
    CustomError.prototype = new (baseClass || Error)();
    CustomError.prototype.constructor = CustomError;
    CustomError.prototype.name = "Error [" + code + "]";
    return CustomError;
}
function abortRequest(request) {
    for (var event of events){
        request.removeListener(event, eventHandlers[event]);
    }
    request.on("error", noop);
    request.abort();
}
function isSubdomain(subdomain, domain) {
    assert(isString(subdomain) && isString(domain));
    var dot = subdomain.length - domain.length - 1;
    return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
}
function isString(value) {
    return typeof value === "string" || value instanceof String;
}
function isFunction(value) {
    return typeof value === "function";
}
function isBuffer(value) {
    return typeof value === "object" && "length" in value;
}
// Exports
module.exports = wrap({
    http: http,
    https: https
});
module.exports.wrap = wrap;


/***/ }),

/***/ 1549:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var CombinedStream = __webpack_require__(7989);
var util = __webpack_require__(3837);
var path = __webpack_require__(1017);
var http = __webpack_require__(3685);
var https = __webpack_require__(5687);
var parseUrl = (__webpack_require__(7310).parse);
var fs = __webpack_require__(7147);
var Stream = (__webpack_require__(2781).Stream);
var mime = __webpack_require__(8156);
var asynckit = __webpack_require__(2460);
var populate = __webpack_require__(6511);
// Public API
module.exports = FormData;
// make it a Stream
util.inherits(FormData, CombinedStream);
/**
 * Create readable "multipart/form-data" streams.
 * Can be used to submit forms
 * and file uploads to other web applications.
 *
 * @constructor
 * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
 */ function FormData(options) {
    if (!(this instanceof FormData)) {
        return new FormData(options);
    }
    this._overheadLength = 0;
    this._valueLength = 0;
    this._valuesToMeasure = [];
    CombinedStream.call(this);
    options = options || {};
    for(var option in options){
        this[option] = options[option];
    }
}
FormData.LINE_BREAK = "\r\n";
FormData.DEFAULT_CONTENT_TYPE = "application/octet-stream";
FormData.prototype.append = function(field, value, options) {
    options = options || {};
    // allow filename as single option
    if (typeof options == "string") {
        options = {
            filename: options
        };
    }
    var append = CombinedStream.prototype.append.bind(this);
    // all that streamy business can't handle numbers
    if (typeof value == "number") {
        value = "" + value;
    }
    // https://github.com/felixge/node-form-data/issues/38
    if (util.isArray(value)) {
        // Please convert your array into string
        // the way web server expects it
        this._error(new Error("Arrays are not supported."));
        return;
    }
    var header = this._multiPartHeader(field, value, options);
    var footer = this._multiPartFooter();
    append(header);
    append(value);
    append(footer);
    // pass along options.knownLength
    this._trackLength(header, value, options);
};
FormData.prototype._trackLength = function(header, value, options) {
    var valueLength = 0;
    // used w/ getLengthSync(), when length is known.
    // e.g. for streaming directly from a remote server,
    // w/ a known file a size, and not wanting to wait for
    // incoming file to finish to get its size.
    if (options.knownLength != null) {
        valueLength += +options.knownLength;
    } else if (Buffer.isBuffer(value)) {
        valueLength = value.length;
    } else if (typeof value === "string") {
        valueLength = Buffer.byteLength(value);
    }
    this._valueLength += valueLength;
    // @check why add CRLF? does this account for custom/multiple CRLFs?
    this._overheadLength += Buffer.byteLength(header) + FormData.LINE_BREAK.length;
    // empty or either doesn't have path or not an http response or not a stream
    if (!value || !value.path && !(value.readable && value.hasOwnProperty("httpVersion")) && !(value instanceof Stream)) {
        return;
    }
    // no need to bother with the length
    if (!options.knownLength) {
        this._valuesToMeasure.push(value);
    }
};
FormData.prototype._lengthRetriever = function(value, callback) {
    if (value.hasOwnProperty("fd")) {
        // take read range into a account
        // `end` = Infinity –> read file till the end
        //
        // TODO: Looks like there is bug in Node fs.createReadStream
        // it doesn't respect `end` options without `start` options
        // Fix it when node fixes it.
        // https://github.com/joyent/node/issues/7819
        if (value.end != undefined && value.end != Infinity && value.start != undefined) {
            // when end specified
            // no need to calculate range
            // inclusive, starts with 0
            callback(null, value.end + 1 - (value.start ? value.start : 0));
        // not that fast snoopy
        } else {
            // still need to fetch file size from fs
            fs.stat(value.path, function(err, stat) {
                var fileSize;
                if (err) {
                    callback(err);
                    return;
                }
                // update final size based on the range options
                fileSize = stat.size - (value.start ? value.start : 0);
                callback(null, fileSize);
            });
        }
    // or http response
    } else if (value.hasOwnProperty("httpVersion")) {
        callback(null, +value.headers["content-length"]);
    // or request stream http://github.com/mikeal/request
    } else if (value.hasOwnProperty("httpModule")) {
        // wait till response come back
        value.on("response", function(response) {
            value.pause();
            callback(null, +response.headers["content-length"]);
        });
        value.resume();
    // something else
    } else {
        callback("Unknown stream");
    }
};
FormData.prototype._multiPartHeader = function(field, value, options) {
    // custom header specified (as string)?
    // it becomes responsible for boundary
    // (e.g. to handle extra CRLFs on .NET servers)
    if (typeof options.header == "string") {
        return options.header;
    }
    var contentDisposition = this._getContentDisposition(value, options);
    var contentType = this._getContentType(value, options);
    var contents = "";
    var headers = {
        // add custom disposition as third element or keep it two elements if not
        "Content-Disposition": [
            "form-data",
            'name="' + field + '"'
        ].concat(contentDisposition || []),
        // if no content type. allow it to be empty array
        "Content-Type": [].concat(contentType || [])
    };
    // allow custom headers.
    if (typeof options.header == "object") {
        populate(headers, options.header);
    }
    var header;
    for(var prop in headers){
        if (!headers.hasOwnProperty(prop)) continue;
        header = headers[prop];
        // skip nullish headers.
        if (header == null) {
            continue;
        }
        // convert all headers to arrays.
        if (!Array.isArray(header)) {
            header = [
                header
            ];
        }
        // add non-empty headers.
        if (header.length) {
            contents += prop + ": " + header.join("; ") + FormData.LINE_BREAK;
        }
    }
    return "--" + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
};
FormData.prototype._getContentDisposition = function(value, options) {
    var filename, contentDisposition;
    if (typeof options.filepath === "string") {
        // custom filepath for relative paths
        filename = path.normalize(options.filepath).replace(/\\/g, "/");
    } else if (options.filename || value.name || value.path) {
        // custom filename take precedence
        // formidable and the browser add a name property
        // fs- and request- streams have path property
        filename = path.basename(options.filename || value.name || value.path);
    } else if (value.readable && value.hasOwnProperty("httpVersion")) {
        // or try http response
        filename = path.basename(value.client._httpMessage.path || "");
    }
    if (filename) {
        contentDisposition = 'filename="' + filename + '"';
    }
    return contentDisposition;
};
FormData.prototype._getContentType = function(value, options) {
    // use custom content-type above all
    var contentType = options.contentType;
    // or try `name` from formidable, browser
    if (!contentType && value.name) {
        contentType = mime.lookup(value.name);
    }
    // or try `path` from fs-, request- streams
    if (!contentType && value.path) {
        contentType = mime.lookup(value.path);
    }
    // or if it's http-reponse
    if (!contentType && value.readable && value.hasOwnProperty("httpVersion")) {
        contentType = value.headers["content-type"];
    }
    // or guess it from the filepath or filename
    if (!contentType && (options.filepath || options.filename)) {
        contentType = mime.lookup(options.filepath || options.filename);
    }
    // fallback to the default content type if `value` is not simple value
    if (!contentType && typeof value == "object") {
        contentType = FormData.DEFAULT_CONTENT_TYPE;
    }
    return contentType;
};
FormData.prototype._multiPartFooter = function() {
    return (function(next) {
        var footer = FormData.LINE_BREAK;
        var lastPart = this._streams.length === 0;
        if (lastPart) {
            footer += this._lastBoundary();
        }
        next(footer);
    }).bind(this);
};
FormData.prototype._lastBoundary = function() {
    return "--" + this.getBoundary() + "--" + FormData.LINE_BREAK;
};
FormData.prototype.getHeaders = function(userHeaders) {
    var header;
    var formHeaders = {
        "content-type": "multipart/form-data; boundary=" + this.getBoundary()
    };
    for(header in userHeaders){
        if (userHeaders.hasOwnProperty(header)) {
            formHeaders[header.toLowerCase()] = userHeaders[header];
        }
    }
    return formHeaders;
};
FormData.prototype.setBoundary = function(boundary) {
    this._boundary = boundary;
};
FormData.prototype.getBoundary = function() {
    if (!this._boundary) {
        this._generateBoundary();
    }
    return this._boundary;
};
FormData.prototype.getBuffer = function() {
    var dataBuffer = new Buffer.alloc(0);
    var boundary = this.getBoundary();
    // Create the form content. Add Line breaks to the end of data.
    for(var i = 0, len = this._streams.length; i < len; i++){
        if (typeof this._streams[i] !== "function") {
            // Add content to the buffer.
            if (Buffer.isBuffer(this._streams[i])) {
                dataBuffer = Buffer.concat([
                    dataBuffer,
                    this._streams[i]
                ]);
            } else {
                dataBuffer = Buffer.concat([
                    dataBuffer,
                    Buffer.from(this._streams[i])
                ]);
            }
            // Add break after content.
            if (typeof this._streams[i] !== "string" || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
                dataBuffer = Buffer.concat([
                    dataBuffer,
                    Buffer.from(FormData.LINE_BREAK)
                ]);
            }
        }
    }
    // Add the footer and return the Buffer object.
    return Buffer.concat([
        dataBuffer,
        Buffer.from(this._lastBoundary())
    ]);
};
FormData.prototype._generateBoundary = function() {
    // This generates a 50 character boundary similar to those used by Firefox.
    // They are optimized for boyer-moore parsing.
    var boundary = "--------------------------";
    for(var i = 0; i < 24; i++){
        boundary += Math.floor(Math.random() * 10).toString(16);
    }
    this._boundary = boundary;
};
// Note: getLengthSync DOESN'T calculate streams length
// As workaround one can calculate file size manually
// and add it as knownLength option
FormData.prototype.getLengthSync = function() {
    var knownLength = this._overheadLength + this._valueLength;
    // Don't get confused, there are 3 "internal" streams for each keyval pair
    // so it basically checks if there is any value added to the form
    if (this._streams.length) {
        knownLength += this._lastBoundary().length;
    }
    // https://github.com/form-data/form-data/issues/40
    if (!this.hasKnownLength()) {
        // Some async length retrievers are present
        // therefore synchronous length calculation is false.
        // Please use getLength(callback) to get proper length
        this._error(new Error("Cannot calculate proper length in synchronous way."));
    }
    return knownLength;
};
// Public API to check if length of added values is known
// https://github.com/form-data/form-data/issues/196
// https://github.com/form-data/form-data/issues/262
FormData.prototype.hasKnownLength = function() {
    var hasKnownLength = true;
    if (this._valuesToMeasure.length) {
        hasKnownLength = false;
    }
    return hasKnownLength;
};
FormData.prototype.getLength = function(cb) {
    var knownLength = this._overheadLength + this._valueLength;
    if (this._streams.length) {
        knownLength += this._lastBoundary().length;
    }
    if (!this._valuesToMeasure.length) {
        process.nextTick(cb.bind(this, null, knownLength));
        return;
    }
    asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
        if (err) {
            cb(err);
            return;
        }
        values.forEach(function(length) {
            knownLength += length;
        });
        cb(null, knownLength);
    });
};
FormData.prototype.submit = function(params, cb) {
    var request, options, defaults = {
        method: "post"
    };
    // parse provided url if it's string
    // or treat it as options object
    if (typeof params == "string") {
        params = parseUrl(params);
        options = populate({
            port: params.port,
            path: params.pathname,
            host: params.hostname,
            protocol: params.protocol
        }, defaults);
    // use custom params
    } else {
        options = populate(params, defaults);
        // if no port provided use default one
        if (!options.port) {
            options.port = options.protocol == "https:" ? 443 : 80;
        }
    }
    // put that good code in getHeaders to some use
    options.headers = this.getHeaders(params.headers);
    // https if specified, fallback to http in any other case
    if (options.protocol == "https:") {
        request = https.request(options);
    } else {
        request = http.request(options);
    }
    // get content length and fire away
    this.getLength((function(err, length) {
        if (err && err !== "Unknown stream") {
            this._error(err);
            return;
        }
        // add content length
        if (length) {
            request.setHeader("Content-Length", length);
        }
        this.pipe(request);
        if (cb) {
            var onResponse;
            var callback = function(error, responce) {
                request.removeListener("error", callback);
                request.removeListener("response", onResponse);
                return cb.call(this, error, responce);
            };
            onResponse = callback.bind(this, null);
            request.on("error", callback);
            request.on("response", onResponse);
        }
    }).bind(this));
    return request;
};
FormData.prototype._error = function(err) {
    if (!this.error) {
        this.error = err;
        this.pause();
        this.emit("error", err);
    }
};
FormData.prototype.toString = function() {
    return "[object FormData]";
};


/***/ }),

/***/ 6511:
/***/ ((module) => {

// populates missing values

module.exports = function(dst, src) {
    Object.keys(src).forEach(function(prop) {
        dst[prop] = dst[prop] || src[prop];
    });
    return dst;
};


/***/ }),

/***/ 2773:
/***/ ((module) => {


module.exports = (flag, argv = process.argv)=>{
    const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
    const position = argv.indexOf(prefix + flag);
    const terminatorPosition = argv.indexOf("--");
    return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
};


/***/ }),

/***/ 241:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = (void 0) && (void 0).__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Parser = void 0;
var Tokenizer_js_1 = __importStar(__webpack_require__(5199));
var decode_js_1 = __webpack_require__(4188);
var formTags = new Set([
    "input",
    "option",
    "optgroup",
    "select",
    "button",
    "datalist",
    "textarea"
]);
var pTag = new Set([
    "p"
]);
var tableSectionTags = new Set([
    "thead",
    "tbody"
]);
var ddtTags = new Set([
    "dd",
    "dt"
]);
var rtpTags = new Set([
    "rt",
    "rp"
]);
var openImpliesClose = new Map([
    [
        "tr",
        new Set([
            "tr",
            "th",
            "td"
        ])
    ],
    [
        "th",
        new Set([
            "th"
        ])
    ],
    [
        "td",
        new Set([
            "thead",
            "th",
            "td"
        ])
    ],
    [
        "body",
        new Set([
            "head",
            "link",
            "script"
        ])
    ],
    [
        "li",
        new Set([
            "li"
        ])
    ],
    [
        "p",
        pTag
    ],
    [
        "h1",
        pTag
    ],
    [
        "h2",
        pTag
    ],
    [
        "h3",
        pTag
    ],
    [
        "h4",
        pTag
    ],
    [
        "h5",
        pTag
    ],
    [
        "h6",
        pTag
    ],
    [
        "select",
        formTags
    ],
    [
        "input",
        formTags
    ],
    [
        "output",
        formTags
    ],
    [
        "button",
        formTags
    ],
    [
        "datalist",
        formTags
    ],
    [
        "textarea",
        formTags
    ],
    [
        "option",
        new Set([
            "option"
        ])
    ],
    [
        "optgroup",
        new Set([
            "optgroup",
            "option"
        ])
    ],
    [
        "dd",
        ddtTags
    ],
    [
        "dt",
        ddtTags
    ],
    [
        "address",
        pTag
    ],
    [
        "article",
        pTag
    ],
    [
        "aside",
        pTag
    ],
    [
        "blockquote",
        pTag
    ],
    [
        "details",
        pTag
    ],
    [
        "div",
        pTag
    ],
    [
        "dl",
        pTag
    ],
    [
        "fieldset",
        pTag
    ],
    [
        "figcaption",
        pTag
    ],
    [
        "figure",
        pTag
    ],
    [
        "footer",
        pTag
    ],
    [
        "form",
        pTag
    ],
    [
        "header",
        pTag
    ],
    [
        "hr",
        pTag
    ],
    [
        "main",
        pTag
    ],
    [
        "nav",
        pTag
    ],
    [
        "ol",
        pTag
    ],
    [
        "pre",
        pTag
    ],
    [
        "section",
        pTag
    ],
    [
        "table",
        pTag
    ],
    [
        "ul",
        pTag
    ],
    [
        "rt",
        rtpTags
    ],
    [
        "rp",
        rtpTags
    ],
    [
        "tbody",
        tableSectionTags
    ],
    [
        "tfoot",
        tableSectionTags
    ]
]);
var voidElements = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
]);
var foreignContextElements = new Set([
    "math",
    "svg"
]);
var htmlIntegrationElements = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignobject",
    "desc",
    "title"
]);
var reNameEnd = /\s|\//;
var Parser = /** @class */ function() {
    function Parser(cbs, options) {
        if (options === void 0) {
            options = {};
        }
        var _a, _b, _c, _d, _e;
        this.options = options;
        /** The start index of the last event. */ this.startIndex = 0;
        /** The end index of the last event. */ this.endIndex = 0;
        /**
         * Store the start index of the current open tag,
         * so we can update the start index for attributes.
         */ this.openTagStart = 0;
        this.tagname = "";
        this.attribname = "";
        this.attribvalue = "";
        this.attribs = null;
        this.stack = [];
        this.foreignContext = [];
        this.buffers = [];
        this.bufferOffset = 0;
        /** The index of the last written buffer. Used when resuming after a `pause()`. */ this.writeIndex = 0;
        /** Indicates whether the parser has finished running / `.end` has been called. */ this.ended = false;
        this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
        this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;
        this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;
        this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_js_1.default)(this.options, this);
        (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);
    }
    // Tokenizer event handlers
    /** @internal */ Parser.prototype.ontext = function(start, endIndex) {
        var _a, _b;
        var data = this.getSlice(start, endIndex);
        this.endIndex = endIndex - 1;
        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);
        this.startIndex = endIndex;
    };
    /** @internal */ Parser.prototype.ontextentity = function(cp) {
        var _a, _b;
        /*
         * Entities can be emitted on the character, or directly after.
         * We use the section start here to get accurate indices.
         */ var index = this.tokenizer.getSectionStart();
        this.endIndex = index - 1;
        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, (0, decode_js_1.fromCodePoint)(cp));
        this.startIndex = index;
    };
    Parser.prototype.isVoidElement = function(name) {
        return !this.options.xmlMode && voidElements.has(name);
    };
    /** @internal */ Parser.prototype.onopentagname = function(start, endIndex) {
        this.endIndex = endIndex;
        var name = this.getSlice(start, endIndex);
        if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
        }
        this.emitOpenTag(name);
    };
    Parser.prototype.emitOpenTag = function(name) {
        var _a, _b, _c, _d;
        this.openTagStart = this.startIndex;
        this.tagname = name;
        var impliesClose = !this.options.xmlMode && openImpliesClose.get(name);
        if (impliesClose) {
            while(this.stack.length > 0 && impliesClose.has(this.stack[this.stack.length - 1])){
                var element = this.stack.pop();
                (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, element, true);
            }
        }
        if (!this.isVoidElement(name)) {
            this.stack.push(name);
            if (foreignContextElements.has(name)) {
                this.foreignContext.push(true);
            } else if (htmlIntegrationElements.has(name)) {
                this.foreignContext.push(false);
            }
        }
        (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, name);
        if (this.cbs.onopentag) this.attribs = {};
    };
    Parser.prototype.endOpenTag = function(isImplied) {
        var _a, _b;
        this.startIndex = this.openTagStart;
        if (this.attribs) {
            (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs, isImplied);
            this.attribs = null;
        }
        if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {
            this.cbs.onclosetag(this.tagname, true);
        }
        this.tagname = "";
    };
    /** @internal */ Parser.prototype.onopentagend = function(endIndex) {
        this.endIndex = endIndex;
        this.endOpenTag(false);
        // Set `startIndex` for next node
        this.startIndex = endIndex + 1;
    };
    /** @internal */ Parser.prototype.onclosetag = function(start, endIndex) {
        var _a, _b, _c, _d, _e, _f;
        this.endIndex = endIndex;
        var name = this.getSlice(start, endIndex);
        if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
        }
        if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {
            this.foreignContext.pop();
        }
        if (!this.isVoidElement(name)) {
            var pos = this.stack.lastIndexOf(name);
            if (pos !== -1) {
                if (this.cbs.onclosetag) {
                    var count = this.stack.length - pos;
                    while(count--){
                        // We know the stack has sufficient elements.
                        this.cbs.onclosetag(this.stack.pop(), count !== 0);
                    }
                } else this.stack.length = pos;
            } else if (!this.options.xmlMode && name === "p") {
                // Implicit open before close
                this.emitOpenTag("p");
                this.closeCurrentTag(true);
            }
        } else if (!this.options.xmlMode && name === "br") {
            // We can't use `emitOpenTag` for implicit open, as `br` would be implicitly closed.
            (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, "br");
            (_d = (_c = this.cbs).onopentag) === null || _d === void 0 ? void 0 : _d.call(_c, "br", {}, true);
            (_f = (_e = this.cbs).onclosetag) === null || _f === void 0 ? void 0 : _f.call(_e, "br", false);
        }
        // Set `startIndex` for next node
        this.startIndex = endIndex + 1;
    };
    /** @internal */ Parser.prototype.onselfclosingtag = function(endIndex) {
        this.endIndex = endIndex;
        if (this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1]) {
            this.closeCurrentTag(false);
            // Set `startIndex` for next node
            this.startIndex = endIndex + 1;
        } else {
            // Ignore the fact that the tag is self-closing.
            this.onopentagend(endIndex);
        }
    };
    Parser.prototype.closeCurrentTag = function(isOpenImplied) {
        var _a, _b;
        var name = this.tagname;
        this.endOpenTag(isOpenImplied);
        // Self-closing tags will be on the top of the stack
        if (this.stack[this.stack.length - 1] === name) {
            // If the opening tag isn't implied, the closing tag has to be implied.
            (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name, !isOpenImplied);
            this.stack.pop();
        }
    };
    /** @internal */ Parser.prototype.onattribname = function(start, endIndex) {
        this.startIndex = start;
        var name = this.getSlice(start, endIndex);
        this.attribname = this.lowerCaseAttributeNames ? name.toLowerCase() : name;
    };
    /** @internal */ Parser.prototype.onattribdata = function(start, endIndex) {
        this.attribvalue += this.getSlice(start, endIndex);
    };
    /** @internal */ Parser.prototype.onattribentity = function(cp) {
        this.attribvalue += (0, decode_js_1.fromCodePoint)(cp);
    };
    /** @internal */ Parser.prototype.onattribend = function(quote, endIndex) {
        var _a, _b;
        this.endIndex = endIndex;
        (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote === Tokenizer_js_1.QuoteType.Double ? '"' : quote === Tokenizer_js_1.QuoteType.Single ? "'" : quote === Tokenizer_js_1.QuoteType.NoValue ? undefined : null);
        if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
            this.attribs[this.attribname] = this.attribvalue;
        }
        this.attribvalue = "";
    };
    Parser.prototype.getInstructionName = function(value) {
        var index = value.search(reNameEnd);
        var name = index < 0 ? value : value.substr(0, index);
        if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
        }
        return name;
    };
    /** @internal */ Parser.prototype.ondeclaration = function(start, endIndex) {
        this.endIndex = endIndex;
        var value = this.getSlice(start, endIndex);
        if (this.cbs.onprocessinginstruction) {
            var name = this.getInstructionName(value);
            this.cbs.onprocessinginstruction("!".concat(name), "!".concat(value));
        }
        // Set `startIndex` for next node
        this.startIndex = endIndex + 1;
    };
    /** @internal */ Parser.prototype.onprocessinginstruction = function(start, endIndex) {
        this.endIndex = endIndex;
        var value = this.getSlice(start, endIndex);
        if (this.cbs.onprocessinginstruction) {
            var name = this.getInstructionName(value);
            this.cbs.onprocessinginstruction("?".concat(name), "?".concat(value));
        }
        // Set `startIndex` for next node
        this.startIndex = endIndex + 1;
    };
    /** @internal */ Parser.prototype.oncomment = function(start, endIndex, offset) {
        var _a, _b, _c, _d;
        this.endIndex = endIndex;
        (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, this.getSlice(start, endIndex - offset));
        (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);
        // Set `startIndex` for next node
        this.startIndex = endIndex + 1;
    };
    /** @internal */ Parser.prototype.oncdata = function(start, endIndex, offset) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        this.endIndex = endIndex;
        var value = this.getSlice(start, endIndex - offset);
        if (this.options.xmlMode || this.options.recognizeCDATA) {
            (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);
            (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);
            (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);
        } else {
            (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, "[CDATA[".concat(value, "]]"));
            (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);
        }
        // Set `startIndex` for next node
        this.startIndex = endIndex + 1;
    };
    /** @internal */ Parser.prototype.onend = function() {
        var _a, _b;
        if (this.cbs.onclosetag) {
            // Set the end index for all remaining tags
            this.endIndex = this.startIndex;
            for(var index = this.stack.length; index > 0; this.cbs.onclosetag(this.stack[--index], true));
        }
        (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    /**
     * Resets the parser to a blank state, ready to parse a new HTML document
     */ Parser.prototype.reset = function() {
        var _a, _b, _c, _d;
        (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);
        this.tokenizer.reset();
        this.tagname = "";
        this.attribname = "";
        this.attribs = null;
        this.stack.length = 0;
        this.startIndex = 0;
        this.endIndex = 0;
        (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);
        this.buffers.length = 0;
        this.bufferOffset = 0;
        this.writeIndex = 0;
        this.ended = false;
    };
    /**
     * Resets the parser, then parses a complete document and
     * pushes it to the handler.
     *
     * @param data Document to parse.
     */ Parser.prototype.parseComplete = function(data) {
        this.reset();
        this.end(data);
    };
    Parser.prototype.getSlice = function(start, end) {
        while(start - this.bufferOffset >= this.buffers[0].length){
            this.shiftBuffer();
        }
        var slice = this.buffers[0].slice(start - this.bufferOffset, end - this.bufferOffset);
        while(end - this.bufferOffset > this.buffers[0].length){
            this.shiftBuffer();
            slice += this.buffers[0].slice(0, end - this.bufferOffset);
        }
        return slice;
    };
    Parser.prototype.shiftBuffer = function() {
        this.bufferOffset += this.buffers[0].length;
        this.writeIndex--;
        this.buffers.shift();
    };
    /**
     * Parses a chunk of data and calls the corresponding callbacks.
     *
     * @param chunk Chunk to parse.
     */ Parser.prototype.write = function(chunk) {
        var _a, _b;
        if (this.ended) {
            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(".write() after done!"));
            return;
        }
        this.buffers.push(chunk);
        if (this.tokenizer.running) {
            this.tokenizer.write(chunk);
            this.writeIndex++;
        }
    };
    /**
     * Parses the end of the buffer and clears the stack, calls onend.
     *
     * @param chunk Optional final chunk to parse.
     */ Parser.prototype.end = function(chunk) {
        var _a, _b;
        if (this.ended) {
            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(".end() after done!"));
            return;
        }
        if (chunk) this.write(chunk);
        this.ended = true;
        this.tokenizer.end();
    };
    /**
     * Pauses parsing. The parser won't emit events until `resume` is called.
     */ Parser.prototype.pause = function() {
        this.tokenizer.pause();
    };
    /**
     * Resumes parsing after `pause` was called.
     */ Parser.prototype.resume = function() {
        this.tokenizer.resume();
        while(this.tokenizer.running && this.writeIndex < this.buffers.length){
            this.tokenizer.write(this.buffers[this.writeIndex++]);
        }
        if (this.ended) this.tokenizer.end();
    };
    /**
     * Alias of `write`, for backwards compatibility.
     *
     * @param chunk Chunk to parse.
     * @deprecated
     */ Parser.prototype.parseChunk = function(chunk) {
        this.write(chunk);
    };
    /**
     * Alias of `end`, for backwards compatibility.
     *
     * @param chunk Optional final chunk to parse.
     * @deprecated
     */ Parser.prototype.done = function(chunk) {
        this.end(chunk);
    };
    return Parser;
}();
exports.Parser = Parser; //# sourceMappingURL=Parser.js.map


/***/ }),

/***/ 5199:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.QuoteType = void 0;
var decode_js_1 = __webpack_require__(4188);
var CharCodes;
(function(CharCodes) {
    CharCodes[CharCodes["Tab"] = 9] = "Tab";
    CharCodes[CharCodes["NewLine"] = 10] = "NewLine";
    CharCodes[CharCodes["FormFeed"] = 12] = "FormFeed";
    CharCodes[CharCodes["CarriageReturn"] = 13] = "CarriageReturn";
    CharCodes[CharCodes["Space"] = 32] = "Space";
    CharCodes[CharCodes["ExclamationMark"] = 33] = "ExclamationMark";
    CharCodes[CharCodes["Number"] = 35] = "Number";
    CharCodes[CharCodes["Amp"] = 38] = "Amp";
    CharCodes[CharCodes["SingleQuote"] = 39] = "SingleQuote";
    CharCodes[CharCodes["DoubleQuote"] = 34] = "DoubleQuote";
    CharCodes[CharCodes["Dash"] = 45] = "Dash";
    CharCodes[CharCodes["Slash"] = 47] = "Slash";
    CharCodes[CharCodes["Zero"] = 48] = "Zero";
    CharCodes[CharCodes["Nine"] = 57] = "Nine";
    CharCodes[CharCodes["Semi"] = 59] = "Semi";
    CharCodes[CharCodes["Lt"] = 60] = "Lt";
    CharCodes[CharCodes["Eq"] = 61] = "Eq";
    CharCodes[CharCodes["Gt"] = 62] = "Gt";
    CharCodes[CharCodes["Questionmark"] = 63] = "Questionmark";
    CharCodes[CharCodes["UpperA"] = 65] = "UpperA";
    CharCodes[CharCodes["LowerA"] = 97] = "LowerA";
    CharCodes[CharCodes["UpperF"] = 70] = "UpperF";
    CharCodes[CharCodes["LowerF"] = 102] = "LowerF";
    CharCodes[CharCodes["UpperZ"] = 90] = "UpperZ";
    CharCodes[CharCodes["LowerZ"] = 122] = "LowerZ";
    CharCodes[CharCodes["LowerX"] = 120] = "LowerX";
    CharCodes[CharCodes["OpeningSquareBracket"] = 91] = "OpeningSquareBracket";
})(CharCodes || (CharCodes = {}));
/** All the states the tokenizer can be in. */ var State;
(function(State) {
    State[State["Text"] = 1] = "Text";
    State[State["BeforeTagName"] = 2] = "BeforeTagName";
    State[State["InTagName"] = 3] = "InTagName";
    State[State["InSelfClosingTag"] = 4] = "InSelfClosingTag";
    State[State["BeforeClosingTagName"] = 5] = "BeforeClosingTagName";
    State[State["InClosingTagName"] = 6] = "InClosingTagName";
    State[State["AfterClosingTagName"] = 7] = "AfterClosingTagName";
    // Attributes
    State[State["BeforeAttributeName"] = 8] = "BeforeAttributeName";
    State[State["InAttributeName"] = 9] = "InAttributeName";
    State[State["AfterAttributeName"] = 10] = "AfterAttributeName";
    State[State["BeforeAttributeValue"] = 11] = "BeforeAttributeValue";
    State[State["InAttributeValueDq"] = 12] = "InAttributeValueDq";
    State[State["InAttributeValueSq"] = 13] = "InAttributeValueSq";
    State[State["InAttributeValueNq"] = 14] = "InAttributeValueNq";
    // Declarations
    State[State["BeforeDeclaration"] = 15] = "BeforeDeclaration";
    State[State["InDeclaration"] = 16] = "InDeclaration";
    // Processing instructions
    State[State["InProcessingInstruction"] = 17] = "InProcessingInstruction";
    // Comments & CDATA
    State[State["BeforeComment"] = 18] = "BeforeComment";
    State[State["CDATASequence"] = 19] = "CDATASequence";
    State[State["InSpecialComment"] = 20] = "InSpecialComment";
    State[State["InCommentLike"] = 21] = "InCommentLike";
    // Special tags
    State[State["BeforeSpecialS"] = 22] = "BeforeSpecialS";
    State[State["SpecialStartSequence"] = 23] = "SpecialStartSequence";
    State[State["InSpecialTag"] = 24] = "InSpecialTag";
    State[State["BeforeEntity"] = 25] = "BeforeEntity";
    State[State["BeforeNumericEntity"] = 26] = "BeforeNumericEntity";
    State[State["InNamedEntity"] = 27] = "InNamedEntity";
    State[State["InNumericEntity"] = 28] = "InNumericEntity";
    State[State["InHexEntity"] = 29] = "InHexEntity";
})(State || (State = {}));
function isWhitespace(c) {
    return c === CharCodes.Space || c === CharCodes.NewLine || c === CharCodes.Tab || c === CharCodes.FormFeed || c === CharCodes.CarriageReturn;
}
function isEndOfTagSection(c) {
    return c === CharCodes.Slash || c === CharCodes.Gt || isWhitespace(c);
}
function isNumber(c) {
    return c >= CharCodes.Zero && c <= CharCodes.Nine;
}
function isASCIIAlpha(c) {
    return c >= CharCodes.LowerA && c <= CharCodes.LowerZ || c >= CharCodes.UpperA && c <= CharCodes.UpperZ;
}
function isHexDigit(c) {
    return c >= CharCodes.UpperA && c <= CharCodes.UpperF || c >= CharCodes.LowerA && c <= CharCodes.LowerF;
}
var QuoteType;
(function(QuoteType) {
    QuoteType[QuoteType["NoValue"] = 0] = "NoValue";
    QuoteType[QuoteType["Unquoted"] = 1] = "Unquoted";
    QuoteType[QuoteType["Single"] = 2] = "Single";
    QuoteType[QuoteType["Double"] = 3] = "Double";
})(QuoteType = exports.QuoteType || (exports.QuoteType = {}));
/**
 * Sequences used to match longer strings.
 *
 * We don't have `Script`, `Style`, or `Title` here. Instead, we re-use the *End
 * sequences with an increased offset.
 */ var Sequences = {
    Cdata: new Uint8Array([
        0x43,
        0x44,
        0x41,
        0x54,
        0x41,
        0x5b
    ]),
    CdataEnd: new Uint8Array([
        0x5d,
        0x5d,
        0x3e
    ]),
    CommentEnd: new Uint8Array([
        0x2d,
        0x2d,
        0x3e
    ]),
    ScriptEnd: new Uint8Array([
        0x3c,
        0x2f,
        0x73,
        0x63,
        0x72,
        0x69,
        0x70,
        0x74
    ]),
    StyleEnd: new Uint8Array([
        0x3c,
        0x2f,
        0x73,
        0x74,
        0x79,
        0x6c,
        0x65
    ]),
    TitleEnd: new Uint8Array([
        0x3c,
        0x2f,
        0x74,
        0x69,
        0x74,
        0x6c,
        0x65
    ])
};
var Tokenizer = /** @class */ function() {
    function Tokenizer(_a, cbs) {
        var _b = _a.xmlMode, xmlMode = _b === void 0 ? false : _b, _c = _a.decodeEntities, decodeEntities = _c === void 0 ? true : _c;
        this.cbs = cbs;
        /** The current state the tokenizer is in. */ this.state = State.Text;
        /** The read buffer. */ this.buffer = "";
        /** The beginning of the section that is currently being read. */ this.sectionStart = 0;
        /** The index within the buffer that we are currently looking at. */ this.index = 0;
        /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */ this.baseState = State.Text;
        /** For special parsing behavior inside of script and style tags. */ this.isSpecial = false;
        /** Indicates whether the tokenizer has been paused. */ this.running = true;
        /** The offset of the current buffer. */ this.offset = 0;
        this.currentSequence = undefined;
        this.sequenceIndex = 0;
        this.trieIndex = 0;
        this.trieCurrent = 0;
        /** For named entities, the index of the value. For numeric entities, the code point. */ this.entityResult = 0;
        this.entityExcess = 0;
        this.xmlMode = xmlMode;
        this.decodeEntities = decodeEntities;
        this.entityTrie = xmlMode ? decode_js_1.xmlDecodeTree : decode_js_1.htmlDecodeTree;
    }
    Tokenizer.prototype.reset = function() {
        this.state = State.Text;
        this.buffer = "";
        this.sectionStart = 0;
        this.index = 0;
        this.baseState = State.Text;
        this.currentSequence = undefined;
        this.running = true;
        this.offset = 0;
    };
    Tokenizer.prototype.write = function(chunk) {
        this.offset += this.buffer.length;
        this.buffer = chunk;
        this.parse();
    };
    Tokenizer.prototype.end = function() {
        if (this.running) this.finish();
    };
    Tokenizer.prototype.pause = function() {
        this.running = false;
    };
    Tokenizer.prototype.resume = function() {
        this.running = true;
        if (this.index < this.buffer.length + this.offset) {
            this.parse();
        }
    };
    /**
     * The current index within all of the written data.
     */ Tokenizer.prototype.getIndex = function() {
        return this.index;
    };
    /**
     * The start of the current section.
     */ Tokenizer.prototype.getSectionStart = function() {
        return this.sectionStart;
    };
    Tokenizer.prototype.stateText = function(c) {
        if (c === CharCodes.Lt || !this.decodeEntities && this.fastForwardTo(CharCodes.Lt)) {
            if (this.index > this.sectionStart) {
                this.cbs.ontext(this.sectionStart, this.index);
            }
            this.state = State.BeforeTagName;
            this.sectionStart = this.index;
        } else if (this.decodeEntities && c === CharCodes.Amp) {
            this.state = State.BeforeEntity;
        }
    };
    Tokenizer.prototype.stateSpecialStartSequence = function(c) {
        var isEnd = this.sequenceIndex === this.currentSequence.length;
        var isMatch = isEnd ? isEndOfTagSection(c) : (c | 0x20) === this.currentSequence[this.sequenceIndex];
        if (!isMatch) {
            this.isSpecial = false;
        } else if (!isEnd) {
            this.sequenceIndex++;
            return;
        }
        this.sequenceIndex = 0;
        this.state = State.InTagName;
        this.stateInTagName(c);
    };
    /** Look for an end tag. For <title> tags, also decode entities. */ Tokenizer.prototype.stateInSpecialTag = function(c) {
        if (this.sequenceIndex === this.currentSequence.length) {
            if (c === CharCodes.Gt || isWhitespace(c)) {
                var endOfText = this.index - this.currentSequence.length;
                if (this.sectionStart < endOfText) {
                    // Spoof the index so that reported locations match up.
                    var actualIndex = this.index;
                    this.index = endOfText;
                    this.cbs.ontext(this.sectionStart, endOfText);
                    this.index = actualIndex;
                }
                this.isSpecial = false;
                this.sectionStart = endOfText + 2; // Skip over the `</`
                this.stateInClosingTagName(c);
                return; // We are done; skip the rest of the function.
            }
            this.sequenceIndex = 0;
        }
        if ((c | 0x20) === this.currentSequence[this.sequenceIndex]) {
            this.sequenceIndex += 1;
        } else if (this.sequenceIndex === 0) {
            if (this.currentSequence === Sequences.TitleEnd) {
                // We have to parse entities in <title> tags.
                if (this.decodeEntities && c === CharCodes.Amp) {
                    this.state = State.BeforeEntity;
                }
            } else if (this.fastForwardTo(CharCodes.Lt)) {
                // Outside of <title> tags, we can fast-forward.
                this.sequenceIndex = 1;
            }
        } else {
            // If we see a `<`, set the sequence index to 1; useful for eg. `<</script>`.
            this.sequenceIndex = Number(c === CharCodes.Lt);
        }
    };
    Tokenizer.prototype.stateCDATASequence = function(c) {
        if (c === Sequences.Cdata[this.sequenceIndex]) {
            if (++this.sequenceIndex === Sequences.Cdata.length) {
                this.state = State.InCommentLike;
                this.currentSequence = Sequences.CdataEnd;
                this.sequenceIndex = 0;
                this.sectionStart = this.index + 1;
            }
        } else {
            this.sequenceIndex = 0;
            this.state = State.InDeclaration;
            this.stateInDeclaration(c); // Reconsume the character
        }
    };
    /**
     * When we wait for one specific character, we can speed things up
     * by skipping through the buffer until we find it.
     *
     * @returns Whether the character was found.
     */ Tokenizer.prototype.fastForwardTo = function(c) {
        while(++this.index < this.buffer.length + this.offset){
            if (this.buffer.charCodeAt(this.index - this.offset) === c) {
                return true;
            }
        }
        /*
         * We increment the index at the end of the `parse` loop,
         * so set it to `buffer.length - 1` here.
         *
         * TODO: Refactor `parse` to increment index before calling states.
         */ this.index = this.buffer.length + this.offset - 1;
        return false;
    };
    /**
     * Comments and CDATA end with `-->` and `]]>`.
     *
     * Their common qualities are:
     * - Their end sequences have a distinct character they start with.
     * - That character is then repeated, so we have to check multiple repeats.
     * - All characters but the start character of the sequence can be skipped.
     */ Tokenizer.prototype.stateInCommentLike = function(c) {
        if (c === this.currentSequence[this.sequenceIndex]) {
            if (++this.sequenceIndex === this.currentSequence.length) {
                if (this.currentSequence === Sequences.CdataEnd) {
                    this.cbs.oncdata(this.sectionStart, this.index, 2);
                } else {
                    this.cbs.oncomment(this.sectionStart, this.index, 2);
                }
                this.sequenceIndex = 0;
                this.sectionStart = this.index + 1;
                this.state = State.Text;
            }
        } else if (this.sequenceIndex === 0) {
            // Fast-forward to the first character of the sequence
            if (this.fastForwardTo(this.currentSequence[0])) {
                this.sequenceIndex = 1;
            }
        } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {
            // Allow long sequences, eg. --->, ]]]>
            this.sequenceIndex = 0;
        }
    };
    /**
     * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.
     *
     * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).
     * We allow anything that wouldn't end the tag.
     */ Tokenizer.prototype.isTagStartChar = function(c) {
        return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);
    };
    Tokenizer.prototype.startSpecial = function(sequence, offset) {
        this.isSpecial = true;
        this.currentSequence = sequence;
        this.sequenceIndex = offset;
        this.state = State.SpecialStartSequence;
    };
    Tokenizer.prototype.stateBeforeTagName = function(c) {
        if (c === CharCodes.ExclamationMark) {
            this.state = State.BeforeDeclaration;
            this.sectionStart = this.index + 1;
        } else if (c === CharCodes.Questionmark) {
            this.state = State.InProcessingInstruction;
            this.sectionStart = this.index + 1;
        } else if (this.isTagStartChar(c)) {
            var lower = c | 0x20;
            this.sectionStart = this.index;
            if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {
                this.startSpecial(Sequences.TitleEnd, 3);
            } else {
                this.state = !this.xmlMode && lower === Sequences.ScriptEnd[2] ? State.BeforeSpecialS : State.InTagName;
            }
        } else if (c === CharCodes.Slash) {
            this.state = State.BeforeClosingTagName;
        } else {
            this.state = State.Text;
            this.stateText(c);
        }
    };
    Tokenizer.prototype.stateInTagName = function(c) {
        if (isEndOfTagSection(c)) {
            this.cbs.onopentagname(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.state = State.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
        }
    };
    Tokenizer.prototype.stateBeforeClosingTagName = function(c) {
        if (isWhitespace(c)) {
        // Ignore
        } else if (c === CharCodes.Gt) {
            this.state = State.Text;
        } else {
            this.state = this.isTagStartChar(c) ? State.InClosingTagName : State.InSpecialComment;
            this.sectionStart = this.index;
        }
    };
    Tokenizer.prototype.stateInClosingTagName = function(c) {
        if (c === CharCodes.Gt || isWhitespace(c)) {
            this.cbs.onclosetag(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.state = State.AfterClosingTagName;
            this.stateAfterClosingTagName(c);
        }
    };
    Tokenizer.prototype.stateAfterClosingTagName = function(c) {
        // Skip everything until ">"
        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
            this.state = State.Text;
            this.baseState = State.Text;
            this.sectionStart = this.index + 1;
        }
    };
    Tokenizer.prototype.stateBeforeAttributeName = function(c) {
        if (c === CharCodes.Gt) {
            this.cbs.onopentagend(this.index);
            if (this.isSpecial) {
                this.state = State.InSpecialTag;
                this.sequenceIndex = 0;
            } else {
                this.state = State.Text;
            }
            this.baseState = this.state;
            this.sectionStart = this.index + 1;
        } else if (c === CharCodes.Slash) {
            this.state = State.InSelfClosingTag;
        } else if (!isWhitespace(c)) {
            this.state = State.InAttributeName;
            this.sectionStart = this.index;
        }
    };
    Tokenizer.prototype.stateInSelfClosingTag = function(c) {
        if (c === CharCodes.Gt) {
            this.cbs.onselfclosingtag(this.index);
            this.state = State.Text;
            this.baseState = State.Text;
            this.sectionStart = this.index + 1;
            this.isSpecial = false; // Reset special state, in case of self-closing special tags
        } else if (!isWhitespace(c)) {
            this.state = State.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
        }
    };
    Tokenizer.prototype.stateInAttributeName = function(c) {
        if (c === CharCodes.Eq || isEndOfTagSection(c)) {
            this.cbs.onattribname(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.state = State.AfterAttributeName;
            this.stateAfterAttributeName(c);
        }
    };
    Tokenizer.prototype.stateAfterAttributeName = function(c) {
        if (c === CharCodes.Eq) {
            this.state = State.BeforeAttributeValue;
        } else if (c === CharCodes.Slash || c === CharCodes.Gt) {
            this.cbs.onattribend(QuoteType.NoValue, this.index);
            this.state = State.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
        } else if (!isWhitespace(c)) {
            this.cbs.onattribend(QuoteType.NoValue, this.index);
            this.state = State.InAttributeName;
            this.sectionStart = this.index;
        }
    };
    Tokenizer.prototype.stateBeforeAttributeValue = function(c) {
        if (c === CharCodes.DoubleQuote) {
            this.state = State.InAttributeValueDq;
            this.sectionStart = this.index + 1;
        } else if (c === CharCodes.SingleQuote) {
            this.state = State.InAttributeValueSq;
            this.sectionStart = this.index + 1;
        } else if (!isWhitespace(c)) {
            this.sectionStart = this.index;
            this.state = State.InAttributeValueNq;
            this.stateInAttributeValueNoQuotes(c); // Reconsume token
        }
    };
    Tokenizer.prototype.handleInAttributeValue = function(c, quote) {
        if (c === quote || !this.decodeEntities && this.fastForwardTo(quote)) {
            this.cbs.onattribdata(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.cbs.onattribend(quote === CharCodes.DoubleQuote ? QuoteType.Double : QuoteType.Single, this.index);
            this.state = State.BeforeAttributeName;
        } else if (this.decodeEntities && c === CharCodes.Amp) {
            this.baseState = this.state;
            this.state = State.BeforeEntity;
        }
    };
    Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function(c) {
        this.handleInAttributeValue(c, CharCodes.DoubleQuote);
    };
    Tokenizer.prototype.stateInAttributeValueSingleQuotes = function(c) {
        this.handleInAttributeValue(c, CharCodes.SingleQuote);
    };
    Tokenizer.prototype.stateInAttributeValueNoQuotes = function(c) {
        if (isWhitespace(c) || c === CharCodes.Gt) {
            this.cbs.onattribdata(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.cbs.onattribend(QuoteType.Unquoted, this.index);
            this.state = State.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
        } else if (this.decodeEntities && c === CharCodes.Amp) {
            this.baseState = this.state;
            this.state = State.BeforeEntity;
        }
    };
    Tokenizer.prototype.stateBeforeDeclaration = function(c) {
        if (c === CharCodes.OpeningSquareBracket) {
            this.state = State.CDATASequence;
            this.sequenceIndex = 0;
        } else {
            this.state = c === CharCodes.Dash ? State.BeforeComment : State.InDeclaration;
        }
    };
    Tokenizer.prototype.stateInDeclaration = function(c) {
        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
            this.cbs.ondeclaration(this.sectionStart, this.index);
            this.state = State.Text;
            this.sectionStart = this.index + 1;
        }
    };
    Tokenizer.prototype.stateInProcessingInstruction = function(c) {
        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
            this.cbs.onprocessinginstruction(this.sectionStart, this.index);
            this.state = State.Text;
            this.sectionStart = this.index + 1;
        }
    };
    Tokenizer.prototype.stateBeforeComment = function(c) {
        if (c === CharCodes.Dash) {
            this.state = State.InCommentLike;
            this.currentSequence = Sequences.CommentEnd;
            // Allow short comments (eg. <!-->)
            this.sequenceIndex = 2;
            this.sectionStart = this.index + 1;
        } else {
            this.state = State.InDeclaration;
        }
    };
    Tokenizer.prototype.stateInSpecialComment = function(c) {
        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
            this.cbs.oncomment(this.sectionStart, this.index, 0);
            this.state = State.Text;
            this.sectionStart = this.index + 1;
        }
    };
    Tokenizer.prototype.stateBeforeSpecialS = function(c) {
        var lower = c | 0x20;
        if (lower === Sequences.ScriptEnd[3]) {
            this.startSpecial(Sequences.ScriptEnd, 4);
        } else if (lower === Sequences.StyleEnd[3]) {
            this.startSpecial(Sequences.StyleEnd, 4);
        } else {
            this.state = State.InTagName;
            this.stateInTagName(c); // Consume the token again
        }
    };
    Tokenizer.prototype.stateBeforeEntity = function(c) {
        // Start excess with 1 to include the '&'
        this.entityExcess = 1;
        this.entityResult = 0;
        if (c === CharCodes.Number) {
            this.state = State.BeforeNumericEntity;
        } else if (c === CharCodes.Amp) {
        // We have two `&` characters in a row. Stay in the current state.
        } else {
            this.trieIndex = 0;
            this.trieCurrent = this.entityTrie[0];
            this.state = State.InNamedEntity;
            this.stateInNamedEntity(c);
        }
    };
    Tokenizer.prototype.stateInNamedEntity = function(c) {
        this.entityExcess += 1;
        this.trieIndex = (0, decode_js_1.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);
        if (this.trieIndex < 0) {
            this.emitNamedEntity();
            this.index--;
            return;
        }
        this.trieCurrent = this.entityTrie[this.trieIndex];
        var masked = this.trieCurrent & decode_js_1.BinTrieFlags.VALUE_LENGTH;
        // If the branch is a value, store it and continue
        if (masked) {
            // The mask is the number of bytes of the value, including the current byte.
            var valueLength = (masked >> 14) - 1;
            // If we have a legacy entity while parsing strictly, just skip the number of bytes
            if (!this.allowLegacyEntity() && c !== CharCodes.Semi) {
                this.trieIndex += valueLength;
            } else {
                // Add 1 as we have already incremented the excess
                var entityStart = this.index - this.entityExcess + 1;
                if (entityStart > this.sectionStart) {
                    this.emitPartial(this.sectionStart, entityStart);
                }
                // If this is a surrogate pair, consume the next two bytes
                this.entityResult = this.trieIndex;
                this.trieIndex += valueLength;
                this.entityExcess = 0;
                this.sectionStart = this.index + 1;
                if (valueLength === 0) {
                    this.emitNamedEntity();
                }
            }
        }
    };
    Tokenizer.prototype.emitNamedEntity = function() {
        this.state = this.baseState;
        if (this.entityResult === 0) {
            return;
        }
        var valueLength = (this.entityTrie[this.entityResult] & decode_js_1.BinTrieFlags.VALUE_LENGTH) >> 14;
        switch(valueLength){
            case 1:
                {
                    this.emitCodePoint(this.entityTrie[this.entityResult] & ~decode_js_1.BinTrieFlags.VALUE_LENGTH);
                    break;
                }
            case 2:
                {
                    this.emitCodePoint(this.entityTrie[this.entityResult + 1]);
                    break;
                }
            case 3:
                {
                    this.emitCodePoint(this.entityTrie[this.entityResult + 1]);
                    this.emitCodePoint(this.entityTrie[this.entityResult + 2]);
                }
        }
    };
    Tokenizer.prototype.stateBeforeNumericEntity = function(c) {
        if ((c | 0x20) === CharCodes.LowerX) {
            this.entityExcess++;
            this.state = State.InHexEntity;
        } else {
            this.state = State.InNumericEntity;
            this.stateInNumericEntity(c);
        }
    };
    Tokenizer.prototype.emitNumericEntity = function(strict) {
        var entityStart = this.index - this.entityExcess - 1;
        var numberStart = entityStart + 2 + Number(this.state === State.InHexEntity);
        if (numberStart !== this.index) {
            // Emit leading data if any
            if (entityStart > this.sectionStart) {
                this.emitPartial(this.sectionStart, entityStart);
            }
            this.sectionStart = this.index + Number(strict);
            this.emitCodePoint((0, decode_js_1.replaceCodePoint)(this.entityResult));
        }
        this.state = this.baseState;
    };
    Tokenizer.prototype.stateInNumericEntity = function(c) {
        if (c === CharCodes.Semi) {
            this.emitNumericEntity(true);
        } else if (isNumber(c)) {
            this.entityResult = this.entityResult * 10 + (c - CharCodes.Zero);
            this.entityExcess++;
        } else {
            if (this.allowLegacyEntity()) {
                this.emitNumericEntity(false);
            } else {
                this.state = this.baseState;
            }
            this.index--;
        }
    };
    Tokenizer.prototype.stateInHexEntity = function(c) {
        if (c === CharCodes.Semi) {
            this.emitNumericEntity(true);
        } else if (isNumber(c)) {
            this.entityResult = this.entityResult * 16 + (c - CharCodes.Zero);
            this.entityExcess++;
        } else if (isHexDigit(c)) {
            this.entityResult = this.entityResult * 16 + ((c | 0x20) - CharCodes.LowerA + 10);
            this.entityExcess++;
        } else {
            if (this.allowLegacyEntity()) {
                this.emitNumericEntity(false);
            } else {
                this.state = this.baseState;
            }
            this.index--;
        }
    };
    Tokenizer.prototype.allowLegacyEntity = function() {
        return !this.xmlMode && (this.baseState === State.Text || this.baseState === State.InSpecialTag);
    };
    /**
     * Remove data that has already been consumed from the buffer.
     */ Tokenizer.prototype.cleanup = function() {
        // If we are inside of text or attributes, emit what we already have.
        if (this.running && this.sectionStart !== this.index) {
            if (this.state === State.Text || this.state === State.InSpecialTag && this.sequenceIndex === 0) {
                this.cbs.ontext(this.sectionStart, this.index);
                this.sectionStart = this.index;
            } else if (this.state === State.InAttributeValueDq || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueNq) {
                this.cbs.onattribdata(this.sectionStart, this.index);
                this.sectionStart = this.index;
            }
        }
    };
    Tokenizer.prototype.shouldContinue = function() {
        return this.index < this.buffer.length + this.offset && this.running;
    };
    /**
     * Iterates through the buffer, calling the function corresponding to the current state.
     *
     * States that are more likely to be hit are higher up, as a performance improvement.
     */ Tokenizer.prototype.parse = function() {
        while(this.shouldContinue()){
            var c = this.buffer.charCodeAt(this.index - this.offset);
            switch(this.state){
                case State.Text:
                    {
                        this.stateText(c);
                        break;
                    }
                case State.SpecialStartSequence:
                    {
                        this.stateSpecialStartSequence(c);
                        break;
                    }
                case State.InSpecialTag:
                    {
                        this.stateInSpecialTag(c);
                        break;
                    }
                case State.CDATASequence:
                    {
                        this.stateCDATASequence(c);
                        break;
                    }
                case State.InAttributeValueDq:
                    {
                        this.stateInAttributeValueDoubleQuotes(c);
                        break;
                    }
                case State.InAttributeName:
                    {
                        this.stateInAttributeName(c);
                        break;
                    }
                case State.InCommentLike:
                    {
                        this.stateInCommentLike(c);
                        break;
                    }
                case State.InSpecialComment:
                    {
                        this.stateInSpecialComment(c);
                        break;
                    }
                case State.BeforeAttributeName:
                    {
                        this.stateBeforeAttributeName(c);
                        break;
                    }
                case State.InTagName:
                    {
                        this.stateInTagName(c);
                        break;
                    }
                case State.InClosingTagName:
                    {
                        this.stateInClosingTagName(c);
                        break;
                    }
                case State.BeforeTagName:
                    {
                        this.stateBeforeTagName(c);
                        break;
                    }
                case State.AfterAttributeName:
                    {
                        this.stateAfterAttributeName(c);
                        break;
                    }
                case State.InAttributeValueSq:
                    {
                        this.stateInAttributeValueSingleQuotes(c);
                        break;
                    }
                case State.BeforeAttributeValue:
                    {
                        this.stateBeforeAttributeValue(c);
                        break;
                    }
                case State.BeforeClosingTagName:
                    {
                        this.stateBeforeClosingTagName(c);
                        break;
                    }
                case State.AfterClosingTagName:
                    {
                        this.stateAfterClosingTagName(c);
                        break;
                    }
                case State.BeforeSpecialS:
                    {
                        this.stateBeforeSpecialS(c);
                        break;
                    }
                case State.InAttributeValueNq:
                    {
                        this.stateInAttributeValueNoQuotes(c);
                        break;
                    }
                case State.InSelfClosingTag:
                    {
                        this.stateInSelfClosingTag(c);
                        break;
                    }
                case State.InDeclaration:
                    {
                        this.stateInDeclaration(c);
                        break;
                    }
                case State.BeforeDeclaration:
                    {
                        this.stateBeforeDeclaration(c);
                        break;
                    }
                case State.BeforeComment:
                    {
                        this.stateBeforeComment(c);
                        break;
                    }
                case State.InProcessingInstruction:
                    {
                        this.stateInProcessingInstruction(c);
                        break;
                    }
                case State.InNamedEntity:
                    {
                        this.stateInNamedEntity(c);
                        break;
                    }
                case State.BeforeEntity:
                    {
                        this.stateBeforeEntity(c);
                        break;
                    }
                case State.InHexEntity:
                    {
                        this.stateInHexEntity(c);
                        break;
                    }
                case State.InNumericEntity:
                    {
                        this.stateInNumericEntity(c);
                        break;
                    }
                default:
                    {
                        // `this._state === State.BeforeNumericEntity`
                        this.stateBeforeNumericEntity(c);
                    }
            }
            this.index++;
        }
        this.cleanup();
    };
    Tokenizer.prototype.finish = function() {
        if (this.state === State.InNamedEntity) {
            this.emitNamedEntity();
        }
        // If there is remaining data, emit it in a reasonable way
        if (this.sectionStart < this.index) {
            this.handleTrailingData();
        }
        this.cbs.onend();
    };
    /** Handle any trailing data. */ Tokenizer.prototype.handleTrailingData = function() {
        var endIndex = this.buffer.length + this.offset;
        if (this.state === State.InCommentLike) {
            if (this.currentSequence === Sequences.CdataEnd) {
                this.cbs.oncdata(this.sectionStart, endIndex, 0);
            } else {
                this.cbs.oncomment(this.sectionStart, endIndex, 0);
            }
        } else if (this.state === State.InNumericEntity && this.allowLegacyEntity()) {
            this.emitNumericEntity(false);
        // All trailing data will have been consumed
        } else if (this.state === State.InHexEntity && this.allowLegacyEntity()) {
            this.emitNumericEntity(false);
        // All trailing data will have been consumed
        } else if (this.state === State.InTagName || this.state === State.BeforeAttributeName || this.state === State.BeforeAttributeValue || this.state === State.AfterAttributeName || this.state === State.InAttributeName || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueDq || this.state === State.InAttributeValueNq || this.state === State.InClosingTagName) {
        /*
             * If we are currently in an opening or closing tag, us not calling the
             * respective callback signals that the tag should be ignored.
             */ } else {
            this.cbs.ontext(this.sectionStart, endIndex);
        }
    };
    Tokenizer.prototype.emitPartial = function(start, endIndex) {
        if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {
            this.cbs.onattribdata(start, endIndex);
        } else {
            this.cbs.ontext(start, endIndex);
        }
    };
    Tokenizer.prototype.emitCodePoint = function(cp) {
        if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {
            this.cbs.onattribentity(cp);
        } else {
            this.cbs.ontextentity(cp);
        }
    };
    return Tokenizer;
}();
exports["default"] = Tokenizer; //# sourceMappingURL=Tokenizer.js.map


/***/ }),

/***/ 2326:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = (void 0) && (void 0).__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.DomUtils = exports.parseFeed = exports.getFeed = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DefaultHandler = exports.DomHandler = exports.Parser = void 0;
var Parser_js_1 = __webpack_require__(241);
var Parser_js_2 = __webpack_require__(241);
Object.defineProperty(exports, "Parser", ({
    enumerable: true,
    get: function() {
        return Parser_js_2.Parser;
    }
}));
var domhandler_1 = __webpack_require__(3673);
var domhandler_2 = __webpack_require__(3673);
Object.defineProperty(exports, "DomHandler", ({
    enumerable: true,
    get: function() {
        return domhandler_2.DomHandler;
    }
}));
// Old name for DomHandler
Object.defineProperty(exports, "DefaultHandler", ({
    enumerable: true,
    get: function() {
        return domhandler_2.DomHandler;
    }
}));
// Helper methods
/**
 * Parses the data, returns the resulting document.
 *
 * @param data The data that should be parsed.
 * @param options Optional options for the parser and DOM builder.
 */ function parseDocument(data, options) {
    var handler = new domhandler_1.DomHandler(undefined, options);
    new Parser_js_1.Parser(handler, options).end(data);
    return handler.root;
}
exports.parseDocument = parseDocument;
/**
 * Parses data, returns an array of the root nodes.
 *
 * Note that the root nodes still have a `Document` node as their parent.
 * Use `parseDocument` to get the `Document` node instead.
 *
 * @param data The data that should be parsed.
 * @param options Optional options for the parser and DOM builder.
 * @deprecated Use `parseDocument` instead.
 */ function parseDOM(data, options) {
    return parseDocument(data, options).children;
}
exports.parseDOM = parseDOM;
/**
 * Creates a parser instance, with an attached DOM handler.
 *
 * @param callback A callback that will be called once parsing has been completed.
 * @param options Optional options for the parser and DOM builder.
 * @param elementCallback An optional callback that will be called every time a tag has been completed inside of the DOM.
 */ function createDomStream(callback, options, elementCallback) {
    var handler = new domhandler_1.DomHandler(callback, options, elementCallback);
    return new Parser_js_1.Parser(handler, options);
}
exports.createDomStream = createDomStream;
var Tokenizer_js_1 = __webpack_require__(5199);
Object.defineProperty(exports, "Tokenizer", ({
    enumerable: true,
    get: function() {
        return __importDefault(Tokenizer_js_1).default;
    }
}));
/*
 * All of the following exports exist for backwards-compatibility.
 * They should probably be removed eventually.
 */ exports.ElementType = __importStar(__webpack_require__(288));
var domutils_1 = __webpack_require__(5777);
var domutils_2 = __webpack_require__(5777);
Object.defineProperty(exports, "getFeed", ({
    enumerable: true,
    get: function() {
        return domutils_2.getFeed;
    }
}));
var parseFeedDefaultOptions = {
    xmlMode: true
};
/**
 * Parse a feed.
 *
 * @param feed The feed that should be parsed, as a string.
 * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.
 */ function parseFeed(feed, options) {
    if (options === void 0) {
        options = parseFeedDefaultOptions;
    }
    return (0, domutils_1.getFeed)(parseDOM(feed, options));
}
exports.parseFeed = parseFeed;
exports.DomUtils = __importStar(__webpack_require__(5777)); //# sourceMappingURL=index.js.map


/***/ }),

/***/ 2293:
/***/ ((module) => {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ // The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually

module.exports = function(obj) {
    return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
};
function isBuffer(obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
}
// For Node v0.10 support. Remove this eventually.
function isSlowBuffer(obj) {
    return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isBuffer(obj.slice(0, 0));
}


/***/ }),

/***/ 215:
/***/ ((module) => {

/*!
 * is-extendable <https://github.com/jonschlinkert/is-extendable>
 *
 * Copyright (c) 2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */ 
module.exports = function isExtendable(val) {
    return typeof val !== "undefined" && val !== null && (typeof val === "object" || typeof val === "function");
};


/***/ }),

/***/ 3603:
/***/ ((module) => {

/*!
 * is-whitespace <https://github.com/jonschlinkert/is-whitespace>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */ 
var cache;
module.exports = function isWhitespace(str) {
    return typeof str === "string" && regex().test(str);
};
function regex() {
    // ensure that runtime compilation only happens once
    return cache || (cache = new RegExp('^[\\s	\n\v\f\r \xa0 ᠎             　\u2028\u2029\uFEFF"]+$'));
}


/***/ }),

/***/ 8276:
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jshint node:true */ /* globals define */ /*
  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/ 
/**
The following batches are equivalent:

var beautify_js = require('js-beautify');
var beautify_js = require('js-beautify').js;
var beautify_js = require('js-beautify').js_beautify;

var beautify_css = require('js-beautify').css;
var beautify_css = require('js-beautify').css_beautify;

var beautify_html = require('js-beautify').html;
var beautify_html = require('js-beautify').html_beautify;

All methods returned accept two arguments, the source string and an options object.
**/ function get_beautify(js_beautify, css_beautify, html_beautify) {
    // the default is js
    var beautify = function(src, config) {
        return js_beautify.js_beautify(src, config);
    };
    // short aliases
    beautify.js = js_beautify.js_beautify;
    beautify.css = css_beautify.css_beautify;
    beautify.html = html_beautify.html_beautify;
    // legacy aliases
    beautify.js_beautify = js_beautify.js_beautify;
    beautify.css_beautify = css_beautify.css_beautify;
    beautify.html_beautify = html_beautify.html_beautify;
    return beautify;
}
if (true) {
    // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
        __webpack_require__(6210),
        __webpack_require__(3744),
        __webpack_require__(5510)
    ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(js_beautify, css_beautify, html_beautify) {
        return get_beautify(js_beautify, css_beautify, html_beautify);
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {}


/***/ }),

/***/ 3744:
/***/ ((module, exports) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/* AUTO-GENERATED. DO NOT MODIFY. */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.


 CSS Beautifier
---------------

    Written by Harutyun Amirjanyan, (amirjanyan@gmail.com)

    Based on code initially developed by: Einar Lielmanis, <einar@beautifier.io>
        https://beautifier.io/

    Usage:
        css_beautify(source_text);
        css_beautify(source_text, options);

    The options are (default in brackets):
        indent_size (4)                         — indentation size,
        indent_char (space)                     — character to indent with,
        selector_separator_newline (true)       - separate selectors with newline or
                                                  not (e.g. "a,\nbr" or "a, br")
        end_with_newline (false)                - end with a newline
        newline_between_rules (true)            - add a new line after every css rule
        space_around_selector_separator (false) - ensure space around selector separators:
                                                  '>', '+', '~' (e.g. "a>b" -> "a > b")
    e.g

    css_beautify(css_source_text, {
      'indent_size': 1,
      'indent_char': '\t',
      'selector_separator': ' ',
      'end_with_newline': false,
      'newline_between_rules': true,
      'space_around_selector_separator': true
    });
*/ // http://www.w3.org/TR/CSS21/syndata.html#tokenization
// http://www.w3.org/TR/css3-syntax/
(function() {
    /* GENERATED_BUILD_OUTPUT */ var legacy_beautify_css;
    /******/ (function() {
        /******/ "use strict";
        /******/ var __webpack_modules__ = [
            ,
            ,
            /* 2 */ /***/ function(module) {
                /*jshint node:true */ /*
  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ function OutputLine(parent) {
                    this.__parent = parent;
                    this.__character_count = 0;
                    // use indent_count as a marker for this.__lines that have preserved indentation
                    this.__indent_count = -1;
                    this.__alignment_count = 0;
                    this.__wrap_point_index = 0;
                    this.__wrap_point_character_count = 0;
                    this.__wrap_point_indent_count = -1;
                    this.__wrap_point_alignment_count = 0;
                    this.__items = [];
                }
                OutputLine.prototype.clone_empty = function() {
                    var line = new OutputLine(this.__parent);
                    line.set_indent(this.__indent_count, this.__alignment_count);
                    return line;
                };
                OutputLine.prototype.item = function(index) {
                    if (index < 0) {
                        return this.__items[this.__items.length + index];
                    } else {
                        return this.__items[index];
                    }
                };
                OutputLine.prototype.has_match = function(pattern) {
                    for(var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--){
                        if (this.__items[lastCheckedOutput].match(pattern)) {
                            return true;
                        }
                    }
                    return false;
                };
                OutputLine.prototype.set_indent = function(indent, alignment) {
                    if (this.is_empty()) {
                        this.__indent_count = indent || 0;
                        this.__alignment_count = alignment || 0;
                        this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);
                    }
                };
                OutputLine.prototype._set_wrap_point = function() {
                    if (this.__parent.wrap_line_length) {
                        this.__wrap_point_index = this.__items.length;
                        this.__wrap_point_character_count = this.__character_count;
                        this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;
                        this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;
                    }
                };
                OutputLine.prototype._should_wrap = function() {
                    return this.__wrap_point_index && this.__character_count > this.__parent.wrap_line_length && this.__wrap_point_character_count > this.__parent.next_line.__character_count;
                };
                OutputLine.prototype._allow_wrap = function() {
                    if (this._should_wrap()) {
                        this.__parent.add_new_line();
                        var next = this.__parent.current_line;
                        next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);
                        next.__items = this.__items.slice(this.__wrap_point_index);
                        this.__items = this.__items.slice(0, this.__wrap_point_index);
                        next.__character_count += this.__character_count - this.__wrap_point_character_count;
                        this.__character_count = this.__wrap_point_character_count;
                        if (next.__items[0] === " ") {
                            next.__items.splice(0, 1);
                            next.__character_count -= 1;
                        }
                        return true;
                    }
                    return false;
                };
                OutputLine.prototype.is_empty = function() {
                    return this.__items.length === 0;
                };
                OutputLine.prototype.last = function() {
                    if (!this.is_empty()) {
                        return this.__items[this.__items.length - 1];
                    } else {
                        return null;
                    }
                };
                OutputLine.prototype.push = function(item) {
                    this.__items.push(item);
                    var last_newline_index = item.lastIndexOf("\n");
                    if (last_newline_index !== -1) {
                        this.__character_count = item.length - last_newline_index;
                    } else {
                        this.__character_count += item.length;
                    }
                };
                OutputLine.prototype.pop = function() {
                    var item = null;
                    if (!this.is_empty()) {
                        item = this.__items.pop();
                        this.__character_count -= item.length;
                    }
                    return item;
                };
                OutputLine.prototype._remove_indent = function() {
                    if (this.__indent_count > 0) {
                        this.__indent_count -= 1;
                        this.__character_count -= this.__parent.indent_size;
                    }
                };
                OutputLine.prototype._remove_wrap_indent = function() {
                    if (this.__wrap_point_indent_count > 0) {
                        this.__wrap_point_indent_count -= 1;
                    }
                };
                OutputLine.prototype.trim = function() {
                    while(this.last() === " "){
                        this.__items.pop();
                        this.__character_count -= 1;
                    }
                };
                OutputLine.prototype.toString = function() {
                    var result = "";
                    if (this.is_empty()) {
                        if (this.__parent.indent_empty_lines) {
                            result = this.__parent.get_indent_string(this.__indent_count);
                        }
                    } else {
                        result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);
                        result += this.__items.join("");
                    }
                    return result;
                };
                function IndentStringCache(options, baseIndentString) {
                    this.__cache = [
                        ""
                    ];
                    this.__indent_size = options.indent_size;
                    this.__indent_string = options.indent_char;
                    if (!options.indent_with_tabs) {
                        this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);
                    }
                    // Set to null to continue support for auto detection of base indent
                    baseIndentString = baseIndentString || "";
                    if (options.indent_level > 0) {
                        baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);
                    }
                    this.__base_string = baseIndentString;
                    this.__base_string_length = baseIndentString.length;
                }
                IndentStringCache.prototype.get_indent_size = function(indent, column) {
                    var result = this.__base_string_length;
                    column = column || 0;
                    if (indent < 0) {
                        result = 0;
                    }
                    result += indent * this.__indent_size;
                    result += column;
                    return result;
                };
                IndentStringCache.prototype.get_indent_string = function(indent_level, column) {
                    var result = this.__base_string;
                    column = column || 0;
                    if (indent_level < 0) {
                        indent_level = 0;
                        result = "";
                    }
                    column += indent_level * this.__indent_size;
                    this.__ensure_cache(column);
                    result += this.__cache[column];
                    return result;
                };
                IndentStringCache.prototype.__ensure_cache = function(column) {
                    while(column >= this.__cache.length){
                        this.__add_column();
                    }
                };
                IndentStringCache.prototype.__add_column = function() {
                    var column = this.__cache.length;
                    var indent = 0;
                    var result = "";
                    if (this.__indent_size && column >= this.__indent_size) {
                        indent = Math.floor(column / this.__indent_size);
                        column -= indent * this.__indent_size;
                        result = new Array(indent + 1).join(this.__indent_string);
                    }
                    if (column) {
                        result += new Array(column + 1).join(" ");
                    }
                    this.__cache.push(result);
                };
                function Output(options, baseIndentString) {
                    this.__indent_cache = new IndentStringCache(options, baseIndentString);
                    this.raw = false;
                    this._end_with_newline = options.end_with_newline;
                    this.indent_size = options.indent_size;
                    this.wrap_line_length = options.wrap_line_length;
                    this.indent_empty_lines = options.indent_empty_lines;
                    this.__lines = [];
                    this.previous_line = null;
                    this.current_line = null;
                    this.next_line = new OutputLine(this);
                    this.space_before_token = false;
                    this.non_breaking_space = false;
                    this.previous_token_wrapped = false;
                    // initialize
                    this.__add_outputline();
                }
                Output.prototype.__add_outputline = function() {
                    this.previous_line = this.current_line;
                    this.current_line = this.next_line.clone_empty();
                    this.__lines.push(this.current_line);
                };
                Output.prototype.get_line_number = function() {
                    return this.__lines.length;
                };
                Output.prototype.get_indent_string = function(indent, column) {
                    return this.__indent_cache.get_indent_string(indent, column);
                };
                Output.prototype.get_indent_size = function(indent, column) {
                    return this.__indent_cache.get_indent_size(indent, column);
                };
                Output.prototype.is_empty = function() {
                    return !this.previous_line && this.current_line.is_empty();
                };
                Output.prototype.add_new_line = function(force_newline) {
                    // never newline at the start of file
                    // otherwise, newline only if we didn't just add one or we're forced
                    if (this.is_empty() || !force_newline && this.just_added_newline()) {
                        return false;
                    }
                    // if raw output is enabled, don't print additional newlines,
                    // but still return True as though you had
                    if (!this.raw) {
                        this.__add_outputline();
                    }
                    return true;
                };
                Output.prototype.get_code = function(eol) {
                    this.trim(true);
                    // handle some edge cases where the last tokens
                    // has text that ends with newline(s)
                    var last_item = this.current_line.pop();
                    if (last_item) {
                        if (last_item[last_item.length - 1] === "\n") {
                            last_item = last_item.replace(/\n+$/g, "");
                        }
                        this.current_line.push(last_item);
                    }
                    if (this._end_with_newline) {
                        this.__add_outputline();
                    }
                    var sweet_code = this.__lines.join("\n");
                    if (eol !== "\n") {
                        sweet_code = sweet_code.replace(/[\n]/g, eol);
                    }
                    return sweet_code;
                };
                Output.prototype.set_wrap_point = function() {
                    this.current_line._set_wrap_point();
                };
                Output.prototype.set_indent = function(indent, alignment) {
                    indent = indent || 0;
                    alignment = alignment || 0;
                    // Next line stores alignment values
                    this.next_line.set_indent(indent, alignment);
                    // Never indent your first output indent at the start of the file
                    if (this.__lines.length > 1) {
                        this.current_line.set_indent(indent, alignment);
                        return true;
                    }
                    this.current_line.set_indent();
                    return false;
                };
                Output.prototype.add_raw_token = function(token) {
                    for(var x = 0; x < token.newlines; x++){
                        this.__add_outputline();
                    }
                    this.current_line.set_indent(-1);
                    this.current_line.push(token.whitespace_before);
                    this.current_line.push(token.text);
                    this.space_before_token = false;
                    this.non_breaking_space = false;
                    this.previous_token_wrapped = false;
                };
                Output.prototype.add_token = function(printable_token) {
                    this.__add_space_before_token();
                    this.current_line.push(printable_token);
                    this.space_before_token = false;
                    this.non_breaking_space = false;
                    this.previous_token_wrapped = this.current_line._allow_wrap();
                };
                Output.prototype.__add_space_before_token = function() {
                    if (this.space_before_token && !this.just_added_newline()) {
                        if (!this.non_breaking_space) {
                            this.set_wrap_point();
                        }
                        this.current_line.push(" ");
                    }
                };
                Output.prototype.remove_indent = function(index) {
                    var output_length = this.__lines.length;
                    while(index < output_length){
                        this.__lines[index]._remove_indent();
                        index++;
                    }
                    this.current_line._remove_wrap_indent();
                };
                Output.prototype.trim = function(eat_newlines) {
                    eat_newlines = eat_newlines === undefined ? false : eat_newlines;
                    this.current_line.trim();
                    while(eat_newlines && this.__lines.length > 1 && this.current_line.is_empty()){
                        this.__lines.pop();
                        this.current_line = this.__lines[this.__lines.length - 1];
                        this.current_line.trim();
                    }
                    this.previous_line = this.__lines.length > 1 ? this.__lines[this.__lines.length - 2] : null;
                };
                Output.prototype.just_added_newline = function() {
                    return this.current_line.is_empty();
                };
                Output.prototype.just_added_blankline = function() {
                    return this.is_empty() || this.current_line.is_empty() && this.previous_line.is_empty();
                };
                Output.prototype.ensure_empty_line_above = function(starts_with, ends_with) {
                    var index = this.__lines.length - 2;
                    while(index >= 0){
                        var potentialEmptyLine = this.__lines[index];
                        if (potentialEmptyLine.is_empty()) {
                            break;
                        } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 && potentialEmptyLine.item(-1) !== ends_with) {
                            this.__lines.splice(index + 1, 0, new OutputLine(this));
                            this.previous_line = this.__lines[this.__lines.length - 2];
                            break;
                        }
                        index--;
                    }
                };
                module.exports.Output = Output;
            /***/ },
            ,
            ,
            ,
            /* 6 */ /***/ function(module) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ function Options(options, merge_child_field) {
                    this.raw_options = _mergeOpts(options, merge_child_field);
                    // Support passing the source text back with no change
                    this.disabled = this._get_boolean("disabled");
                    this.eol = this._get_characters("eol", "auto");
                    this.end_with_newline = this._get_boolean("end_with_newline");
                    this.indent_size = this._get_number("indent_size", 4);
                    this.indent_char = this._get_characters("indent_char", " ");
                    this.indent_level = this._get_number("indent_level");
                    this.preserve_newlines = this._get_boolean("preserve_newlines", true);
                    this.max_preserve_newlines = this._get_number("max_preserve_newlines", 32786);
                    if (!this.preserve_newlines) {
                        this.max_preserve_newlines = 0;
                    }
                    this.indent_with_tabs = this._get_boolean("indent_with_tabs", this.indent_char === "	");
                    if (this.indent_with_tabs) {
                        this.indent_char = "	";
                        // indent_size behavior changed after 1.8.6
                        // It used to be that indent_size would be
                        // set to 1 for indent_with_tabs. That is no longer needed and
                        // actually doesn't make sense - why not use spaces? Further,
                        // that might produce unexpected behavior - tabs being used
                        // for single-column alignment. So, when indent_with_tabs is true
                        // and indent_size is 1, reset indent_size to 4.
                        if (this.indent_size === 1) {
                            this.indent_size = 4;
                        }
                    }
                    // Backwards compat with 1.3.x
                    this.wrap_line_length = this._get_number("wrap_line_length", this._get_number("max_char"));
                    this.indent_empty_lines = this._get_boolean("indent_empty_lines");
                    // valid templating languages ['django', 'erb', 'handlebars', 'php', 'smarty']
                    // For now, 'auto' = all off for javascript, all on for html (and inline javascript).
                    // other values ignored
                    this.templating = this._get_selection_list("templating", [
                        "auto",
                        "none",
                        "django",
                        "erb",
                        "handlebars",
                        "php",
                        "smarty"
                    ], [
                        "auto"
                    ]);
                }
                Options.prototype._get_array = function(name, default_value) {
                    var option_value = this.raw_options[name];
                    var result = default_value || [];
                    if (typeof option_value === "object") {
                        if (option_value !== null && typeof option_value.concat === "function") {
                            result = option_value.concat();
                        }
                    } else if (typeof option_value === "string") {
                        result = option_value.split(/[^a-zA-Z0-9_\/\-]+/);
                    }
                    return result;
                };
                Options.prototype._get_boolean = function(name, default_value) {
                    var option_value = this.raw_options[name];
                    var result = option_value === undefined ? !!default_value : !!option_value;
                    return result;
                };
                Options.prototype._get_characters = function(name, default_value) {
                    var option_value = this.raw_options[name];
                    var result = default_value || "";
                    if (typeof option_value === "string") {
                        result = option_value.replace(/\\r/, "\r").replace(/\\n/, "\n").replace(/\\t/, "	");
                    }
                    return result;
                };
                Options.prototype._get_number = function(name, default_value) {
                    var option_value = this.raw_options[name];
                    default_value = parseInt(default_value, 10);
                    if (isNaN(default_value)) {
                        default_value = 0;
                    }
                    var result = parseInt(option_value, 10);
                    if (isNaN(result)) {
                        result = default_value;
                    }
                    return result;
                };
                Options.prototype._get_selection = function(name, selection_list, default_value) {
                    var result = this._get_selection_list(name, selection_list, default_value);
                    if (result.length !== 1) {
                        throw new Error("Invalid Option Value: The option '" + name + "' can only be one of the following values:\n" + selection_list + "\nYou passed in: '" + this.raw_options[name] + "'");
                    }
                    return result[0];
                };
                Options.prototype._get_selection_list = function(name, selection_list, default_value) {
                    if (!selection_list || selection_list.length === 0) {
                        throw new Error("Selection list cannot be empty.");
                    }
                    default_value = default_value || [
                        selection_list[0]
                    ];
                    if (!this._is_valid_selection(default_value, selection_list)) {
                        throw new Error("Invalid Default Value!");
                    }
                    var result = this._get_array(name, default_value);
                    if (!this._is_valid_selection(result, selection_list)) {
                        throw new Error("Invalid Option Value: The option '" + name + "' can contain only the following values:\n" + selection_list + "\nYou passed in: '" + this.raw_options[name] + "'");
                    }
                    return result;
                };
                Options.prototype._is_valid_selection = function(result, selection_list) {
                    return result.length && selection_list.length && !result.some(function(item) {
                        return selection_list.indexOf(item) === -1;
                    });
                };
                // merges child options up with the parent options object
                // Example: obj = {a: 1, b: {a: 2}}
                //          mergeOpts(obj, 'b')
                //
                //          Returns: {a: 2}
                function _mergeOpts(allOptions, childFieldName) {
                    var finalOpts = {};
                    allOptions = _normalizeOpts(allOptions);
                    var name;
                    for(name in allOptions){
                        if (name !== childFieldName) {
                            finalOpts[name] = allOptions[name];
                        }
                    }
                    //merge in the per type settings for the childFieldName
                    if (childFieldName && allOptions[childFieldName]) {
                        for(name in allOptions[childFieldName]){
                            finalOpts[name] = allOptions[childFieldName][name];
                        }
                    }
                    return finalOpts;
                }
                function _normalizeOpts(options) {
                    var convertedOpts = {};
                    var key;
                    for(key in options){
                        var newKey = key.replace(/-/g, "_");
                        convertedOpts[newKey] = options[key];
                    }
                    return convertedOpts;
                }
                module.exports.Options = Options;
                module.exports.normalizeOpts = _normalizeOpts;
                module.exports.mergeOpts = _mergeOpts;
            /***/ },
            ,
            /* 8 */ /***/ function(module) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var regexp_has_sticky = RegExp.prototype.hasOwnProperty("sticky");
                function InputScanner(input_string) {
                    this.__input = input_string || "";
                    this.__input_length = this.__input.length;
                    this.__position = 0;
                }
                InputScanner.prototype.restart = function() {
                    this.__position = 0;
                };
                InputScanner.prototype.back = function() {
                    if (this.__position > 0) {
                        this.__position -= 1;
                    }
                };
                InputScanner.prototype.hasNext = function() {
                    return this.__position < this.__input_length;
                };
                InputScanner.prototype.next = function() {
                    var val = null;
                    if (this.hasNext()) {
                        val = this.__input.charAt(this.__position);
                        this.__position += 1;
                    }
                    return val;
                };
                InputScanner.prototype.peek = function(index) {
                    var val = null;
                    index = index || 0;
                    index += this.__position;
                    if (index >= 0 && index < this.__input_length) {
                        val = this.__input.charAt(index);
                    }
                    return val;
                };
                // This is a JavaScript only helper function (not in python)
                // Javascript doesn't have a match method
                // and not all implementation support "sticky" flag.
                // If they do not support sticky then both this.match() and this.test() method
                // must get the match and check the index of the match.
                // If sticky is supported and set, this method will use it.
                // Otherwise it will check that global is set, and fall back to the slower method.
                InputScanner.prototype.__match = function(pattern, index) {
                    pattern.lastIndex = index;
                    var pattern_match = pattern.exec(this.__input);
                    if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {
                        if (pattern_match.index !== index) {
                            pattern_match = null;
                        }
                    }
                    return pattern_match;
                };
                InputScanner.prototype.test = function(pattern, index) {
                    index = index || 0;
                    index += this.__position;
                    if (index >= 0 && index < this.__input_length) {
                        return !!this.__match(pattern, index);
                    } else {
                        return false;
                    }
                };
                InputScanner.prototype.testChar = function(pattern, index) {
                    // test one character regex match
                    var val = this.peek(index);
                    pattern.lastIndex = 0;
                    return val !== null && pattern.test(val);
                };
                InputScanner.prototype.match = function(pattern) {
                    var pattern_match = this.__match(pattern, this.__position);
                    if (pattern_match) {
                        this.__position += pattern_match[0].length;
                    } else {
                        pattern_match = null;
                    }
                    return pattern_match;
                };
                InputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {
                    var val = "";
                    var match;
                    if (starting_pattern) {
                        match = this.match(starting_pattern);
                        if (match) {
                            val += match[0];
                        }
                    }
                    if (until_pattern && (match || !starting_pattern)) {
                        val += this.readUntil(until_pattern, until_after);
                    }
                    return val;
                };
                InputScanner.prototype.readUntil = function(pattern, until_after) {
                    var val = "";
                    var match_index = this.__position;
                    pattern.lastIndex = this.__position;
                    var pattern_match = pattern.exec(this.__input);
                    if (pattern_match) {
                        match_index = pattern_match.index;
                        if (until_after) {
                            match_index += pattern_match[0].length;
                        }
                    } else {
                        match_index = this.__input_length;
                    }
                    val = this.__input.substring(this.__position, match_index);
                    this.__position = match_index;
                    return val;
                };
                InputScanner.prototype.readUntilAfter = function(pattern) {
                    return this.readUntil(pattern, true);
                };
                InputScanner.prototype.get_regexp = function(pattern, match_from) {
                    var result = null;
                    var flags = "g";
                    if (match_from && regexp_has_sticky) {
                        flags = "y";
                    }
                    // strings are converted to regexp
                    if (typeof pattern === "string" && pattern !== "") {
                        // result = new RegExp(pattern.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'), flags);
                        result = new RegExp(pattern, flags);
                    } else if (pattern) {
                        result = new RegExp(pattern.source, flags);
                    }
                    return result;
                };
                InputScanner.prototype.get_literal_regexp = function(literal_string) {
                    return RegExp(literal_string.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"));
                };
                /* css beautifier legacy helpers */ InputScanner.prototype.peekUntilAfter = function(pattern) {
                    var start = this.__position;
                    var val = this.readUntilAfter(pattern);
                    this.__position = start;
                    return val;
                };
                InputScanner.prototype.lookBack = function(testVal) {
                    var start = this.__position - 1;
                    return start >= testVal.length && this.__input.substring(start - testVal.length, start).toLowerCase() === testVal;
                };
                module.exports.InputScanner = InputScanner;
            /***/ },
            ,
            ,
            ,
            ,
            /* 13 */ /***/ function(module) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ function Directives(start_block_pattern, end_block_pattern) {
                    start_block_pattern = typeof start_block_pattern === "string" ? start_block_pattern : start_block_pattern.source;
                    end_block_pattern = typeof end_block_pattern === "string" ? end_block_pattern : end_block_pattern.source;
                    this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \w+[:]\w+)+ /.source + end_block_pattern, "g");
                    this.__directive_pattern = / (\w+)[:](\w+)/g;
                    this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\sbeautify\signore:end\s/.source + end_block_pattern, "g");
                }
                Directives.prototype.get_directives = function(text) {
                    if (!text.match(this.__directives_block_pattern)) {
                        return null;
                    }
                    var directives = {};
                    this.__directive_pattern.lastIndex = 0;
                    var directive_match = this.__directive_pattern.exec(text);
                    while(directive_match){
                        directives[directive_match[1]] = directive_match[2];
                        directive_match = this.__directive_pattern.exec(text);
                    }
                    return directives;
                };
                Directives.prototype.readIgnored = function(input) {
                    return input.readUntilAfter(this.__directives_end_ignore_pattern);
                };
                module.exports.Directives = Directives;
            /***/ },
            ,
            /* 15 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_41583__) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var Beautifier = __nested_webpack_require_41583__(16).Beautifier, Options = __nested_webpack_require_41583__(17).Options;
                function css_beautify(source_text, options) {
                    var beautifier = new Beautifier(source_text, options);
                    return beautifier.beautify();
                }
                module.exports = css_beautify;
                module.exports.defaultOptions = function() {
                    return new Options();
                };
            /***/ },
            /* 16 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_43369__) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var Options = __nested_webpack_require_43369__(17).Options;
                var Output = __nested_webpack_require_43369__(2).Output;
                var InputScanner = __nested_webpack_require_43369__(8).InputScanner;
                var Directives = __nested_webpack_require_43369__(13).Directives;
                var directives_core = new Directives(/\/\*/, /\*\//);
                var lineBreak = /\r\n|[\r\n]/;
                var allLineBreaks = /\r\n|[\r\n]/g;
                // tokenizer
                var whitespaceChar = /\s/;
                var whitespacePattern = /(?:\s|\n)+/g;
                var block_comment_pattern = /\/\*(?:[\s\S]*?)((?:\*\/)|$)/g;
                var comment_pattern = /\/\/(?:[^\n\r\u2028\u2029]*)/g;
                function Beautifier(source_text, options) {
                    this._source_text = source_text || "";
                    // Allow the setting of language/file-type specific options
                    // with inheritance of overall settings
                    this._options = new Options(options);
                    this._ch = null;
                    this._input = null;
                    // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule
                    this.NESTED_AT_RULE = {
                        "page": true,
                        "font-face": true,
                        "keyframes": true,
                        // also in CONDITIONAL_GROUP_RULE below
                        "media": true,
                        "supports": true,
                        "document": true
                    };
                    this.CONDITIONAL_GROUP_RULE = {
                        "media": true,
                        "supports": true,
                        "document": true
                    };
                    this.NON_SEMICOLON_NEWLINE_PROPERTY = [
                        "grid-template-areas",
                        "grid-template"
                    ];
                }
                Beautifier.prototype.eatString = function(endChars) {
                    var result = "";
                    this._ch = this._input.next();
                    while(this._ch){
                        result += this._ch;
                        if (this._ch === "\\") {
                            result += this._input.next();
                        } else if (endChars.indexOf(this._ch) !== -1 || this._ch === "\n") {
                            break;
                        }
                        this._ch = this._input.next();
                    }
                    return result;
                };
                // Skips any white space in the source text from the current position.
                // When allowAtLeastOneNewLine is true, will output new lines for each
                // newline character found; if the user has preserve_newlines off, only
                // the first newline will be output
                Beautifier.prototype.eatWhitespace = function(allowAtLeastOneNewLine) {
                    var result = whitespaceChar.test(this._input.peek());
                    var newline_count = 0;
                    while(whitespaceChar.test(this._input.peek())){
                        this._ch = this._input.next();
                        if (allowAtLeastOneNewLine && this._ch === "\n") {
                            if (newline_count === 0 || newline_count < this._options.max_preserve_newlines) {
                                newline_count++;
                                this._output.add_new_line(true);
                            }
                        }
                    }
                    return result;
                };
                // Nested pseudo-class if we are insideRule
                // and the next special character found opens
                // a new block
                Beautifier.prototype.foundNestedPseudoClass = function() {
                    var openParen = 0;
                    var i = 1;
                    var ch = this._input.peek(i);
                    while(ch){
                        if (ch === "{") {
                            return true;
                        } else if (ch === "(") {
                            // pseudoclasses can contain ()
                            openParen += 1;
                        } else if (ch === ")") {
                            if (openParen === 0) {
                                return false;
                            }
                            openParen -= 1;
                        } else if (ch === ";" || ch === "}") {
                            return false;
                        }
                        i++;
                        ch = this._input.peek(i);
                    }
                    return false;
                };
                Beautifier.prototype.print_string = function(output_string) {
                    this._output.set_indent(this._indentLevel);
                    this._output.non_breaking_space = true;
                    this._output.add_token(output_string);
                };
                Beautifier.prototype.preserveSingleSpace = function(isAfterSpace) {
                    if (isAfterSpace) {
                        this._output.space_before_token = true;
                    }
                };
                Beautifier.prototype.indent = function() {
                    this._indentLevel++;
                };
                Beautifier.prototype.outdent = function() {
                    if (this._indentLevel > 0) {
                        this._indentLevel--;
                    }
                };
                /*_____________________--------------------_____________________*/ Beautifier.prototype.beautify = function() {
                    if (this._options.disabled) {
                        return this._source_text;
                    }
                    var source_text = this._source_text;
                    var eol = this._options.eol;
                    if (eol === "auto") {
                        eol = "\n";
                        if (source_text && lineBreak.test(source_text || "")) {
                            eol = source_text.match(lineBreak)[0];
                        }
                    }
                    // HACK: newline parsing inconsistent. This brute force normalizes the this._input.
                    source_text = source_text.replace(allLineBreaks, "\n");
                    // reset
                    var baseIndentString = source_text.match(/^[\t ]*/)[0];
                    this._output = new Output(this._options, baseIndentString);
                    this._input = new InputScanner(source_text);
                    this._indentLevel = 0;
                    this._nestedLevel = 0;
                    this._ch = null;
                    var parenLevel = 0;
                    var insideRule = false;
                    // This is the value side of a property value pair (blue in the following ex)
                    // label { content: blue }
                    var insidePropertyValue = false;
                    var enteringConditionalGroup = false;
                    var insideNonNestedAtRule = false;
                    var insideScssMap = false;
                    var topCharacter = this._ch;
                    var insideNonSemiColonValues = false;
                    var whitespace;
                    var isAfterSpace;
                    var previous_ch;
                    while(true){
                        whitespace = this._input.read(whitespacePattern);
                        isAfterSpace = whitespace !== "";
                        previous_ch = topCharacter;
                        this._ch = this._input.next();
                        if (this._ch === "\\" && this._input.hasNext()) {
                            this._ch += this._input.next();
                        }
                        topCharacter = this._ch;
                        if (!this._ch) {
                            break;
                        } else if (this._ch === "/" && this._input.peek() === "*") {
                            // /* css comment */
                            // Always start block comments on a new line.
                            // This handles scenarios where a block comment immediately
                            // follows a property definition on the same line or where
                            // minified code is being beautified.
                            this._output.add_new_line();
                            this._input.back();
                            var comment = this._input.read(block_comment_pattern);
                            // Handle ignore directive
                            var directives = directives_core.get_directives(comment);
                            if (directives && directives.ignore === "start") {
                                comment += directives_core.readIgnored(this._input);
                            }
                            this.print_string(comment);
                            // Ensures any new lines following the comment are preserved
                            this.eatWhitespace(true);
                            // Block comments are followed by a new line so they don't
                            // share a line with other properties
                            this._output.add_new_line();
                        } else if (this._ch === "/" && this._input.peek() === "/") {
                            // // single line comment
                            // Preserves the space before a comment
                            // on the same line as a rule
                            this._output.space_before_token = true;
                            this._input.back();
                            this.print_string(this._input.read(comment_pattern));
                            // Ensures any new lines following the comment are preserved
                            this.eatWhitespace(true);
                        } else if (this._ch === "$") {
                            this.preserveSingleSpace(isAfterSpace);
                            this.print_string(this._ch);
                            // strip trailing space, if present, for hash property checks
                            var variable = this._input.peekUntilAfter(/[: ,;{}()[\]\/='"]/g);
                            if (variable.match(/[ :]$/)) {
                                // we have a variable or pseudo-class, add it and insert one space before continuing
                                variable = this.eatString(": ").replace(/\s$/, "");
                                this.print_string(variable);
                                this._output.space_before_token = true;
                            }
                            variable = variable.replace(/\s$/, "");
                            // might be sass variable
                            if (parenLevel === 0 && variable.indexOf(":") !== -1) {
                                insidePropertyValue = true;
                                this.indent();
                            }
                        } else if (this._ch === "@") {
                            this.preserveSingleSpace(isAfterSpace);
                            // deal with less property mixins @{...}
                            if (this._input.peek() === "{") {
                                this.print_string(this._ch + this.eatString("}"));
                            } else {
                                this.print_string(this._ch);
                                // strip trailing space, if present, for hash property checks
                                var variableOrRule = this._input.peekUntilAfter(/[: ,;{}()[\]\/='"]/g);
                                if (variableOrRule.match(/[ :]$/)) {
                                    // we have a variable or pseudo-class, add it and insert one space before continuing
                                    variableOrRule = this.eatString(": ").replace(/\s$/, "");
                                    this.print_string(variableOrRule);
                                    this._output.space_before_token = true;
                                }
                                variableOrRule = variableOrRule.replace(/\s$/, "");
                                // might be less variable
                                if (parenLevel === 0 && variableOrRule.indexOf(":") !== -1) {
                                    insidePropertyValue = true;
                                    this.indent();
                                // might be a nesting at-rule
                                } else if (variableOrRule in this.NESTED_AT_RULE) {
                                    this._nestedLevel += 1;
                                    if (variableOrRule in this.CONDITIONAL_GROUP_RULE) {
                                        enteringConditionalGroup = true;
                                    }
                                // might be a non-nested at-rule
                                } else if (parenLevel === 0 && !insidePropertyValue) {
                                    insideNonNestedAtRule = true;
                                }
                            }
                        } else if (this._ch === "#" && this._input.peek() === "{") {
                            this.preserveSingleSpace(isAfterSpace);
                            this.print_string(this._ch + this.eatString("}"));
                        } else if (this._ch === "{") {
                            if (insidePropertyValue) {
                                insidePropertyValue = false;
                                this.outdent();
                            }
                            // non nested at rule becomes nested
                            insideNonNestedAtRule = false;
                            // when entering conditional groups, only rulesets are allowed
                            if (enteringConditionalGroup) {
                                enteringConditionalGroup = false;
                                insideRule = this._indentLevel >= this._nestedLevel;
                            } else {
                                // otherwise, declarations are also allowed
                                insideRule = this._indentLevel >= this._nestedLevel - 1;
                            }
                            if (this._options.newline_between_rules && insideRule) {
                                if (this._output.previous_line && this._output.previous_line.item(-1) !== "{") {
                                    this._output.ensure_empty_line_above("/", ",");
                                }
                            }
                            this._output.space_before_token = true;
                            // The difference in print_string and indent order is necessary to indent the '{' correctly
                            if (this._options.brace_style === "expand") {
                                this._output.add_new_line();
                                this.print_string(this._ch);
                                this.indent();
                                this._output.set_indent(this._indentLevel);
                            } else {
                                // inside mixin and first param is object
                                if (previous_ch === "(") {
                                    this._output.space_before_token = false;
                                } else if (previous_ch !== ",") {
                                    this.indent();
                                }
                                this.print_string(this._ch);
                            }
                            this.eatWhitespace(true);
                            this._output.add_new_line();
                        } else if (this._ch === "}") {
                            this.outdent();
                            this._output.add_new_line();
                            if (previous_ch === "{") {
                                this._output.trim(true);
                            }
                            if (insidePropertyValue) {
                                this.outdent();
                                insidePropertyValue = false;
                            }
                            this.print_string(this._ch);
                            insideRule = false;
                            if (this._nestedLevel) {
                                this._nestedLevel--;
                            }
                            this.eatWhitespace(true);
                            this._output.add_new_line();
                            if (this._options.newline_between_rules && !this._output.just_added_blankline()) {
                                if (this._input.peek() !== "}") {
                                    this._output.add_new_line(true);
                                }
                            }
                            if (this._input.peek() === ")") {
                                this._output.trim(true);
                                if (this._options.brace_style === "expand") {
                                    this._output.add_new_line(true);
                                }
                            }
                        } else if (this._ch === ":") {
                            for(var i = 0; i < this.NON_SEMICOLON_NEWLINE_PROPERTY.length; i++){
                                if (this._input.lookBack(this.NON_SEMICOLON_NEWLINE_PROPERTY[i])) {
                                    insideNonSemiColonValues = true;
                                    break;
                                }
                            }
                            if ((insideRule || enteringConditionalGroup) && !(this._input.lookBack("&") || this.foundNestedPseudoClass()) && !this._input.lookBack("(") && !insideNonNestedAtRule && parenLevel === 0) {
                                // 'property: value' delimiter
                                // which could be in a conditional group query
                                this.print_string(":");
                                if (!insidePropertyValue) {
                                    insidePropertyValue = true;
                                    this._output.space_before_token = true;
                                    this.eatWhitespace(true);
                                    this.indent();
                                }
                            } else {
                                // sass/less parent reference don't use a space
                                // sass nested pseudo-class don't use a space
                                // preserve space before pseudoclasses/pseudoelements, as it means "in any child"
                                if (this._input.lookBack(" ")) {
                                    this._output.space_before_token = true;
                                }
                                if (this._input.peek() === ":") {
                                    // pseudo-element
                                    this._ch = this._input.next();
                                    this.print_string("::");
                                } else {
                                    // pseudo-class
                                    this.print_string(":");
                                }
                            }
                        } else if (this._ch === '"' || this._ch === "'") {
                            var preserveQuoteSpace = previous_ch === '"' || previous_ch === "'";
                            this.preserveSingleSpace(preserveQuoteSpace || isAfterSpace);
                            this.print_string(this._ch + this.eatString(this._ch));
                            this.eatWhitespace(true);
                        } else if (this._ch === ";") {
                            insideNonSemiColonValues = false;
                            if (parenLevel === 0) {
                                if (insidePropertyValue) {
                                    this.outdent();
                                    insidePropertyValue = false;
                                }
                                insideNonNestedAtRule = false;
                                this.print_string(this._ch);
                                this.eatWhitespace(true);
                                // This maintains single line comments on the same
                                // line. Block comments are also affected, but
                                // a new line is always output before one inside
                                // that section
                                if (this._input.peek() !== "/") {
                                    this._output.add_new_line();
                                }
                            } else {
                                this.print_string(this._ch);
                                this.eatWhitespace(true);
                                this._output.space_before_token = true;
                            }
                        } else if (this._ch === "(") {
                            if (this._input.lookBack("url")) {
                                this.print_string(this._ch);
                                this.eatWhitespace();
                                parenLevel++;
                                this.indent();
                                this._ch = this._input.next();
                                if (this._ch === ")" || this._ch === '"' || this._ch === "'") {
                                    this._input.back();
                                } else if (this._ch) {
                                    this.print_string(this._ch + this.eatString(")"));
                                    if (parenLevel) {
                                        parenLevel--;
                                        this.outdent();
                                    }
                                }
                            } else {
                                var space_needed = false;
                                if (this._input.lookBack("with")) {
                                    // look back is not an accurate solution, we need tokens to confirm without whitespaces
                                    space_needed = true;
                                }
                                this.preserveSingleSpace(isAfterSpace || space_needed);
                                this.print_string(this._ch);
                                // handle scss/sass map
                                if (insidePropertyValue && previous_ch === "$" && this._options.selector_separator_newline) {
                                    this._output.add_new_line();
                                    insideScssMap = true;
                                } else {
                                    this.eatWhitespace();
                                    parenLevel++;
                                    this.indent();
                                }
                            }
                        } else if (this._ch === ")") {
                            if (parenLevel) {
                                parenLevel--;
                                this.outdent();
                            }
                            if (insideScssMap && this._input.peek() === ";" && this._options.selector_separator_newline) {
                                insideScssMap = false;
                                this.outdent();
                                this._output.add_new_line();
                            }
                            this.print_string(this._ch);
                        } else if (this._ch === ",") {
                            this.print_string(this._ch);
                            this.eatWhitespace(true);
                            if (this._options.selector_separator_newline && (!insidePropertyValue || insideScssMap) && parenLevel === 0 && !insideNonNestedAtRule) {
                                this._output.add_new_line();
                            } else {
                                this._output.space_before_token = true;
                            }
                        } else if ((this._ch === ">" || this._ch === "+" || this._ch === "~") && !insidePropertyValue && parenLevel === 0) {
                            //handle combinator spacing
                            if (this._options.space_around_combinator) {
                                this._output.space_before_token = true;
                                this.print_string(this._ch);
                                this._output.space_before_token = true;
                            } else {
                                this.print_string(this._ch);
                                this.eatWhitespace();
                                // squash extra whitespace
                                if (this._ch && whitespaceChar.test(this._ch)) {
                                    this._ch = "";
                                }
                            }
                        } else if (this._ch === "]") {
                            this.print_string(this._ch);
                        } else if (this._ch === "[") {
                            this.preserveSingleSpace(isAfterSpace);
                            this.print_string(this._ch);
                        } else if (this._ch === "=") {
                            this.eatWhitespace();
                            this.print_string("=");
                            if (whitespaceChar.test(this._ch)) {
                                this._ch = "";
                            }
                        } else if (this._ch === "!" && !this._input.lookBack("\\")) {
                            this._output.space_before_token = true;
                            this.print_string(this._ch);
                        } else {
                            var preserveAfterSpace = previous_ch === '"' || previous_ch === "'";
                            this.preserveSingleSpace(preserveAfterSpace || isAfterSpace);
                            this.print_string(this._ch);
                            if (!this._output.just_added_newline() && this._input.peek() === "\n" && insideNonSemiColonValues) {
                                this._output.add_new_line();
                            }
                        }
                    }
                    var sweetCode = this._output.get_code(eol);
                    return sweetCode;
                };
                module.exports.Beautifier = Beautifier;
            /***/ },
            /* 17 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_71354__) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var BaseOptions = __nested_webpack_require_71354__(6).Options;
                function Options(options) {
                    BaseOptions.call(this, options, "css");
                    this.selector_separator_newline = this._get_boolean("selector_separator_newline", true);
                    this.newline_between_rules = this._get_boolean("newline_between_rules", true);
                    var space_around_selector_separator = this._get_boolean("space_around_selector_separator");
                    this.space_around_combinator = this._get_boolean("space_around_combinator") || space_around_selector_separator;
                    var brace_style_split = this._get_selection_list("brace_style", [
                        "collapse",
                        "expand",
                        "end-expand",
                        "none",
                        "preserve-inline"
                    ]);
                    this.brace_style = "collapse";
                    for(var bs = 0; bs < brace_style_split.length; bs++){
                        if (brace_style_split[bs] !== "expand") {
                            // default to collapse, as only collapse|expand is implemented for now
                            this.brace_style = "collapse";
                        } else {
                            this.brace_style = brace_style_split[bs];
                        }
                    }
                }
                Options.prototype = new BaseOptions();
                module.exports.Options = Options;
            /***/ }
        ];
        /************************************************************************/ /******/ // The module cache
        /******/ var __webpack_module_cache__ = {};
        /******/ /******/ // The require function
        /******/ function __nested_webpack_require_74362__(moduleId) {
            /******/ // Check if module is in cache
            /******/ var cachedModule = __webpack_module_cache__[moduleId];
            /******/ if (cachedModule !== undefined) {
                /******/ return cachedModule.exports;
            /******/ }
            /******/ // Create a new module (and put it into the cache)
            /******/ var module = __webpack_module_cache__[moduleId] = {
                /******/ // no module.id needed
                /******/ // no module.loaded needed
                /******/ exports: {}
            };
            /******/ /******/ // Execute the module function
            /******/ __webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_74362__);
            /******/ /******/ // Return the exports of the module
            /******/ return module.exports;
        /******/ }
        /******/ /************************************************************************/ /******/ /******/ // startup
        /******/ // Load entry module and return exports
        /******/ // This entry module is referenced by other modules so it can't be inlined
        /******/ var __nested_webpack_exports__ = __nested_webpack_require_74362__(15);
        /******/ legacy_beautify_css = __nested_webpack_exports__;
    /******/ /******/ })();
    var css_beautify = legacy_beautify_css;
    /* Footer */ if (true) {
        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
            return {
                css_beautify: css_beautify
            };
        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
})();


/***/ }),

/***/ 5510:
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/* AUTO-GENERATED. DO NOT MODIFY. */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.


 Style HTML
---------------

  Written by Nochum Sossonko, (nsossonko@hotmail.com)

  Based on code initially developed by: Einar Lielmanis, <einar@beautifier.io>
    https://beautifier.io/

  Usage:
    style_html(html_source);

    style_html(html_source, options);

  The options are:
    indent_inner_html (default false)  — indent <head> and <body> sections,
    indent_size (default 4)          — indentation size,
    indent_char (default space)      — character to indent with,
    wrap_line_length (default 250)            -  maximum amount of characters per line (0 = disable)
    brace_style (default "collapse") - "collapse" | "expand" | "end-expand" | "none"
            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.
    inline (defaults to inline tags) - list of tags to be considered inline tags
    unformatted (defaults to inline tags) - list of tags, that shouldn't be reformatted
    content_unformatted (defaults to ["pre", "textarea"] tags) - list of tags, whose content shouldn't be reformatted
    indent_scripts (default normal)  - "keep"|"separate"|"normal"
    preserve_newlines (default true) - whether existing line breaks before elements should be preserved
                                        Only works before elements, not inside tags or for text.
    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk
    indent_handlebars (default false) - format and indent {{#foo}} and {{/foo}}
    end_with_newline (false)          - end with a newline
    extra_liners (default [head,body,/html]) -List of tags that should have an extra newline before them.

    e.g.

    style_html(html_source, {
      'indent_inner_html': false,
      'indent_size': 2,
      'indent_char': ' ',
      'wrap_line_length': 78,
      'brace_style': 'expand',
      'preserve_newlines': true,
      'max_preserve_newlines': 5,
      'indent_handlebars': false,
      'extra_liners': ['/html']
    });
*/ (function() {
    /* GENERATED_BUILD_OUTPUT */ var legacy_beautify_html;
    /******/ (function() {
        /******/ "use strict";
        /******/ var __webpack_modules__ = [
            ,
            ,
            /* 2 */ /***/ function(module) {
                /*jshint node:true */ /*
  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ function OutputLine(parent) {
                    this.__parent = parent;
                    this.__character_count = 0;
                    // use indent_count as a marker for this.__lines that have preserved indentation
                    this.__indent_count = -1;
                    this.__alignment_count = 0;
                    this.__wrap_point_index = 0;
                    this.__wrap_point_character_count = 0;
                    this.__wrap_point_indent_count = -1;
                    this.__wrap_point_alignment_count = 0;
                    this.__items = [];
                }
                OutputLine.prototype.clone_empty = function() {
                    var line = new OutputLine(this.__parent);
                    line.set_indent(this.__indent_count, this.__alignment_count);
                    return line;
                };
                OutputLine.prototype.item = function(index) {
                    if (index < 0) {
                        return this.__items[this.__items.length + index];
                    } else {
                        return this.__items[index];
                    }
                };
                OutputLine.prototype.has_match = function(pattern) {
                    for(var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--){
                        if (this.__items[lastCheckedOutput].match(pattern)) {
                            return true;
                        }
                    }
                    return false;
                };
                OutputLine.prototype.set_indent = function(indent, alignment) {
                    if (this.is_empty()) {
                        this.__indent_count = indent || 0;
                        this.__alignment_count = alignment || 0;
                        this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);
                    }
                };
                OutputLine.prototype._set_wrap_point = function() {
                    if (this.__parent.wrap_line_length) {
                        this.__wrap_point_index = this.__items.length;
                        this.__wrap_point_character_count = this.__character_count;
                        this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;
                        this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;
                    }
                };
                OutputLine.prototype._should_wrap = function() {
                    return this.__wrap_point_index && this.__character_count > this.__parent.wrap_line_length && this.__wrap_point_character_count > this.__parent.next_line.__character_count;
                };
                OutputLine.prototype._allow_wrap = function() {
                    if (this._should_wrap()) {
                        this.__parent.add_new_line();
                        var next = this.__parent.current_line;
                        next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);
                        next.__items = this.__items.slice(this.__wrap_point_index);
                        this.__items = this.__items.slice(0, this.__wrap_point_index);
                        next.__character_count += this.__character_count - this.__wrap_point_character_count;
                        this.__character_count = this.__wrap_point_character_count;
                        if (next.__items[0] === " ") {
                            next.__items.splice(0, 1);
                            next.__character_count -= 1;
                        }
                        return true;
                    }
                    return false;
                };
                OutputLine.prototype.is_empty = function() {
                    return this.__items.length === 0;
                };
                OutputLine.prototype.last = function() {
                    if (!this.is_empty()) {
                        return this.__items[this.__items.length - 1];
                    } else {
                        return null;
                    }
                };
                OutputLine.prototype.push = function(item) {
                    this.__items.push(item);
                    var last_newline_index = item.lastIndexOf("\n");
                    if (last_newline_index !== -1) {
                        this.__character_count = item.length - last_newline_index;
                    } else {
                        this.__character_count += item.length;
                    }
                };
                OutputLine.prototype.pop = function() {
                    var item = null;
                    if (!this.is_empty()) {
                        item = this.__items.pop();
                        this.__character_count -= item.length;
                    }
                    return item;
                };
                OutputLine.prototype._remove_indent = function() {
                    if (this.__indent_count > 0) {
                        this.__indent_count -= 1;
                        this.__character_count -= this.__parent.indent_size;
                    }
                };
                OutputLine.prototype._remove_wrap_indent = function() {
                    if (this.__wrap_point_indent_count > 0) {
                        this.__wrap_point_indent_count -= 1;
                    }
                };
                OutputLine.prototype.trim = function() {
                    while(this.last() === " "){
                        this.__items.pop();
                        this.__character_count -= 1;
                    }
                };
                OutputLine.prototype.toString = function() {
                    var result = "";
                    if (this.is_empty()) {
                        if (this.__parent.indent_empty_lines) {
                            result = this.__parent.get_indent_string(this.__indent_count);
                        }
                    } else {
                        result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);
                        result += this.__items.join("");
                    }
                    return result;
                };
                function IndentStringCache(options, baseIndentString) {
                    this.__cache = [
                        ""
                    ];
                    this.__indent_size = options.indent_size;
                    this.__indent_string = options.indent_char;
                    if (!options.indent_with_tabs) {
                        this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);
                    }
                    // Set to null to continue support for auto detection of base indent
                    baseIndentString = baseIndentString || "";
                    if (options.indent_level > 0) {
                        baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);
                    }
                    this.__base_string = baseIndentString;
                    this.__base_string_length = baseIndentString.length;
                }
                IndentStringCache.prototype.get_indent_size = function(indent, column) {
                    var result = this.__base_string_length;
                    column = column || 0;
                    if (indent < 0) {
                        result = 0;
                    }
                    result += indent * this.__indent_size;
                    result += column;
                    return result;
                };
                IndentStringCache.prototype.get_indent_string = function(indent_level, column) {
                    var result = this.__base_string;
                    column = column || 0;
                    if (indent_level < 0) {
                        indent_level = 0;
                        result = "";
                    }
                    column += indent_level * this.__indent_size;
                    this.__ensure_cache(column);
                    result += this.__cache[column];
                    return result;
                };
                IndentStringCache.prototype.__ensure_cache = function(column) {
                    while(column >= this.__cache.length){
                        this.__add_column();
                    }
                };
                IndentStringCache.prototype.__add_column = function() {
                    var column = this.__cache.length;
                    var indent = 0;
                    var result = "";
                    if (this.__indent_size && column >= this.__indent_size) {
                        indent = Math.floor(column / this.__indent_size);
                        column -= indent * this.__indent_size;
                        result = new Array(indent + 1).join(this.__indent_string);
                    }
                    if (column) {
                        result += new Array(column + 1).join(" ");
                    }
                    this.__cache.push(result);
                };
                function Output(options, baseIndentString) {
                    this.__indent_cache = new IndentStringCache(options, baseIndentString);
                    this.raw = false;
                    this._end_with_newline = options.end_with_newline;
                    this.indent_size = options.indent_size;
                    this.wrap_line_length = options.wrap_line_length;
                    this.indent_empty_lines = options.indent_empty_lines;
                    this.__lines = [];
                    this.previous_line = null;
                    this.current_line = null;
                    this.next_line = new OutputLine(this);
                    this.space_before_token = false;
                    this.non_breaking_space = false;
                    this.previous_token_wrapped = false;
                    // initialize
                    this.__add_outputline();
                }
                Output.prototype.__add_outputline = function() {
                    this.previous_line = this.current_line;
                    this.current_line = this.next_line.clone_empty();
                    this.__lines.push(this.current_line);
                };
                Output.prototype.get_line_number = function() {
                    return this.__lines.length;
                };
                Output.prototype.get_indent_string = function(indent, column) {
                    return this.__indent_cache.get_indent_string(indent, column);
                };
                Output.prototype.get_indent_size = function(indent, column) {
                    return this.__indent_cache.get_indent_size(indent, column);
                };
                Output.prototype.is_empty = function() {
                    return !this.previous_line && this.current_line.is_empty();
                };
                Output.prototype.add_new_line = function(force_newline) {
                    // never newline at the start of file
                    // otherwise, newline only if we didn't just add one or we're forced
                    if (this.is_empty() || !force_newline && this.just_added_newline()) {
                        return false;
                    }
                    // if raw output is enabled, don't print additional newlines,
                    // but still return True as though you had
                    if (!this.raw) {
                        this.__add_outputline();
                    }
                    return true;
                };
                Output.prototype.get_code = function(eol) {
                    this.trim(true);
                    // handle some edge cases where the last tokens
                    // has text that ends with newline(s)
                    var last_item = this.current_line.pop();
                    if (last_item) {
                        if (last_item[last_item.length - 1] === "\n") {
                            last_item = last_item.replace(/\n+$/g, "");
                        }
                        this.current_line.push(last_item);
                    }
                    if (this._end_with_newline) {
                        this.__add_outputline();
                    }
                    var sweet_code = this.__lines.join("\n");
                    if (eol !== "\n") {
                        sweet_code = sweet_code.replace(/[\n]/g, eol);
                    }
                    return sweet_code;
                };
                Output.prototype.set_wrap_point = function() {
                    this.current_line._set_wrap_point();
                };
                Output.prototype.set_indent = function(indent, alignment) {
                    indent = indent || 0;
                    alignment = alignment || 0;
                    // Next line stores alignment values
                    this.next_line.set_indent(indent, alignment);
                    // Never indent your first output indent at the start of the file
                    if (this.__lines.length > 1) {
                        this.current_line.set_indent(indent, alignment);
                        return true;
                    }
                    this.current_line.set_indent();
                    return false;
                };
                Output.prototype.add_raw_token = function(token) {
                    for(var x = 0; x < token.newlines; x++){
                        this.__add_outputline();
                    }
                    this.current_line.set_indent(-1);
                    this.current_line.push(token.whitespace_before);
                    this.current_line.push(token.text);
                    this.space_before_token = false;
                    this.non_breaking_space = false;
                    this.previous_token_wrapped = false;
                };
                Output.prototype.add_token = function(printable_token) {
                    this.__add_space_before_token();
                    this.current_line.push(printable_token);
                    this.space_before_token = false;
                    this.non_breaking_space = false;
                    this.previous_token_wrapped = this.current_line._allow_wrap();
                };
                Output.prototype.__add_space_before_token = function() {
                    if (this.space_before_token && !this.just_added_newline()) {
                        if (!this.non_breaking_space) {
                            this.set_wrap_point();
                        }
                        this.current_line.push(" ");
                    }
                };
                Output.prototype.remove_indent = function(index) {
                    var output_length = this.__lines.length;
                    while(index < output_length){
                        this.__lines[index]._remove_indent();
                        index++;
                    }
                    this.current_line._remove_wrap_indent();
                };
                Output.prototype.trim = function(eat_newlines) {
                    eat_newlines = eat_newlines === undefined ? false : eat_newlines;
                    this.current_line.trim();
                    while(eat_newlines && this.__lines.length > 1 && this.current_line.is_empty()){
                        this.__lines.pop();
                        this.current_line = this.__lines[this.__lines.length - 1];
                        this.current_line.trim();
                    }
                    this.previous_line = this.__lines.length > 1 ? this.__lines[this.__lines.length - 2] : null;
                };
                Output.prototype.just_added_newline = function() {
                    return this.current_line.is_empty();
                };
                Output.prototype.just_added_blankline = function() {
                    return this.is_empty() || this.current_line.is_empty() && this.previous_line.is_empty();
                };
                Output.prototype.ensure_empty_line_above = function(starts_with, ends_with) {
                    var index = this.__lines.length - 2;
                    while(index >= 0){
                        var potentialEmptyLine = this.__lines[index];
                        if (potentialEmptyLine.is_empty()) {
                            break;
                        } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 && potentialEmptyLine.item(-1) !== ends_with) {
                            this.__lines.splice(index + 1, 0, new OutputLine(this));
                            this.previous_line = this.__lines[this.__lines.length - 2];
                            break;
                        }
                        index--;
                    }
                };
                module.exports.Output = Output;
            /***/ },
            /* 3 */ /***/ function(module) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ function Token(type, text, newlines, whitespace_before) {
                    this.type = type;
                    this.text = text;
                    // comments_before are
                    // comments that have a new line before them
                    // and may or may not have a newline after
                    // this is a set of comments before
                    this.comments_before = null; /* inline comment*/ 
                    // this.comments_after =  new TokenStream(); // no new line before and newline after
                    this.newlines = newlines || 0;
                    this.whitespace_before = whitespace_before || "";
                    this.parent = null;
                    this.next = null;
                    this.previous = null;
                    this.opened = null;
                    this.closed = null;
                    this.directives = null;
                }
                module.exports.Token = Token;
            /***/ },
            ,
            ,
            /* 6 */ /***/ function(module) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ function Options(options, merge_child_field) {
                    this.raw_options = _mergeOpts(options, merge_child_field);
                    // Support passing the source text back with no change
                    this.disabled = this._get_boolean("disabled");
                    this.eol = this._get_characters("eol", "auto");
                    this.end_with_newline = this._get_boolean("end_with_newline");
                    this.indent_size = this._get_number("indent_size", 4);
                    this.indent_char = this._get_characters("indent_char", " ");
                    this.indent_level = this._get_number("indent_level");
                    this.preserve_newlines = this._get_boolean("preserve_newlines", true);
                    this.max_preserve_newlines = this._get_number("max_preserve_newlines", 32786);
                    if (!this.preserve_newlines) {
                        this.max_preserve_newlines = 0;
                    }
                    this.indent_with_tabs = this._get_boolean("indent_with_tabs", this.indent_char === "	");
                    if (this.indent_with_tabs) {
                        this.indent_char = "	";
                        // indent_size behavior changed after 1.8.6
                        // It used to be that indent_size would be
                        // set to 1 for indent_with_tabs. That is no longer needed and
                        // actually doesn't make sense - why not use spaces? Further,
                        // that might produce unexpected behavior - tabs being used
                        // for single-column alignment. So, when indent_with_tabs is true
                        // and indent_size is 1, reset indent_size to 4.
                        if (this.indent_size === 1) {
                            this.indent_size = 4;
                        }
                    }
                    // Backwards compat with 1.3.x
                    this.wrap_line_length = this._get_number("wrap_line_length", this._get_number("max_char"));
                    this.indent_empty_lines = this._get_boolean("indent_empty_lines");
                    // valid templating languages ['django', 'erb', 'handlebars', 'php', 'smarty']
                    // For now, 'auto' = all off for javascript, all on for html (and inline javascript).
                    // other values ignored
                    this.templating = this._get_selection_list("templating", [
                        "auto",
                        "none",
                        "django",
                        "erb",
                        "handlebars",
                        "php",
                        "smarty"
                    ], [
                        "auto"
                    ]);
                }
                Options.prototype._get_array = function(name, default_value) {
                    var option_value = this.raw_options[name];
                    var result = default_value || [];
                    if (typeof option_value === "object") {
                        if (option_value !== null && typeof option_value.concat === "function") {
                            result = option_value.concat();
                        }
                    } else if (typeof option_value === "string") {
                        result = option_value.split(/[^a-zA-Z0-9_\/\-]+/);
                    }
                    return result;
                };
                Options.prototype._get_boolean = function(name, default_value) {
                    var option_value = this.raw_options[name];
                    var result = option_value === undefined ? !!default_value : !!option_value;
                    return result;
                };
                Options.prototype._get_characters = function(name, default_value) {
                    var option_value = this.raw_options[name];
                    var result = default_value || "";
                    if (typeof option_value === "string") {
                        result = option_value.replace(/\\r/, "\r").replace(/\\n/, "\n").replace(/\\t/, "	");
                    }
                    return result;
                };
                Options.prototype._get_number = function(name, default_value) {
                    var option_value = this.raw_options[name];
                    default_value = parseInt(default_value, 10);
                    if (isNaN(default_value)) {
                        default_value = 0;
                    }
                    var result = parseInt(option_value, 10);
                    if (isNaN(result)) {
                        result = default_value;
                    }
                    return result;
                };
                Options.prototype._get_selection = function(name, selection_list, default_value) {
                    var result = this._get_selection_list(name, selection_list, default_value);
                    if (result.length !== 1) {
                        throw new Error("Invalid Option Value: The option '" + name + "' can only be one of the following values:\n" + selection_list + "\nYou passed in: '" + this.raw_options[name] + "'");
                    }
                    return result[0];
                };
                Options.prototype._get_selection_list = function(name, selection_list, default_value) {
                    if (!selection_list || selection_list.length === 0) {
                        throw new Error("Selection list cannot be empty.");
                    }
                    default_value = default_value || [
                        selection_list[0]
                    ];
                    if (!this._is_valid_selection(default_value, selection_list)) {
                        throw new Error("Invalid Default Value!");
                    }
                    var result = this._get_array(name, default_value);
                    if (!this._is_valid_selection(result, selection_list)) {
                        throw new Error("Invalid Option Value: The option '" + name + "' can contain only the following values:\n" + selection_list + "\nYou passed in: '" + this.raw_options[name] + "'");
                    }
                    return result;
                };
                Options.prototype._is_valid_selection = function(result, selection_list) {
                    return result.length && selection_list.length && !result.some(function(item) {
                        return selection_list.indexOf(item) === -1;
                    });
                };
                // merges child options up with the parent options object
                // Example: obj = {a: 1, b: {a: 2}}
                //          mergeOpts(obj, 'b')
                //
                //          Returns: {a: 2}
                function _mergeOpts(allOptions, childFieldName) {
                    var finalOpts = {};
                    allOptions = _normalizeOpts(allOptions);
                    var name;
                    for(name in allOptions){
                        if (name !== childFieldName) {
                            finalOpts[name] = allOptions[name];
                        }
                    }
                    //merge in the per type settings for the childFieldName
                    if (childFieldName && allOptions[childFieldName]) {
                        for(name in allOptions[childFieldName]){
                            finalOpts[name] = allOptions[childFieldName][name];
                        }
                    }
                    return finalOpts;
                }
                function _normalizeOpts(options) {
                    var convertedOpts = {};
                    var key;
                    for(key in options){
                        var newKey = key.replace(/-/g, "_");
                        convertedOpts[newKey] = options[key];
                    }
                    return convertedOpts;
                }
                module.exports.Options = Options;
                module.exports.normalizeOpts = _normalizeOpts;
                module.exports.mergeOpts = _mergeOpts;
            /***/ },
            ,
            /* 8 */ /***/ function(module) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var regexp_has_sticky = RegExp.prototype.hasOwnProperty("sticky");
                function InputScanner(input_string) {
                    this.__input = input_string || "";
                    this.__input_length = this.__input.length;
                    this.__position = 0;
                }
                InputScanner.prototype.restart = function() {
                    this.__position = 0;
                };
                InputScanner.prototype.back = function() {
                    if (this.__position > 0) {
                        this.__position -= 1;
                    }
                };
                InputScanner.prototype.hasNext = function() {
                    return this.__position < this.__input_length;
                };
                InputScanner.prototype.next = function() {
                    var val = null;
                    if (this.hasNext()) {
                        val = this.__input.charAt(this.__position);
                        this.__position += 1;
                    }
                    return val;
                };
                InputScanner.prototype.peek = function(index) {
                    var val = null;
                    index = index || 0;
                    index += this.__position;
                    if (index >= 0 && index < this.__input_length) {
                        val = this.__input.charAt(index);
                    }
                    return val;
                };
                // This is a JavaScript only helper function (not in python)
                // Javascript doesn't have a match method
                // and not all implementation support "sticky" flag.
                // If they do not support sticky then both this.match() and this.test() method
                // must get the match and check the index of the match.
                // If sticky is supported and set, this method will use it.
                // Otherwise it will check that global is set, and fall back to the slower method.
                InputScanner.prototype.__match = function(pattern, index) {
                    pattern.lastIndex = index;
                    var pattern_match = pattern.exec(this.__input);
                    if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {
                        if (pattern_match.index !== index) {
                            pattern_match = null;
                        }
                    }
                    return pattern_match;
                };
                InputScanner.prototype.test = function(pattern, index) {
                    index = index || 0;
                    index += this.__position;
                    if (index >= 0 && index < this.__input_length) {
                        return !!this.__match(pattern, index);
                    } else {
                        return false;
                    }
                };
                InputScanner.prototype.testChar = function(pattern, index) {
                    // test one character regex match
                    var val = this.peek(index);
                    pattern.lastIndex = 0;
                    return val !== null && pattern.test(val);
                };
                InputScanner.prototype.match = function(pattern) {
                    var pattern_match = this.__match(pattern, this.__position);
                    if (pattern_match) {
                        this.__position += pattern_match[0].length;
                    } else {
                        pattern_match = null;
                    }
                    return pattern_match;
                };
                InputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {
                    var val = "";
                    var match;
                    if (starting_pattern) {
                        match = this.match(starting_pattern);
                        if (match) {
                            val += match[0];
                        }
                    }
                    if (until_pattern && (match || !starting_pattern)) {
                        val += this.readUntil(until_pattern, until_after);
                    }
                    return val;
                };
                InputScanner.prototype.readUntil = function(pattern, until_after) {
                    var val = "";
                    var match_index = this.__position;
                    pattern.lastIndex = this.__position;
                    var pattern_match = pattern.exec(this.__input);
                    if (pattern_match) {
                        match_index = pattern_match.index;
                        if (until_after) {
                            match_index += pattern_match[0].length;
                        }
                    } else {
                        match_index = this.__input_length;
                    }
                    val = this.__input.substring(this.__position, match_index);
                    this.__position = match_index;
                    return val;
                };
                InputScanner.prototype.readUntilAfter = function(pattern) {
                    return this.readUntil(pattern, true);
                };
                InputScanner.prototype.get_regexp = function(pattern, match_from) {
                    var result = null;
                    var flags = "g";
                    if (match_from && regexp_has_sticky) {
                        flags = "y";
                    }
                    // strings are converted to regexp
                    if (typeof pattern === "string" && pattern !== "") {
                        // result = new RegExp(pattern.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'), flags);
                        result = new RegExp(pattern, flags);
                    } else if (pattern) {
                        result = new RegExp(pattern.source, flags);
                    }
                    return result;
                };
                InputScanner.prototype.get_literal_regexp = function(literal_string) {
                    return RegExp(literal_string.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"));
                };
                /* css beautifier legacy helpers */ InputScanner.prototype.peekUntilAfter = function(pattern) {
                    var start = this.__position;
                    var val = this.readUntilAfter(pattern);
                    this.__position = start;
                    return val;
                };
                InputScanner.prototype.lookBack = function(testVal) {
                    var start = this.__position - 1;
                    return start >= testVal.length && this.__input.substring(start - testVal.length, start).toLowerCase() === testVal;
                };
                module.exports.InputScanner = InputScanner;
            /***/ },
            /* 9 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_41637__) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var InputScanner = __nested_webpack_require_41637__(8).InputScanner;
                var Token = __nested_webpack_require_41637__(3).Token;
                var TokenStream = __nested_webpack_require_41637__(10).TokenStream;
                var WhitespacePattern = __nested_webpack_require_41637__(11).WhitespacePattern;
                var TOKEN = {
                    START: "TK_START",
                    RAW: "TK_RAW",
                    EOF: "TK_EOF"
                };
                var Tokenizer = function(input_string, options) {
                    this._input = new InputScanner(input_string);
                    this._options = options || {};
                    this.__tokens = null;
                    this._patterns = {};
                    this._patterns.whitespace = new WhitespacePattern(this._input);
                };
                Tokenizer.prototype.tokenize = function() {
                    this._input.restart();
                    this.__tokens = new TokenStream();
                    this._reset();
                    var current;
                    var previous = new Token(TOKEN.START, "");
                    var open_token = null;
                    var open_stack = [];
                    var comments = new TokenStream();
                    while(previous.type !== TOKEN.EOF){
                        current = this._get_next_token(previous, open_token);
                        while(this._is_comment(current)){
                            comments.add(current);
                            current = this._get_next_token(previous, open_token);
                        }
                        if (!comments.isEmpty()) {
                            current.comments_before = comments;
                            comments = new TokenStream();
                        }
                        current.parent = open_token;
                        if (this._is_opening(current)) {
                            open_stack.push(open_token);
                            open_token = current;
                        } else if (open_token && this._is_closing(current, open_token)) {
                            current.opened = open_token;
                            open_token.closed = current;
                            open_token = open_stack.pop();
                            current.parent = open_token;
                        }
                        current.previous = previous;
                        previous.next = current;
                        this.__tokens.add(current);
                        previous = current;
                    }
                    return this.__tokens;
                };
                Tokenizer.prototype._is_first_token = function() {
                    return this.__tokens.isEmpty();
                };
                Tokenizer.prototype._reset = function() {};
                Tokenizer.prototype._get_next_token = function(previous_token, open_token) {
                    this._readWhitespace();
                    var resulting_string = this._input.read(/.+/g);
                    if (resulting_string) {
                        return this._create_token(TOKEN.RAW, resulting_string);
                    } else {
                        return this._create_token(TOKEN.EOF, "");
                    }
                };
                Tokenizer.prototype._is_comment = function(current_token) {
                    return false;
                };
                Tokenizer.prototype._is_opening = function(current_token) {
                    return false;
                };
                Tokenizer.prototype._is_closing = function(current_token, open_token) {
                    return false;
                };
                Tokenizer.prototype._create_token = function(type, text) {
                    var token = new Token(type, text, this._patterns.whitespace.newline_count, this._patterns.whitespace.whitespace_before_token);
                    return token;
                };
                Tokenizer.prototype._readWhitespace = function() {
                    return this._patterns.whitespace.read();
                };
                module.exports.Tokenizer = Tokenizer;
                module.exports.TOKEN = TOKEN;
            /***/ },
            /* 10 */ /***/ function(module) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ function TokenStream(parent_token) {
                    // private
                    this.__tokens = [];
                    this.__tokens_length = this.__tokens.length;
                    this.__position = 0;
                    this.__parent_token = parent_token;
                }
                TokenStream.prototype.restart = function() {
                    this.__position = 0;
                };
                TokenStream.prototype.isEmpty = function() {
                    return this.__tokens_length === 0;
                };
                TokenStream.prototype.hasNext = function() {
                    return this.__position < this.__tokens_length;
                };
                TokenStream.prototype.next = function() {
                    var val = null;
                    if (this.hasNext()) {
                        val = this.__tokens[this.__position];
                        this.__position += 1;
                    }
                    return val;
                };
                TokenStream.prototype.peek = function(index) {
                    var val = null;
                    index = index || 0;
                    index += this.__position;
                    if (index >= 0 && index < this.__tokens_length) {
                        val = this.__tokens[index];
                    }
                    return val;
                };
                TokenStream.prototype.add = function(token) {
                    if (this.__parent_token) {
                        token.parent = this.__parent_token;
                    }
                    this.__tokens.push(token);
                    this.__tokens_length += 1;
                };
                module.exports.TokenStream = TokenStream;
            /***/ },
            /* 11 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_50171__) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var Pattern = __nested_webpack_require_50171__(12).Pattern;
                function WhitespacePattern(input_scanner, parent) {
                    Pattern.call(this, input_scanner, parent);
                    if (parent) {
                        this._line_regexp = this._input.get_regexp(parent._line_regexp);
                    } else {
                        this.__set_whitespace_patterns("", "");
                    }
                    this.newline_count = 0;
                    this.whitespace_before_token = "";
                }
                WhitespacePattern.prototype = new Pattern();
                WhitespacePattern.prototype.__set_whitespace_patterns = function(whitespace_chars, newline_chars) {
                    whitespace_chars += "\\t ";
                    newline_chars += "\\n\\r";
                    this._match_pattern = this._input.get_regexp("[" + whitespace_chars + newline_chars + "]+", true);
                    this._newline_regexp = this._input.get_regexp("\\r\\n|[" + newline_chars + "]");
                };
                WhitespacePattern.prototype.read = function() {
                    this.newline_count = 0;
                    this.whitespace_before_token = "";
                    var resulting_string = this._input.read(this._match_pattern);
                    if (resulting_string === " ") {
                        this.whitespace_before_token = " ";
                    } else if (resulting_string) {
                        var matches = this.__split(this._newline_regexp, resulting_string);
                        this.newline_count = matches.length - 1;
                        this.whitespace_before_token = matches[this.newline_count];
                    }
                    return resulting_string;
                };
                WhitespacePattern.prototype.matching = function(whitespace_chars, newline_chars) {
                    var result = this._create();
                    result.__set_whitespace_patterns(whitespace_chars, newline_chars);
                    result._update();
                    return result;
                };
                WhitespacePattern.prototype._create = function() {
                    return new WhitespacePattern(this._input, this);
                };
                WhitespacePattern.prototype.__split = function(regexp, input_string) {
                    regexp.lastIndex = 0;
                    var start_index = 0;
                    var result = [];
                    var next_match = regexp.exec(input_string);
                    while(next_match){
                        result.push(input_string.substring(start_index, next_match.index));
                        start_index = next_match.index + next_match[0].length;
                        next_match = regexp.exec(input_string);
                    }
                    if (start_index < input_string.length) {
                        result.push(input_string.substring(start_index, input_string.length));
                    } else {
                        result.push("");
                    }
                    return result;
                };
                module.exports.WhitespacePattern = WhitespacePattern;
            /***/ },
            /* 12 */ /***/ function(module) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ function Pattern(input_scanner, parent) {
                    this._input = input_scanner;
                    this._starting_pattern = null;
                    this._match_pattern = null;
                    this._until_pattern = null;
                    this._until_after = false;
                    if (parent) {
                        this._starting_pattern = this._input.get_regexp(parent._starting_pattern, true);
                        this._match_pattern = this._input.get_regexp(parent._match_pattern, true);
                        this._until_pattern = this._input.get_regexp(parent._until_pattern);
                        this._until_after = parent._until_after;
                    }
                }
                Pattern.prototype.read = function() {
                    var result = this._input.read(this._starting_pattern);
                    if (!this._starting_pattern || result) {
                        result += this._input.read(this._match_pattern, this._until_pattern, this._until_after);
                    }
                    return result;
                };
                Pattern.prototype.read_match = function() {
                    return this._input.match(this._match_pattern);
                };
                Pattern.prototype.until_after = function(pattern) {
                    var result = this._create();
                    result._until_after = true;
                    result._until_pattern = this._input.get_regexp(pattern);
                    result._update();
                    return result;
                };
                Pattern.prototype.until = function(pattern) {
                    var result = this._create();
                    result._until_after = false;
                    result._until_pattern = this._input.get_regexp(pattern);
                    result._update();
                    return result;
                };
                Pattern.prototype.starting_with = function(pattern) {
                    var result = this._create();
                    result._starting_pattern = this._input.get_regexp(pattern, true);
                    result._update();
                    return result;
                };
                Pattern.prototype.matching = function(pattern) {
                    var result = this._create();
                    result._match_pattern = this._input.get_regexp(pattern, true);
                    result._update();
                    return result;
                };
                Pattern.prototype._create = function() {
                    return new Pattern(this._input, this);
                };
                Pattern.prototype._update = function() {};
                module.exports.Pattern = Pattern;
            /***/ },
            /* 13 */ /***/ function(module) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ function Directives(start_block_pattern, end_block_pattern) {
                    start_block_pattern = typeof start_block_pattern === "string" ? start_block_pattern : start_block_pattern.source;
                    end_block_pattern = typeof end_block_pattern === "string" ? end_block_pattern : end_block_pattern.source;
                    this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \w+[:]\w+)+ /.source + end_block_pattern, "g");
                    this.__directive_pattern = / (\w+)[:](\w+)/g;
                    this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\sbeautify\signore:end\s/.source + end_block_pattern, "g");
                }
                Directives.prototype.get_directives = function(text) {
                    if (!text.match(this.__directives_block_pattern)) {
                        return null;
                    }
                    var directives = {};
                    this.__directive_pattern.lastIndex = 0;
                    var directive_match = this.__directive_pattern.exec(text);
                    while(directive_match){
                        directives[directive_match[1]] = directive_match[2];
                        directive_match = this.__directive_pattern.exec(text);
                    }
                    return directives;
                };
                Directives.prototype.readIgnored = function(input) {
                    return input.readUntilAfter(this.__directives_end_ignore_pattern);
                };
                module.exports.Directives = Directives;
            /***/ },
            /* 14 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_61563__) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var Pattern = __nested_webpack_require_61563__(12).Pattern;
                var template_names = {
                    django: false,
                    erb: false,
                    handlebars: false,
                    php: false,
                    smarty: false
                };
                // This lets templates appear anywhere we would do a readUntil
                // The cost is higher but it is pay to play.
                function TemplatablePattern(input_scanner, parent) {
                    Pattern.call(this, input_scanner, parent);
                    this.__template_pattern = null;
                    this._disabled = Object.assign({}, template_names);
                    this._excluded = Object.assign({}, template_names);
                    if (parent) {
                        this.__template_pattern = this._input.get_regexp(parent.__template_pattern);
                        this._excluded = Object.assign(this._excluded, parent._excluded);
                        this._disabled = Object.assign(this._disabled, parent._disabled);
                    }
                    var pattern = new Pattern(input_scanner);
                    this.__patterns = {
                        handlebars_comment: pattern.starting_with(/{{!--/).until_after(/--}}/),
                        handlebars_unescaped: pattern.starting_with(/{{{/).until_after(/}}}/),
                        handlebars: pattern.starting_with(/{{/).until_after(/}}/),
                        php: pattern.starting_with(/<\?(?:[= ]|php)/).until_after(/\?>/),
                        erb: pattern.starting_with(/<%[^%]/).until_after(/[^%]%>/),
                        // django coflicts with handlebars a bit.
                        django: pattern.starting_with(/{%/).until_after(/%}/),
                        django_value: pattern.starting_with(/{{/).until_after(/}}/),
                        django_comment: pattern.starting_with(/{#/).until_after(/#}/),
                        smarty: pattern.starting_with(/{(?=[^}{\s\n])/).until_after(/[^\s\n]}/),
                        smarty_comment: pattern.starting_with(/{\*/).until_after(/\*}/),
                        smarty_literal: pattern.starting_with(/{literal}/).until_after(/{\/literal}/)
                    };
                }
                TemplatablePattern.prototype = new Pattern();
                TemplatablePattern.prototype._create = function() {
                    return new TemplatablePattern(this._input, this);
                };
                TemplatablePattern.prototype._update = function() {
                    this.__set_templated_pattern();
                };
                TemplatablePattern.prototype.disable = function(language) {
                    var result = this._create();
                    result._disabled[language] = true;
                    result._update();
                    return result;
                };
                TemplatablePattern.prototype.read_options = function(options) {
                    var result = this._create();
                    for(var language in template_names){
                        result._disabled[language] = options.templating.indexOf(language) === -1;
                    }
                    result._update();
                    return result;
                };
                TemplatablePattern.prototype.exclude = function(language) {
                    var result = this._create();
                    result._excluded[language] = true;
                    result._update();
                    return result;
                };
                TemplatablePattern.prototype.read = function() {
                    var result = "";
                    if (this._match_pattern) {
                        result = this._input.read(this._starting_pattern);
                    } else {
                        result = this._input.read(this._starting_pattern, this.__template_pattern);
                    }
                    var next = this._read_template();
                    while(next){
                        if (this._match_pattern) {
                            next += this._input.read(this._match_pattern);
                        } else {
                            next += this._input.readUntil(this.__template_pattern);
                        }
                        result += next;
                        next = this._read_template();
                    }
                    if (this._until_after) {
                        result += this._input.readUntilAfter(this._until_pattern);
                    }
                    return result;
                };
                TemplatablePattern.prototype.__set_templated_pattern = function() {
                    var items = [];
                    if (!this._disabled.php) {
                        items.push(this.__patterns.php._starting_pattern.source);
                    }
                    if (!this._disabled.handlebars) {
                        items.push(this.__patterns.handlebars._starting_pattern.source);
                    }
                    if (!this._disabled.erb) {
                        items.push(this.__patterns.erb._starting_pattern.source);
                    }
                    if (!this._disabled.django) {
                        items.push(this.__patterns.django._starting_pattern.source);
                        // The starting pattern for django is more complex because it has different
                        // patterns for value, comment, and other sections
                        items.push(this.__patterns.django_value._starting_pattern.source);
                        items.push(this.__patterns.django_comment._starting_pattern.source);
                    }
                    if (!this._disabled.smarty) {
                        items.push(this.__patterns.smarty._starting_pattern.source);
                    }
                    if (this._until_pattern) {
                        items.push(this._until_pattern.source);
                    }
                    this.__template_pattern = this._input.get_regexp("(?:" + items.join("|") + ")");
                };
                TemplatablePattern.prototype._read_template = function() {
                    var resulting_string = "";
                    var c = this._input.peek();
                    if (c === "<") {
                        var peek1 = this._input.peek(1);
                        //if we're in a comment, do something special
                        // We treat all comments as literals, even more than preformatted tags
                        // we just look for the appropriate close tag
                        if (!this._disabled.php && !this._excluded.php && peek1 === "?") {
                            resulting_string = resulting_string || this.__patterns.php.read();
                        }
                        if (!this._disabled.erb && !this._excluded.erb && peek1 === "%") {
                            resulting_string = resulting_string || this.__patterns.erb.read();
                        }
                    } else if (c === "{") {
                        if (!this._disabled.handlebars && !this._excluded.handlebars) {
                            resulting_string = resulting_string || this.__patterns.handlebars_comment.read();
                            resulting_string = resulting_string || this.__patterns.handlebars_unescaped.read();
                            resulting_string = resulting_string || this.__patterns.handlebars.read();
                        }
                        if (!this._disabled.django) {
                            // django coflicts with handlebars a bit.
                            if (!this._excluded.django && !this._excluded.handlebars) {
                                resulting_string = resulting_string || this.__patterns.django_value.read();
                            }
                            if (!this._excluded.django) {
                                resulting_string = resulting_string || this.__patterns.django_comment.read();
                                resulting_string = resulting_string || this.__patterns.django.read();
                            }
                        }
                        if (!this._disabled.smarty) {
                            // smarty cannot be enabled with django or handlebars enabled
                            if (this._disabled.django && this._disabled.handlebars) {
                                resulting_string = resulting_string || this.__patterns.smarty_comment.read();
                                resulting_string = resulting_string || this.__patterns.smarty_literal.read();
                                resulting_string = resulting_string || this.__patterns.smarty.read();
                            }
                        }
                    }
                    return resulting_string;
                };
                module.exports.TemplatablePattern = TemplatablePattern;
            /***/ },
            ,
            ,
            ,
            /* 18 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_71910__) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var Beautifier = __nested_webpack_require_71910__(19).Beautifier, Options = __nested_webpack_require_71910__(20).Options;
                function style_html(html_source, options, js_beautify, css_beautify) {
                    var beautifier = new Beautifier(html_source, options, js_beautify, css_beautify);
                    return beautifier.beautify();
                }
                module.exports = style_html;
                module.exports.defaultOptions = function() {
                    return new Options();
                };
            /***/ },
            /* 19 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_73746__) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var Options = __nested_webpack_require_73746__(20).Options;
                var Output = __nested_webpack_require_73746__(2).Output;
                var Tokenizer = __nested_webpack_require_73746__(21).Tokenizer;
                var TOKEN = __nested_webpack_require_73746__(21).TOKEN;
                var lineBreak = /\r\n|[\r\n]/;
                var allLineBreaks = /\r\n|[\r\n]/g;
                var Printer = function(options, base_indent_string) {
                    this.indent_level = 0;
                    this.alignment_size = 0;
                    this.max_preserve_newlines = options.max_preserve_newlines;
                    this.preserve_newlines = options.preserve_newlines;
                    this._output = new Output(options, base_indent_string);
                };
                Printer.prototype.current_line_has_match = function(pattern) {
                    return this._output.current_line.has_match(pattern);
                };
                Printer.prototype.set_space_before_token = function(value, non_breaking) {
                    this._output.space_before_token = value;
                    this._output.non_breaking_space = non_breaking;
                };
                Printer.prototype.set_wrap_point = function() {
                    this._output.set_indent(this.indent_level, this.alignment_size);
                    this._output.set_wrap_point();
                };
                Printer.prototype.add_raw_token = function(token) {
                    this._output.add_raw_token(token);
                };
                Printer.prototype.print_preserved_newlines = function(raw_token) {
                    var newlines = 0;
                    if (raw_token.type !== TOKEN.TEXT && raw_token.previous.type !== TOKEN.TEXT) {
                        newlines = raw_token.newlines ? 1 : 0;
                    }
                    if (this.preserve_newlines) {
                        newlines = raw_token.newlines < this.max_preserve_newlines + 1 ? raw_token.newlines : this.max_preserve_newlines + 1;
                    }
                    for(var n = 0; n < newlines; n++){
                        this.print_newline(n > 0);
                    }
                    return newlines !== 0;
                };
                Printer.prototype.traverse_whitespace = function(raw_token) {
                    if (raw_token.whitespace_before || raw_token.newlines) {
                        if (!this.print_preserved_newlines(raw_token)) {
                            this._output.space_before_token = true;
                        }
                        return true;
                    }
                    return false;
                };
                Printer.prototype.previous_token_wrapped = function() {
                    return this._output.previous_token_wrapped;
                };
                Printer.prototype.print_newline = function(force) {
                    this._output.add_new_line(force);
                };
                Printer.prototype.print_token = function(token) {
                    if (token.text) {
                        this._output.set_indent(this.indent_level, this.alignment_size);
                        this._output.add_token(token.text);
                    }
                };
                Printer.prototype.indent = function() {
                    this.indent_level++;
                };
                Printer.prototype.get_full_indent = function(level) {
                    level = this.indent_level + (level || 0);
                    if (level < 1) {
                        return "";
                    }
                    return this._output.get_indent_string(level);
                };
                var get_type_attribute = function(start_token) {
                    var result = null;
                    var raw_token = start_token.next;
                    // Search attributes for a type attribute
                    while(raw_token.type !== TOKEN.EOF && start_token.closed !== raw_token){
                        if (raw_token.type === TOKEN.ATTRIBUTE && raw_token.text === "type") {
                            if (raw_token.next && raw_token.next.type === TOKEN.EQUALS && raw_token.next.next && raw_token.next.next.type === TOKEN.VALUE) {
                                result = raw_token.next.next.text;
                            }
                            break;
                        }
                        raw_token = raw_token.next;
                    }
                    return result;
                };
                var get_custom_beautifier_name = function(tag_check, raw_token) {
                    var typeAttribute = null;
                    var result = null;
                    if (!raw_token.closed) {
                        return null;
                    }
                    if (tag_check === "script") {
                        typeAttribute = "text/javascript";
                    } else if (tag_check === "style") {
                        typeAttribute = "text/css";
                    }
                    typeAttribute = get_type_attribute(raw_token) || typeAttribute;
                    // For script and style tags that have a type attribute, only enable custom beautifiers for matching values
                    // For those without a type attribute use default;
                    if (typeAttribute.search("text/css") > -1) {
                        result = "css";
                    } else if (typeAttribute.search(/module|((text|application|dojo)\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\+)?json|method|aspect))/) > -1) {
                        result = "javascript";
                    } else if (typeAttribute.search(/(text|application|dojo)\/(x-)?(html)/) > -1) {
                        result = "html";
                    } else if (typeAttribute.search(/test\/null/) > -1) {
                        // Test only mime-type for testing the beautifier when null is passed as beautifing function
                        result = "null";
                    }
                    return result;
                };
                function in_array(what, arr) {
                    return arr.indexOf(what) !== -1;
                }
                function TagFrame(parent, parser_token, indent_level) {
                    this.parent = parent || null;
                    this.tag = parser_token ? parser_token.tag_name : "";
                    this.indent_level = indent_level || 0;
                    this.parser_token = parser_token || null;
                }
                function TagStack(printer) {
                    this._printer = printer;
                    this._current_frame = null;
                }
                TagStack.prototype.get_parser_token = function() {
                    return this._current_frame ? this._current_frame.parser_token : null;
                };
                TagStack.prototype.record_tag = function(parser_token) {
                    var new_frame = new TagFrame(this._current_frame, parser_token, this._printer.indent_level);
                    this._current_frame = new_frame;
                };
                TagStack.prototype._try_pop_frame = function(frame) {
                    var parser_token = null;
                    if (frame) {
                        parser_token = frame.parser_token;
                        this._printer.indent_level = frame.indent_level;
                        this._current_frame = frame.parent;
                    }
                    return parser_token;
                };
                TagStack.prototype._get_frame = function(tag_list, stop_list) {
                    var frame = this._current_frame;
                    while(frame){
                        if (tag_list.indexOf(frame.tag) !== -1) {
                            break;
                        } else if (stop_list && stop_list.indexOf(frame.tag) !== -1) {
                            frame = null;
                            break;
                        }
                        frame = frame.parent;
                    }
                    return frame;
                };
                TagStack.prototype.try_pop = function(tag, stop_list) {
                    var frame = this._get_frame([
                        tag
                    ], stop_list);
                    return this._try_pop_frame(frame);
                };
                TagStack.prototype.indent_to_tag = function(tag_list) {
                    var frame = this._get_frame(tag_list);
                    if (frame) {
                        this._printer.indent_level = frame.indent_level;
                    }
                };
                function Beautifier(source_text, options, js_beautify, css_beautify) {
                    //Wrapper function to invoke all the necessary constructors and deal with the output.
                    this._source_text = source_text || "";
                    options = options || {};
                    this._js_beautify = js_beautify;
                    this._css_beautify = css_beautify;
                    this._tag_stack = null;
                    // Allow the setting of language/file-type specific options
                    // with inheritance of overall settings
                    var optionHtml = new Options(options, "html");
                    this._options = optionHtml;
                    this._is_wrap_attributes_force = this._options.wrap_attributes.substr(0, "force".length) === "force";
                    this._is_wrap_attributes_force_expand_multiline = this._options.wrap_attributes === "force-expand-multiline";
                    this._is_wrap_attributes_force_aligned = this._options.wrap_attributes === "force-aligned";
                    this._is_wrap_attributes_aligned_multiple = this._options.wrap_attributes === "aligned-multiple";
                    this._is_wrap_attributes_preserve = this._options.wrap_attributes.substr(0, "preserve".length) === "preserve";
                    this._is_wrap_attributes_preserve_aligned = this._options.wrap_attributes === "preserve-aligned";
                }
                Beautifier.prototype.beautify = function() {
                    // if disabled, return the input unchanged.
                    if (this._options.disabled) {
                        return this._source_text;
                    }
                    var source_text = this._source_text;
                    var eol = this._options.eol;
                    if (this._options.eol === "auto") {
                        eol = "\n";
                        if (source_text && lineBreak.test(source_text)) {
                            eol = source_text.match(lineBreak)[0];
                        }
                    }
                    // HACK: newline parsing inconsistent. This brute force normalizes the input.
                    source_text = source_text.replace(allLineBreaks, "\n");
                    var baseIndentString = source_text.match(/^[\t ]*/)[0];
                    var last_token = {
                        text: "",
                        type: ""
                    };
                    var last_tag_token = new TagOpenParserToken();
                    var printer = new Printer(this._options, baseIndentString);
                    var tokens = new Tokenizer(source_text, this._options).tokenize();
                    this._tag_stack = new TagStack(printer);
                    var parser_token = null;
                    var raw_token = tokens.next();
                    while(raw_token.type !== TOKEN.EOF){
                        if (raw_token.type === TOKEN.TAG_OPEN || raw_token.type === TOKEN.COMMENT) {
                            parser_token = this._handle_tag_open(printer, raw_token, last_tag_token, last_token, tokens);
                            last_tag_token = parser_token;
                        } else if (raw_token.type === TOKEN.ATTRIBUTE || raw_token.type === TOKEN.EQUALS || raw_token.type === TOKEN.VALUE || raw_token.type === TOKEN.TEXT && !last_tag_token.tag_complete) {
                            parser_token = this._handle_inside_tag(printer, raw_token, last_tag_token, last_token);
                        } else if (raw_token.type === TOKEN.TAG_CLOSE) {
                            parser_token = this._handle_tag_close(printer, raw_token, last_tag_token);
                        } else if (raw_token.type === TOKEN.TEXT) {
                            parser_token = this._handle_text(printer, raw_token, last_tag_token);
                        } else {
                            // This should never happen, but if it does. Print the raw token
                            printer.add_raw_token(raw_token);
                        }
                        last_token = parser_token;
                        raw_token = tokens.next();
                    }
                    var sweet_code = printer._output.get_code(eol);
                    return sweet_code;
                };
                Beautifier.prototype._handle_tag_close = function(printer, raw_token, last_tag_token) {
                    var parser_token = {
                        text: raw_token.text,
                        type: raw_token.type
                    };
                    printer.alignment_size = 0;
                    last_tag_token.tag_complete = true;
                    printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== "", true);
                    if (last_tag_token.is_unformatted) {
                        printer.add_raw_token(raw_token);
                    } else {
                        if (last_tag_token.tag_start_char === "<") {
                            printer.set_space_before_token(raw_token.text[0] === "/", true); // space before />, no space before >
                            if (this._is_wrap_attributes_force_expand_multiline && last_tag_token.has_wrapped_attrs) {
                                printer.print_newline(false);
                            }
                        }
                        printer.print_token(raw_token);
                    }
                    if (last_tag_token.indent_content && !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {
                        printer.indent();
                        // only indent once per opened tag
                        last_tag_token.indent_content = false;
                    }
                    if (!last_tag_token.is_inline_element && !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {
                        printer.set_wrap_point();
                    }
                    return parser_token;
                };
                Beautifier.prototype._handle_inside_tag = function(printer, raw_token, last_tag_token, last_token) {
                    var wrapped = last_tag_token.has_wrapped_attrs;
                    var parser_token = {
                        text: raw_token.text,
                        type: raw_token.type
                    };
                    printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== "", true);
                    if (last_tag_token.is_unformatted) {
                        printer.add_raw_token(raw_token);
                    } else if (last_tag_token.tag_start_char === "{" && raw_token.type === TOKEN.TEXT) {
                        // For the insides of handlebars allow newlines or a single space between open and contents
                        if (printer.print_preserved_newlines(raw_token)) {
                            raw_token.newlines = 0;
                            printer.add_raw_token(raw_token);
                        } else {
                            printer.print_token(raw_token);
                        }
                    } else {
                        if (raw_token.type === TOKEN.ATTRIBUTE) {
                            printer.set_space_before_token(true);
                        } else if (raw_token.type === TOKEN.EQUALS) {
                            printer.set_space_before_token(false);
                        } else if (raw_token.type === TOKEN.VALUE && raw_token.previous.type === TOKEN.EQUALS) {
                            printer.set_space_before_token(false);
                        }
                        if (raw_token.type === TOKEN.ATTRIBUTE && last_tag_token.tag_start_char === "<") {
                            if (this._is_wrap_attributes_preserve || this._is_wrap_attributes_preserve_aligned) {
                                printer.traverse_whitespace(raw_token);
                                wrapped = wrapped || raw_token.newlines !== 0;
                            }
                            // Wrap for 'force' options, and if the number of attributes is at least that specified in 'wrap_attributes_min_attrs':
                            // 1. always wrap the second and beyond attributes
                            // 2. wrap the first attribute only if 'force-expand-multiline' is specified
                            if (this._is_wrap_attributes_force && last_tag_token.attr_count >= this._options.wrap_attributes_min_attrs && (last_token.type !== TOKEN.TAG_OPEN || // ie. second attribute and beyond
                            this._is_wrap_attributes_force_expand_multiline)) {
                                printer.print_newline(false);
                                wrapped = true;
                            }
                        }
                        printer.print_token(raw_token);
                        wrapped = wrapped || printer.previous_token_wrapped();
                        last_tag_token.has_wrapped_attrs = wrapped;
                    }
                    return parser_token;
                };
                Beautifier.prototype._handle_text = function(printer, raw_token, last_tag_token) {
                    var parser_token = {
                        text: raw_token.text,
                        type: "TK_CONTENT"
                    };
                    if (last_tag_token.custom_beautifier_name) {
                        this._print_custom_beatifier_text(printer, raw_token, last_tag_token);
                    } else if (last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) {
                        printer.add_raw_token(raw_token);
                    } else {
                        printer.traverse_whitespace(raw_token);
                        printer.print_token(raw_token);
                    }
                    return parser_token;
                };
                Beautifier.prototype._print_custom_beatifier_text = function(printer, raw_token, last_tag_token) {
                    var local = this;
                    if (raw_token.text !== "") {
                        var text = raw_token.text, _beautifier, script_indent_level = 1, pre = "", post = "";
                        if (last_tag_token.custom_beautifier_name === "javascript" && typeof this._js_beautify === "function") {
                            _beautifier = this._js_beautify;
                        } else if (last_tag_token.custom_beautifier_name === "css" && typeof this._css_beautify === "function") {
                            _beautifier = this._css_beautify;
                        } else if (last_tag_token.custom_beautifier_name === "html") {
                            _beautifier = function(html_source, options) {
                                var beautifier = new Beautifier(html_source, options, local._js_beautify, local._css_beautify);
                                return beautifier.beautify();
                            };
                        }
                        if (this._options.indent_scripts === "keep") {
                            script_indent_level = 0;
                        } else if (this._options.indent_scripts === "separate") {
                            script_indent_level = -printer.indent_level;
                        }
                        var indentation = printer.get_full_indent(script_indent_level);
                        // if there is at least one empty line at the end of this text, strip it
                        // we'll be adding one back after the text but before the containing tag.
                        text = text.replace(/\n[ \t]*$/, "");
                        // Handle the case where content is wrapped in a comment or cdata.
                        if (last_tag_token.custom_beautifier_name !== "html" && text[0] === "<" && text.match(/^(<!--|<!\[CDATA\[)/)) {
                            var matched = /^(<!--[^\n]*|<!\[CDATA\[)(\n?)([ \t\n]*)([\s\S]*)(-->|]]>)$/.exec(text);
                            // if we start to wrap but don't finish, print raw
                            if (!matched) {
                                printer.add_raw_token(raw_token);
                                return;
                            }
                            pre = indentation + matched[1] + "\n";
                            text = matched[4];
                            if (matched[5]) {
                                post = indentation + matched[5];
                            }
                            // if there is at least one empty line at the end of this text, strip it
                            // we'll be adding one back after the text but before the containing tag.
                            text = text.replace(/\n[ \t]*$/, "");
                            if (matched[2] || matched[3].indexOf("\n") !== -1) {
                                // if the first line of the non-comment text has spaces
                                // use that as the basis for indenting in null case.
                                matched = matched[3].match(/[ \t]+$/);
                                if (matched) {
                                    raw_token.whitespace_before = matched[0];
                                }
                            }
                        }
                        if (text) {
                            if (_beautifier) {
                                // call the Beautifier if avaliable
                                var Child_options = function() {
                                    this.eol = "\n";
                                };
                                Child_options.prototype = this._options.raw_options;
                                var child_options = new Child_options();
                                text = _beautifier(indentation + text, child_options);
                            } else {
                                // simply indent the string otherwise
                                var white = raw_token.whitespace_before;
                                if (white) {
                                    text = text.replace(new RegExp("\n(" + white + ")?", "g"), "\n");
                                }
                                text = indentation + text.replace(/\n/g, "\n" + indentation);
                            }
                        }
                        if (pre) {
                            if (!text) {
                                text = pre + post;
                            } else {
                                text = pre + text + "\n" + post;
                            }
                        }
                        printer.print_newline(false);
                        if (text) {
                            raw_token.text = text;
                            raw_token.whitespace_before = "";
                            raw_token.newlines = 0;
                            printer.add_raw_token(raw_token);
                            printer.print_newline(true);
                        }
                    }
                };
                Beautifier.prototype._handle_tag_open = function(printer, raw_token, last_tag_token, last_token, tokens) {
                    var parser_token = this._get_tag_open_token(raw_token);
                    if ((last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) && !last_tag_token.is_empty_element && raw_token.type === TOKEN.TAG_OPEN && !parser_token.is_start_tag) {
                        // End element tags for unformatted or content_unformatted elements
                        // are printed raw to keep any newlines inside them exactly the same.
                        printer.add_raw_token(raw_token);
                        parser_token.start_tag_token = this._tag_stack.try_pop(parser_token.tag_name);
                    } else {
                        printer.traverse_whitespace(raw_token);
                        this._set_tag_position(printer, raw_token, parser_token, last_tag_token, last_token);
                        if (!parser_token.is_inline_element) {
                            printer.set_wrap_point();
                        }
                        printer.print_token(raw_token);
                    }
                    // count the number of attributes
                    if (parser_token.is_start_tag && this._is_wrap_attributes_force) {
                        var peek_index = 0;
                        var peek_token;
                        do {
                            peek_token = tokens.peek(peek_index);
                            if (peek_token.type === TOKEN.ATTRIBUTE) {
                                parser_token.attr_count += 1;
                            }
                            peek_index += 1;
                        }while (peek_token.type !== TOKEN.EOF && peek_token.type !== TOKEN.TAG_CLOSE);
                    }
                    //indent attributes an auto, forced, aligned or forced-align line-wrap
                    if (this._is_wrap_attributes_force_aligned || this._is_wrap_attributes_aligned_multiple || this._is_wrap_attributes_preserve_aligned) {
                        parser_token.alignment_size = raw_token.text.length + 1;
                    }
                    if (!parser_token.tag_complete && !parser_token.is_unformatted) {
                        printer.alignment_size = parser_token.alignment_size;
                    }
                    return parser_token;
                };
                var TagOpenParserToken = function(parent, raw_token) {
                    this.parent = parent || null;
                    this.text = "";
                    this.type = "TK_TAG_OPEN";
                    this.tag_name = "";
                    this.is_inline_element = false;
                    this.is_unformatted = false;
                    this.is_content_unformatted = false;
                    this.is_empty_element = false;
                    this.is_start_tag = false;
                    this.is_end_tag = false;
                    this.indent_content = false;
                    this.multiline_content = false;
                    this.custom_beautifier_name = null;
                    this.start_tag_token = null;
                    this.attr_count = 0;
                    this.has_wrapped_attrs = false;
                    this.alignment_size = 0;
                    this.tag_complete = false;
                    this.tag_start_char = "";
                    this.tag_check = "";
                    if (!raw_token) {
                        this.tag_complete = true;
                    } else {
                        var tag_check_match;
                        this.tag_start_char = raw_token.text[0];
                        this.text = raw_token.text;
                        if (this.tag_start_char === "<") {
                            tag_check_match = raw_token.text.match(/^<([^\s>]*)/);
                            this.tag_check = tag_check_match ? tag_check_match[1] : "";
                        } else {
                            tag_check_match = raw_token.text.match(/^{{~?(?:[\^]|#\*?)?([^\s}]+)/);
                            this.tag_check = tag_check_match ? tag_check_match[1] : "";
                            // handle "{{#> myPartial}}" or "{{~#> myPartial}}"
                            if ((raw_token.text.startsWith("{{#>") || raw_token.text.startsWith("{{~#>")) && this.tag_check[0] === ">") {
                                if (this.tag_check === ">" && raw_token.next !== null) {
                                    this.tag_check = raw_token.next.text.split(" ")[0];
                                } else {
                                    this.tag_check = raw_token.text.split(">")[1];
                                }
                            }
                        }
                        this.tag_check = this.tag_check.toLowerCase();
                        if (raw_token.type === TOKEN.COMMENT) {
                            this.tag_complete = true;
                        }
                        this.is_start_tag = this.tag_check.charAt(0) !== "/";
                        this.tag_name = !this.is_start_tag ? this.tag_check.substr(1) : this.tag_check;
                        this.is_end_tag = !this.is_start_tag || raw_token.closed && raw_token.closed.text === "/>";
                        // if whitespace handler ~ included (i.e. {{~#if true}}), handlebars tags start at pos 3 not pos 2
                        var handlebar_starts = 2;
                        if (this.tag_start_char === "{" && this.text.length >= 3) {
                            if (this.text.charAt(2) === "~") {
                                handlebar_starts = 3;
                            }
                        }
                        // handlebars tags that don't start with # or ^ are single_tags, and so also start and end.
                        this.is_end_tag = this.is_end_tag || this.tag_start_char === "{" && (this.text.length < 3 || /[^#\^]/.test(this.text.charAt(handlebar_starts)));
                    }
                };
                Beautifier.prototype._get_tag_open_token = function(raw_token) {
                    var parser_token = new TagOpenParserToken(this._tag_stack.get_parser_token(), raw_token);
                    parser_token.alignment_size = this._options.wrap_attributes_indent_size;
                    parser_token.is_end_tag = parser_token.is_end_tag || in_array(parser_token.tag_check, this._options.void_elements);
                    parser_token.is_empty_element = parser_token.tag_complete || parser_token.is_start_tag && parser_token.is_end_tag;
                    parser_token.is_unformatted = !parser_token.tag_complete && in_array(parser_token.tag_check, this._options.unformatted);
                    parser_token.is_content_unformatted = !parser_token.is_empty_element && in_array(parser_token.tag_check, this._options.content_unformatted);
                    parser_token.is_inline_element = in_array(parser_token.tag_name, this._options.inline) || parser_token.tag_name.includes("-") || parser_token.tag_start_char === "{";
                    return parser_token;
                };
                Beautifier.prototype._set_tag_position = function(printer, raw_token, parser_token, last_tag_token, last_token) {
                    if (!parser_token.is_empty_element) {
                        if (parser_token.is_end_tag) {
                            parser_token.start_tag_token = this._tag_stack.try_pop(parser_token.tag_name); //remove it and all ancestors
                        } else {
                            // check if this tag is starting an element that has optional end element
                            // and do an ending needed
                            if (this._do_optional_end_element(parser_token)) {
                                if (!parser_token.is_inline_element) {
                                    printer.print_newline(false);
                                }
                            }
                            this._tag_stack.record_tag(parser_token); //push it on the tag stack
                            if ((parser_token.tag_name === "script" || parser_token.tag_name === "style") && !(parser_token.is_unformatted || parser_token.is_content_unformatted)) {
                                parser_token.custom_beautifier_name = get_custom_beautifier_name(parser_token.tag_check, raw_token);
                            }
                        }
                    }
                    if (in_array(parser_token.tag_check, this._options.extra_liners)) {
                        printer.print_newline(false);
                        if (!printer._output.just_added_blankline()) {
                            printer.print_newline(true);
                        }
                    }
                    if (parser_token.is_empty_element) {
                        // if you hit an else case, reset the indent level if you are inside an:
                        // 'if', 'unless', or 'each' block.
                        if (parser_token.tag_start_char === "{" && parser_token.tag_check === "else") {
                            this._tag_stack.indent_to_tag([
                                "if",
                                "unless",
                                "each"
                            ]);
                            parser_token.indent_content = true;
                            // Don't add a newline if opening {{#if}} tag is on the current line
                            var foundIfOnCurrentLine = printer.current_line_has_match(/{{#if/);
                            if (!foundIfOnCurrentLine) {
                                printer.print_newline(false);
                            }
                        }
                        // Don't add a newline before elements that should remain where they are.
                        if (parser_token.tag_name === "!--" && last_token.type === TOKEN.TAG_CLOSE && last_tag_token.is_end_tag && parser_token.text.indexOf("\n") === -1) {
                        //Do nothing. Leave comments on same line.
                        } else {
                            if (!(parser_token.is_inline_element || parser_token.is_unformatted)) {
                                printer.print_newline(false);
                            }
                            this._calcluate_parent_multiline(printer, parser_token);
                        }
                    } else if (parser_token.is_end_tag) {
                        var do_end_expand = false;
                        // deciding whether a block is multiline should not be this hard
                        do_end_expand = parser_token.start_tag_token && parser_token.start_tag_token.multiline_content;
                        do_end_expand = do_end_expand || !parser_token.is_inline_element && !(last_tag_token.is_inline_element || last_tag_token.is_unformatted) && !(last_token.type === TOKEN.TAG_CLOSE && parser_token.start_tag_token === last_tag_token) && last_token.type !== "TK_CONTENT";
                        if (parser_token.is_content_unformatted || parser_token.is_unformatted) {
                            do_end_expand = false;
                        }
                        if (do_end_expand) {
                            printer.print_newline(false);
                        }
                    } else {
                        parser_token.indent_content = !parser_token.custom_beautifier_name;
                        if (parser_token.tag_start_char === "<") {
                            if (parser_token.tag_name === "html") {
                                parser_token.indent_content = this._options.indent_inner_html;
                            } else if (parser_token.tag_name === "head") {
                                parser_token.indent_content = this._options.indent_head_inner_html;
                            } else if (parser_token.tag_name === "body") {
                                parser_token.indent_content = this._options.indent_body_inner_html;
                            }
                        }
                        if (!(parser_token.is_inline_element || parser_token.is_unformatted) && (last_token.type !== "TK_CONTENT" || parser_token.is_content_unformatted)) {
                            printer.print_newline(false);
                        }
                        this._calcluate_parent_multiline(printer, parser_token);
                    }
                };
                Beautifier.prototype._calcluate_parent_multiline = function(printer, parser_token) {
                    if (parser_token.parent && printer._output.just_added_newline() && !((parser_token.is_inline_element || parser_token.is_unformatted) && parser_token.parent.is_inline_element)) {
                        parser_token.parent.multiline_content = true;
                    }
                };
                //To be used for <p> tag special case:
                var p_closers = [
                    "address",
                    "article",
                    "aside",
                    "blockquote",
                    "details",
                    "div",
                    "dl",
                    "fieldset",
                    "figcaption",
                    "figure",
                    "footer",
                    "form",
                    "h1",
                    "h2",
                    "h3",
                    "h4",
                    "h5",
                    "h6",
                    "header",
                    "hr",
                    "main",
                    "menu",
                    "nav",
                    "ol",
                    "p",
                    "pre",
                    "section",
                    "table",
                    "ul"
                ];
                var p_parent_excludes = [
                    "a",
                    "audio",
                    "del",
                    "ins",
                    "map",
                    "noscript",
                    "video"
                ];
                Beautifier.prototype._do_optional_end_element = function(parser_token) {
                    var result = null;
                    // NOTE: cases of "if there is no more content in the parent element"
                    // are handled automatically by the beautifier.
                    // It assumes parent or ancestor close tag closes all children.
                    // https://www.w3.org/TR/html5/syntax.html#optional-tags
                    if (parser_token.is_empty_element || !parser_token.is_start_tag || !parser_token.parent) {
                        return;
                    }
                    if (parser_token.tag_name === "body") {
                        // A head element’s end tag may be omitted if the head element is not immediately followed by a space character or a comment.
                        result = result || this._tag_stack.try_pop("head");
                    //} else if (parser_token.tag_name === 'body') {
                    // DONE: A body element’s end tag may be omitted if the body element is not immediately followed by a comment.
                    } else if (parser_token.tag_name === "li") {
                        // An li element’s end tag may be omitted if the li element is immediately followed by another li element or if there is no more content in the parent element.
                        result = result || this._tag_stack.try_pop("li", [
                            "ol",
                            "ul",
                            "menu"
                        ]);
                    } else if (parser_token.tag_name === "dd" || parser_token.tag_name === "dt") {
                        // A dd element’s end tag may be omitted if the dd element is immediately followed by another dd element or a dt element, or if there is no more content in the parent element.
                        // A dt element’s end tag may be omitted if the dt element is immediately followed by another dt element or a dd element.
                        result = result || this._tag_stack.try_pop("dt", [
                            "dl"
                        ]);
                        result = result || this._tag_stack.try_pop("dd", [
                            "dl"
                        ]);
                    } else if (parser_token.parent.tag_name === "p" && p_closers.indexOf(parser_token.tag_name) !== -1) {
                        // IMPORTANT: this else-if works because p_closers has no overlap with any other element we look for in this method
                        // check for the parent element is an HTML element that is not an <a>, <audio>, <del>, <ins>, <map>, <noscript>, or <video> element,  or an autonomous custom element.
                        // To do this right, this needs to be coded as an inclusion of the inverse of the exclusion above.
                        // But to start with (if we ignore "autonomous custom elements") the exclusion would be fine.
                        var p_parent = parser_token.parent.parent;
                        if (!p_parent || p_parent_excludes.indexOf(p_parent.tag_name) === -1) {
                            result = result || this._tag_stack.try_pop("p");
                        }
                    } else if (parser_token.tag_name === "rp" || parser_token.tag_name === "rt") {
                        // An rt element’s end tag may be omitted if the rt element is immediately followed by an rt or rp element, or if there is no more content in the parent element.
                        // An rp element’s end tag may be omitted if the rp element is immediately followed by an rt or rp element, or if there is no more content in the parent element.
                        result = result || this._tag_stack.try_pop("rt", [
                            "ruby",
                            "rtc"
                        ]);
                        result = result || this._tag_stack.try_pop("rp", [
                            "ruby",
                            "rtc"
                        ]);
                    } else if (parser_token.tag_name === "optgroup") {
                        // An optgroup element’s end tag may be omitted if the optgroup element is immediately followed by another optgroup element, or if there is no more content in the parent element.
                        // An option element’s end tag may be omitted if the option element is immediately followed by another option element, or if it is immediately followed by an optgroup element, or if there is no more content in the parent element.
                        result = result || this._tag_stack.try_pop("optgroup", [
                            "select"
                        ]);
                    //result = result || this._tag_stack.try_pop('option', ['select']);
                    } else if (parser_token.tag_name === "option") {
                        // An option element’s end tag may be omitted if the option element is immediately followed by another option element, or if it is immediately followed by an optgroup element, or if there is no more content in the parent element.
                        result = result || this._tag_stack.try_pop("option", [
                            "select",
                            "datalist",
                            "optgroup"
                        ]);
                    } else if (parser_token.tag_name === "colgroup") {
                        // DONE: A colgroup element’s end tag may be omitted if the colgroup element is not immediately followed by a space character or a comment.
                        // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
                        result = result || this._tag_stack.try_pop("caption", [
                            "table"
                        ]);
                    } else if (parser_token.tag_name === "thead") {
                        // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.
                        // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
                        result = result || this._tag_stack.try_pop("caption", [
                            "table"
                        ]);
                        result = result || this._tag_stack.try_pop("colgroup", [
                            "table"
                        ]);
                    //} else if (parser_token.tag_name === 'caption') {
                    // DONE: A caption element’s end tag may be omitted if the caption element is not immediately followed by a space character or a comment.
                    } else if (parser_token.tag_name === "tbody" || parser_token.tag_name === "tfoot") {
                        // A thead element’s end tag may be omitted if the thead element is immediately followed by a tbody or tfoot element.
                        // A tbody element’s end tag may be omitted if the tbody element is immediately followed by a tbody or tfoot element, or if there is no more content in the parent element.
                        // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.
                        // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
                        result = result || this._tag_stack.try_pop("caption", [
                            "table"
                        ]);
                        result = result || this._tag_stack.try_pop("colgroup", [
                            "table"
                        ]);
                        result = result || this._tag_stack.try_pop("thead", [
                            "table"
                        ]);
                        result = result || this._tag_stack.try_pop("tbody", [
                            "table"
                        ]);
                    //} else if (parser_token.tag_name === 'tfoot') {
                    // DONE: A tfoot element’s end tag may be omitted if there is no more content in the parent element.
                    } else if (parser_token.tag_name === "tr") {
                        // A tr element’s end tag may be omitted if the tr element is immediately followed by another tr element, or if there is no more content in the parent element.
                        // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.
                        // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
                        result = result || this._tag_stack.try_pop("caption", [
                            "table"
                        ]);
                        result = result || this._tag_stack.try_pop("colgroup", [
                            "table"
                        ]);
                        result = result || this._tag_stack.try_pop("tr", [
                            "table",
                            "thead",
                            "tbody",
                            "tfoot"
                        ]);
                    } else if (parser_token.tag_name === "th" || parser_token.tag_name === "td") {
                        // A td element’s end tag may be omitted if the td element is immediately followed by a td or th element, or if there is no more content in the parent element.
                        // A th element’s end tag may be omitted if the th element is immediately followed by a td or th element, or if there is no more content in the parent element.
                        result = result || this._tag_stack.try_pop("td", [
                            "table",
                            "thead",
                            "tbody",
                            "tfoot",
                            "tr"
                        ]);
                        result = result || this._tag_stack.try_pop("th", [
                            "table",
                            "thead",
                            "tbody",
                            "tfoot",
                            "tr"
                        ]);
                    }
                    // Start element omission not handled currently
                    // A head element’s start tag may be omitted if the element is empty, or if the first thing inside the head element is an element.
                    // A tbody element’s start tag may be omitted if the first thing inside the tbody element is a tr element, and if the element is not immediately preceded by a tbody, thead, or tfoot element whose end tag has been omitted. (It can’t be omitted if the element is empty.)
                    // A colgroup element’s start tag may be omitted if the first thing inside the colgroup element is a col element, and if the element is not immediately preceded by another colgroup element whose end tag has been omitted. (It can’t be omitted if the element is empty.)
                    // Fix up the parent of the parser token
                    parser_token.parent = this._tag_stack.get_parser_token();
                    return result;
                };
                module.exports.Beautifier = Beautifier;
            /***/ },
            /* 20 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_124288__) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var BaseOptions = __nested_webpack_require_124288__(6).Options;
                function Options(options) {
                    BaseOptions.call(this, options, "html");
                    if (this.templating.length === 1 && this.templating[0] === "auto") {
                        this.templating = [
                            "django",
                            "erb",
                            "handlebars",
                            "php"
                        ];
                    }
                    this.indent_inner_html = this._get_boolean("indent_inner_html");
                    this.indent_body_inner_html = this._get_boolean("indent_body_inner_html", true);
                    this.indent_head_inner_html = this._get_boolean("indent_head_inner_html", true);
                    this.indent_handlebars = this._get_boolean("indent_handlebars", true);
                    this.wrap_attributes = this._get_selection("wrap_attributes", [
                        "auto",
                        "force",
                        "force-aligned",
                        "force-expand-multiline",
                        "aligned-multiple",
                        "preserve",
                        "preserve-aligned"
                    ]);
                    this.wrap_attributes_min_attrs = this._get_number("wrap_attributes_min_attrs", 2);
                    this.wrap_attributes_indent_size = this._get_number("wrap_attributes_indent_size", this.indent_size);
                    this.extra_liners = this._get_array("extra_liners", [
                        "head",
                        "body",
                        "/html"
                    ]);
                    // Block vs inline elements
                    // https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements
                    // https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements
                    // https://www.w3.org/TR/html5/dom.html#phrasing-content
                    this.inline = this._get_array("inline", [
                        "a",
                        "abbr",
                        "area",
                        "audio",
                        "b",
                        "bdi",
                        "bdo",
                        "br",
                        "button",
                        "canvas",
                        "cite",
                        "code",
                        "data",
                        "datalist",
                        "del",
                        "dfn",
                        "em",
                        "embed",
                        "i",
                        "iframe",
                        "img",
                        "input",
                        "ins",
                        "kbd",
                        "keygen",
                        "label",
                        "map",
                        "mark",
                        "math",
                        "meter",
                        "noscript",
                        "object",
                        "output",
                        "progress",
                        "q",
                        "ruby",
                        "s",
                        "samp",
                        /* 'script', */ "select",
                        "small",
                        "span",
                        "strong",
                        "sub",
                        "sup",
                        "svg",
                        "template",
                        "textarea",
                        "time",
                        "u",
                        "var",
                        "video",
                        "wbr",
                        "text",
                        // obsolete inline tags
                        "acronym",
                        "big",
                        "strike",
                        "tt"
                    ]);
                    this.void_elements = this._get_array("void_elements", [
                        // HTLM void elements - aka self-closing tags - aka singletons
                        // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements
                        "area",
                        "base",
                        "br",
                        "col",
                        "embed",
                        "hr",
                        "img",
                        "input",
                        "keygen",
                        "link",
                        "menuitem",
                        "meta",
                        "param",
                        "source",
                        "track",
                        "wbr",
                        // NOTE: Optional tags are too complex for a simple list
                        // they are hard coded in _do_optional_end_element
                        // Doctype and xml elements
                        "!doctype",
                        "?xml",
                        // obsolete tags
                        // basefont: https://www.computerhope.com/jargon/h/html-basefont-tag.htm
                        // isndex: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/isindex
                        "basefont",
                        "isindex"
                    ]);
                    this.unformatted = this._get_array("unformatted", []);
                    this.content_unformatted = this._get_array("content_unformatted", [
                        "pre",
                        "textarea"
                    ]);
                    this.unformatted_content_delimiter = this._get_characters("unformatted_content_delimiter");
                    this.indent_scripts = this._get_selection("indent_scripts", [
                        "normal",
                        "keep",
                        "separate"
                    ]);
                }
                Options.prototype = new BaseOptions();
                module.exports.Options = Options;
            /***/ },
            /* 21 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_131648__) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var BaseTokenizer = __nested_webpack_require_131648__(9).Tokenizer;
                var BASETOKEN = __nested_webpack_require_131648__(9).TOKEN;
                var Directives = __nested_webpack_require_131648__(13).Directives;
                var TemplatablePattern = __nested_webpack_require_131648__(14).TemplatablePattern;
                var Pattern = __nested_webpack_require_131648__(12).Pattern;
                var TOKEN = {
                    TAG_OPEN: "TK_TAG_OPEN",
                    TAG_CLOSE: "TK_TAG_CLOSE",
                    ATTRIBUTE: "TK_ATTRIBUTE",
                    EQUALS: "TK_EQUALS",
                    VALUE: "TK_VALUE",
                    COMMENT: "TK_COMMENT",
                    TEXT: "TK_TEXT",
                    UNKNOWN: "TK_UNKNOWN",
                    START: BASETOKEN.START,
                    RAW: BASETOKEN.RAW,
                    EOF: BASETOKEN.EOF
                };
                var directives_core = new Directives(/<\!--/, /-->/);
                var Tokenizer = function(input_string, options) {
                    BaseTokenizer.call(this, input_string, options);
                    this._current_tag_name = "";
                    // Words end at whitespace or when a tag starts
                    // if we are indenting handlebars, they are considered tags
                    var templatable_reader = new TemplatablePattern(this._input).read_options(this._options);
                    var pattern_reader = new Pattern(this._input);
                    this.__patterns = {
                        word: templatable_reader.until(/[\n\r\t <]/),
                        single_quote: templatable_reader.until_after(/'/),
                        double_quote: templatable_reader.until_after(/"/),
                        attribute: templatable_reader.until(/[\n\r\t =>]|\/>/),
                        element_name: templatable_reader.until(/[\n\r\t >\/]/),
                        handlebars_comment: pattern_reader.starting_with(/{{!--/).until_after(/--}}/),
                        handlebars: pattern_reader.starting_with(/{{/).until_after(/}}/),
                        handlebars_open: pattern_reader.until(/[\n\r\t }]/),
                        handlebars_raw_close: pattern_reader.until(/}}/),
                        comment: pattern_reader.starting_with(/<!--/).until_after(/-->/),
                        cdata: pattern_reader.starting_with(/<!\[CDATA\[/).until_after(/]]>/),
                        // https://en.wikipedia.org/wiki/Conditional_comment
                        conditional_comment: pattern_reader.starting_with(/<!\[/).until_after(/]>/),
                        processing: pattern_reader.starting_with(/<\?/).until_after(/\?>/)
                    };
                    if (this._options.indent_handlebars) {
                        this.__patterns.word = this.__patterns.word.exclude("handlebars");
                    }
                    this._unformatted_content_delimiter = null;
                    if (this._options.unformatted_content_delimiter) {
                        var literal_regexp = this._input.get_literal_regexp(this._options.unformatted_content_delimiter);
                        this.__patterns.unformatted_content_delimiter = pattern_reader.matching(literal_regexp).until_after(literal_regexp);
                    }
                };
                Tokenizer.prototype = new BaseTokenizer();
                Tokenizer.prototype._is_comment = function(current_token) {
                    return false; //current_token.type === TOKEN.COMMENT || current_token.type === TOKEN.UNKNOWN;
                };
                Tokenizer.prototype._is_opening = function(current_token) {
                    return current_token.type === TOKEN.TAG_OPEN;
                };
                Tokenizer.prototype._is_closing = function(current_token, open_token) {
                    return current_token.type === TOKEN.TAG_CLOSE && open_token && ((current_token.text === ">" || current_token.text === "/>") && open_token.text[0] === "<" || current_token.text === "}}" && open_token.text[0] === "{" && open_token.text[1] === "{");
                };
                Tokenizer.prototype._reset = function() {
                    this._current_tag_name = "";
                };
                Tokenizer.prototype._get_next_token = function(previous_token, open_token) {
                    var token = null;
                    this._readWhitespace();
                    var c = this._input.peek();
                    if (c === null) {
                        return this._create_token(TOKEN.EOF, "");
                    }
                    token = token || this._read_open_handlebars(c, open_token);
                    token = token || this._read_attribute(c, previous_token, open_token);
                    token = token || this._read_close(c, open_token);
                    token = token || this._read_raw_content(c, previous_token, open_token);
                    token = token || this._read_content_word(c);
                    token = token || this._read_comment_or_cdata(c);
                    token = token || this._read_processing(c);
                    token = token || this._read_open(c, open_token);
                    token = token || this._create_token(TOKEN.UNKNOWN, this._input.next());
                    return token;
                };
                Tokenizer.prototype._read_comment_or_cdata = function(c) {
                    var token = null;
                    var resulting_string = null;
                    var directives = null;
                    if (c === "<") {
                        var peek1 = this._input.peek(1);
                        // We treat all comments as literals, even more than preformatted tags
                        // we only look for the appropriate closing marker
                        if (peek1 === "!") {
                            resulting_string = this.__patterns.comment.read();
                            // only process directive on html comments
                            if (resulting_string) {
                                directives = directives_core.get_directives(resulting_string);
                                if (directives && directives.ignore === "start") {
                                    resulting_string += directives_core.readIgnored(this._input);
                                }
                            } else {
                                resulting_string = this.__patterns.cdata.read();
                            }
                        }
                        if (resulting_string) {
                            token = this._create_token(TOKEN.COMMENT, resulting_string);
                            token.directives = directives;
                        }
                    }
                    return token;
                };
                Tokenizer.prototype._read_processing = function(c) {
                    var token = null;
                    var resulting_string = null;
                    var directives = null;
                    if (c === "<") {
                        var peek1 = this._input.peek(1);
                        if (peek1 === "!" || peek1 === "?") {
                            resulting_string = this.__patterns.conditional_comment.read();
                            resulting_string = resulting_string || this.__patterns.processing.read();
                        }
                        if (resulting_string) {
                            token = this._create_token(TOKEN.COMMENT, resulting_string);
                            token.directives = directives;
                        }
                    }
                    return token;
                };
                Tokenizer.prototype._read_open = function(c, open_token) {
                    var resulting_string = null;
                    var token = null;
                    if (!open_token) {
                        if (c === "<") {
                            resulting_string = this._input.next();
                            if (this._input.peek() === "/") {
                                resulting_string += this._input.next();
                            }
                            resulting_string += this.__patterns.element_name.read();
                            token = this._create_token(TOKEN.TAG_OPEN, resulting_string);
                        }
                    }
                    return token;
                };
                Tokenizer.prototype._read_open_handlebars = function(c, open_token) {
                    var resulting_string = null;
                    var token = null;
                    if (!open_token) {
                        if (this._options.indent_handlebars && c === "{" && this._input.peek(1) === "{") {
                            if (this._input.peek(2) === "!") {
                                resulting_string = this.__patterns.handlebars_comment.read();
                                resulting_string = resulting_string || this.__patterns.handlebars.read();
                                token = this._create_token(TOKEN.COMMENT, resulting_string);
                            } else {
                                resulting_string = this.__patterns.handlebars_open.read();
                                token = this._create_token(TOKEN.TAG_OPEN, resulting_string);
                            }
                        }
                    }
                    return token;
                };
                Tokenizer.prototype._read_close = function(c, open_token) {
                    var resulting_string = null;
                    var token = null;
                    if (open_token) {
                        if (open_token.text[0] === "<" && (c === ">" || c === "/" && this._input.peek(1) === ">")) {
                            resulting_string = this._input.next();
                            if (c === "/") {
                                resulting_string += this._input.next();
                            }
                            token = this._create_token(TOKEN.TAG_CLOSE, resulting_string);
                        } else if (open_token.text[0] === "{" && c === "}" && this._input.peek(1) === "}") {
                            this._input.next();
                            this._input.next();
                            token = this._create_token(TOKEN.TAG_CLOSE, "}}");
                        }
                    }
                    return token;
                };
                Tokenizer.prototype._read_attribute = function(c, previous_token, open_token) {
                    var token = null;
                    var resulting_string = "";
                    if (open_token && open_token.text[0] === "<") {
                        if (c === "=") {
                            token = this._create_token(TOKEN.EQUALS, this._input.next());
                        } else if (c === '"' || c === "'") {
                            var content = this._input.next();
                            if (c === '"') {
                                content += this.__patterns.double_quote.read();
                            } else {
                                content += this.__patterns.single_quote.read();
                            }
                            token = this._create_token(TOKEN.VALUE, content);
                        } else {
                            resulting_string = this.__patterns.attribute.read();
                            if (resulting_string) {
                                if (previous_token.type === TOKEN.EQUALS) {
                                    token = this._create_token(TOKEN.VALUE, resulting_string);
                                } else {
                                    token = this._create_token(TOKEN.ATTRIBUTE, resulting_string);
                                }
                            }
                        }
                    }
                    return token;
                };
                Tokenizer.prototype._is_content_unformatted = function(tag_name) {
                    // void_elements have no content and so cannot have unformatted content
                    // script and style tags should always be read as unformatted content
                    // finally content_unformatted and unformatted element contents are unformatted
                    return this._options.void_elements.indexOf(tag_name) === -1 && (this._options.content_unformatted.indexOf(tag_name) !== -1 || this._options.unformatted.indexOf(tag_name) !== -1);
                };
                Tokenizer.prototype._read_raw_content = function(c, previous_token, open_token) {
                    var resulting_string = "";
                    if (open_token && open_token.text[0] === "{") {
                        resulting_string = this.__patterns.handlebars_raw_close.read();
                    } else if (previous_token.type === TOKEN.TAG_CLOSE && previous_token.opened.text[0] === "<" && previous_token.text[0] !== "/") {
                        // ^^ empty tag has no content 
                        var tag_name = previous_token.opened.text.substr(1).toLowerCase();
                        if (tag_name === "script" || tag_name === "style") {
                            // Script and style tags are allowed to have comments wrapping their content
                            // or just have regular content.
                            var token = this._read_comment_or_cdata(c);
                            if (token) {
                                token.type = TOKEN.TEXT;
                                return token;
                            }
                            resulting_string = this._input.readUntil(new RegExp("</" + tag_name + "[\\n\\r\\t ]*?>", "ig"));
                        } else if (this._is_content_unformatted(tag_name)) {
                            resulting_string = this._input.readUntil(new RegExp("</" + tag_name + "[\\n\\r\\t ]*?>", "ig"));
                        }
                    }
                    if (resulting_string) {
                        return this._create_token(TOKEN.TEXT, resulting_string);
                    }
                    return null;
                };
                Tokenizer.prototype._read_content_word = function(c) {
                    var resulting_string = "";
                    if (this._options.unformatted_content_delimiter) {
                        if (c === this._options.unformatted_content_delimiter[0]) {
                            resulting_string = this.__patterns.unformatted_content_delimiter.read();
                        }
                    }
                    if (!resulting_string) {
                        resulting_string = this.__patterns.word.read();
                    }
                    if (resulting_string) {
                        return this._create_token(TOKEN.TEXT, resulting_string);
                    }
                };
                module.exports.Tokenizer = Tokenizer;
                module.exports.TOKEN = TOKEN;
            /***/ }
        ];
        /************************************************************************/ /******/ // The module cache
        /******/ var __webpack_module_cache__ = {};
        /******/ /******/ // The require function
        /******/ function __nested_webpack_require_148152__(moduleId) {
            /******/ // Check if module is in cache
            /******/ var cachedModule = __webpack_module_cache__[moduleId];
            /******/ if (cachedModule !== undefined) {
                /******/ return cachedModule.exports;
            /******/ }
            /******/ // Create a new module (and put it into the cache)
            /******/ var module = __webpack_module_cache__[moduleId] = {
                /******/ // no module.id needed
                /******/ // no module.loaded needed
                /******/ exports: {}
            };
            /******/ /******/ // Execute the module function
            /******/ __webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_148152__);
            /******/ /******/ // Return the exports of the module
            /******/ return module.exports;
        /******/ }
        /******/ /************************************************************************/ /******/ /******/ // startup
        /******/ // Load entry module and return exports
        /******/ // This entry module is referenced by other modules so it can't be inlined
        /******/ var __nested_webpack_exports__ = __nested_webpack_require_148152__(18);
        /******/ legacy_beautify_html = __nested_webpack_exports__;
    /******/ /******/ })();
    var style_html = legacy_beautify_html;
    /* Footer */ if (true) {
        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
            __webpack_require__,
            __webpack_require__(6210),
            __webpack_require__(3744)
        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(requireamd) {
            var js_beautify = __webpack_require__(6210);
            var css_beautify = __webpack_require__(3744);
            return {
                html_beautify: function(html_source, options) {
                    return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);
                }
            };
        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else { var css_beautify, js_beautify; }
})();


/***/ }),

/***/ 6210:
/***/ ((module, exports) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/* AUTO-GENERATED. DO NOT MODIFY. */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

 JS Beautifier
---------------


  Written by Einar Lielmanis, <einar@beautifier.io>
      https://beautifier.io/

  Originally converted to javascript by Vital, <vital76@gmail.com>
  "End braces on own line" added by Chris J. Shull, <chrisjshull@gmail.com>
  Parsing improvements for brace-less statements by Liam Newman <bitwiseman@beautifier.io>


  Usage:
    js_beautify(js_source_text);
    js_beautify(js_source_text, options);

  The options are:
    indent_size (default 4)          - indentation size,
    indent_char (default space)      - character to indent with,
    preserve_newlines (default true) - whether existing line breaks should be preserved,
    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk,

    jslint_happy (default false) - if true, then jslint-stricter mode is enforced.

            jslint_happy        !jslint_happy
            ---------------------------------
            function ()         function()

            switch () {         switch() {
            case 1:               case 1:
              break;                break;
            }                   }

    space_after_anon_function (default false) - should the space before an anonymous function's parens be added, "function()" vs "function ()",
          NOTE: This option is overridden by jslint_happy (i.e. if jslint_happy is true, space_after_anon_function is true by design)

    brace_style (default "collapse") - "collapse" | "expand" | "end-expand" | "none" | any of the former + ",preserve-inline"
            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.
            preserve-inline will try to preserve inline blocks of curly braces

    space_before_conditional (default true) - should the space before conditional statement be added, "if(true)" vs "if (true)",

    unescape_strings (default false) - should printable characters in strings encoded in \xNN notation be unescaped, "example" vs "\x65\x78\x61\x6d\x70\x6c\x65"

    wrap_line_length (default unlimited) - lines should wrap at next opportunity after this number of characters.
          NOTE: This is not a hard limit. Lines will continue until a point where a newline would
                be preserved if it were present.

    end_with_newline (default false)  - end output with a newline


    e.g

    js_beautify(js_source_text, {
      'indent_size': 1,
      'indent_char': '\t'
    });

*/ (function() {
    /* GENERATED_BUILD_OUTPUT */ var legacy_beautify_js;
    /******/ (function() {
        /******/ "use strict";
        /******/ var __webpack_modules__ = [
            /* 0 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_4024__) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var Beautifier = __nested_webpack_require_4024__(1).Beautifier, Options = __nested_webpack_require_4024__(5).Options;
                function js_beautify(js_source_text, options) {
                    var beautifier = new Beautifier(js_source_text, options);
                    return beautifier.beautify();
                }
                module.exports = js_beautify;
                module.exports.defaultOptions = function() {
                    return new Options();
                };
            /***/ },
            /* 1 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_5811__) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var Output = __nested_webpack_require_5811__(2).Output;
                var Token = __nested_webpack_require_5811__(3).Token;
                var acorn = __nested_webpack_require_5811__(4);
                var Options = __nested_webpack_require_5811__(5).Options;
                var Tokenizer = __nested_webpack_require_5811__(7).Tokenizer;
                var line_starters = __nested_webpack_require_5811__(7).line_starters;
                var positionable_operators = __nested_webpack_require_5811__(7).positionable_operators;
                var TOKEN = __nested_webpack_require_5811__(7).TOKEN;
                function in_array(what, arr) {
                    return arr.indexOf(what) !== -1;
                }
                function ltrim(s) {
                    return s.replace(/^\s+/g, "");
                }
                function generateMapFromStrings(list) {
                    var result = {};
                    for(var x = 0; x < list.length; x++){
                        // make the mapped names underscored instead of dash
                        result[list[x].replace(/-/g, "_")] = list[x];
                    }
                    return result;
                }
                function reserved_word(token, word) {
                    return token && token.type === TOKEN.RESERVED && token.text === word;
                }
                function reserved_array(token, words) {
                    return token && token.type === TOKEN.RESERVED && in_array(token.text, words);
                }
                // Unsure of what they mean, but they work. Worth cleaning up in future.
                var special_words = [
                    "case",
                    "return",
                    "do",
                    "if",
                    "throw",
                    "else",
                    "await",
                    "break",
                    "continue",
                    "async"
                ];
                var validPositionValues = [
                    "before-newline",
                    "after-newline",
                    "preserve-newline"
                ];
                // Generate map from array
                var OPERATOR_POSITION = generateMapFromStrings(validPositionValues);
                var OPERATOR_POSITION_BEFORE_OR_PRESERVE = [
                    OPERATOR_POSITION.before_newline,
                    OPERATOR_POSITION.preserve_newline
                ];
                var MODE = {
                    BlockStatement: "BlockStatement",
                    Statement: "Statement",
                    ObjectLiteral: "ObjectLiteral",
                    ArrayLiteral: "ArrayLiteral",
                    ForInitializer: "ForInitializer",
                    Conditional: "Conditional",
                    Expression: "Expression" //'(EXPRESSION)'
                };
                function remove_redundant_indentation(output, frame) {
                    // This implementation is effective but has some issues:
                    //     - can cause line wrap to happen too soon due to indent removal
                    //           after wrap points are calculated
                    // These issues are minor compared to ugly indentation.
                    if (frame.multiline_frame || frame.mode === MODE.ForInitializer || frame.mode === MODE.Conditional) {
                        return;
                    }
                    // remove one indent from each line inside this section
                    output.remove_indent(frame.start_line_index);
                }
                // we could use just string.split, but
                // IE doesn't like returning empty strings
                function split_linebreaks(s) {
                    //return s.split(/\x0d\x0a|\x0a/);
                    s = s.replace(acorn.allLineBreaks, "\n");
                    var out = [], idx = s.indexOf("\n");
                    while(idx !== -1){
                        out.push(s.substring(0, idx));
                        s = s.substring(idx + 1);
                        idx = s.indexOf("\n");
                    }
                    if (s.length) {
                        out.push(s);
                    }
                    return out;
                }
                function is_array(mode) {
                    return mode === MODE.ArrayLiteral;
                }
                function is_expression(mode) {
                    return in_array(mode, [
                        MODE.Expression,
                        MODE.ForInitializer,
                        MODE.Conditional
                    ]);
                }
                function all_lines_start_with(lines, c) {
                    for(var i = 0; i < lines.length; i++){
                        var line = lines[i].trim();
                        if (line.charAt(0) !== c) {
                            return false;
                        }
                    }
                    return true;
                }
                function each_line_matches_indent(lines, indent) {
                    var i = 0, len = lines.length, line;
                    for(; i < len; i++){
                        line = lines[i];
                        // allow empty lines to pass through
                        if (line && line.indexOf(indent) !== 0) {
                            return false;
                        }
                    }
                    return true;
                }
                function Beautifier(source_text, options) {
                    options = options || {};
                    this._source_text = source_text || "";
                    this._output = null;
                    this._tokens = null;
                    this._last_last_text = null;
                    this._flags = null;
                    this._previous_flags = null;
                    this._flag_store = null;
                    this._options = new Options(options);
                }
                Beautifier.prototype.create_flags = function(flags_base, mode) {
                    var next_indent_level = 0;
                    if (flags_base) {
                        next_indent_level = flags_base.indentation_level;
                        if (!this._output.just_added_newline() && flags_base.line_indent_level > next_indent_level) {
                            next_indent_level = flags_base.line_indent_level;
                        }
                    }
                    var next_flags = {
                        mode: mode,
                        parent: flags_base,
                        last_token: flags_base ? flags_base.last_token : new Token(TOKEN.START_BLOCK, ""),
                        last_word: flags_base ? flags_base.last_word : "",
                        declaration_statement: false,
                        declaration_assignment: false,
                        multiline_frame: false,
                        inline_frame: false,
                        if_block: false,
                        else_block: false,
                        class_start_block: false,
                        do_block: false,
                        do_while: false,
                        import_block: false,
                        in_case_statement: false,
                        in_case: false,
                        case_body: false,
                        case_block: false,
                        indentation_level: next_indent_level,
                        alignment: 0,
                        line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,
                        start_line_index: this._output.get_line_number(),
                        ternary_depth: 0
                    };
                    return next_flags;
                };
                Beautifier.prototype._reset = function(source_text) {
                    var baseIndentString = source_text.match(/^[\t ]*/)[0];
                    this._last_last_text = ""; // pre-last token text
                    this._output = new Output(this._options, baseIndentString);
                    // If testing the ignore directive, start with output disable set to true
                    this._output.raw = this._options.test_output_raw;
                    // Stack of parsing/formatting states, including MODE.
                    // We tokenize, parse, and output in an almost purely a forward-only stream of token input
                    // and formatted output.  This makes the beautifier less accurate than full parsers
                    // but also far more tolerant of syntax errors.
                    //
                    // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type
                    // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later
                    // encounter a ":", we'll switch to to MODE.ObjectLiteral.  If we then see a ";",
                    // most full parsers would die, but the beautifier gracefully falls back to
                    // MODE.BlockStatement and continues on.
                    this._flag_store = [];
                    this.set_mode(MODE.BlockStatement);
                    var tokenizer = new Tokenizer(source_text, this._options);
                    this._tokens = tokenizer.tokenize();
                    return source_text;
                };
                Beautifier.prototype.beautify = function() {
                    // if disabled, return the input unchanged.
                    if (this._options.disabled) {
                        return this._source_text;
                    }
                    var sweet_code;
                    var source_text = this._reset(this._source_text);
                    var eol = this._options.eol;
                    if (this._options.eol === "auto") {
                        eol = "\n";
                        if (source_text && acorn.lineBreak.test(source_text || "")) {
                            eol = source_text.match(acorn.lineBreak)[0];
                        }
                    }
                    var current_token = this._tokens.next();
                    while(current_token){
                        this.handle_token(current_token);
                        this._last_last_text = this._flags.last_token.text;
                        this._flags.last_token = current_token;
                        current_token = this._tokens.next();
                    }
                    sweet_code = this._output.get_code(eol);
                    return sweet_code;
                };
                Beautifier.prototype.handle_token = function(current_token, preserve_statement_flags) {
                    if (current_token.type === TOKEN.START_EXPR) {
                        this.handle_start_expr(current_token);
                    } else if (current_token.type === TOKEN.END_EXPR) {
                        this.handle_end_expr(current_token);
                    } else if (current_token.type === TOKEN.START_BLOCK) {
                        this.handle_start_block(current_token);
                    } else if (current_token.type === TOKEN.END_BLOCK) {
                        this.handle_end_block(current_token);
                    } else if (current_token.type === TOKEN.WORD) {
                        this.handle_word(current_token);
                    } else if (current_token.type === TOKEN.RESERVED) {
                        this.handle_word(current_token);
                    } else if (current_token.type === TOKEN.SEMICOLON) {
                        this.handle_semicolon(current_token);
                    } else if (current_token.type === TOKEN.STRING) {
                        this.handle_string(current_token);
                    } else if (current_token.type === TOKEN.EQUALS) {
                        this.handle_equals(current_token);
                    } else if (current_token.type === TOKEN.OPERATOR) {
                        this.handle_operator(current_token);
                    } else if (current_token.type === TOKEN.COMMA) {
                        this.handle_comma(current_token);
                    } else if (current_token.type === TOKEN.BLOCK_COMMENT) {
                        this.handle_block_comment(current_token, preserve_statement_flags);
                    } else if (current_token.type === TOKEN.COMMENT) {
                        this.handle_comment(current_token, preserve_statement_flags);
                    } else if (current_token.type === TOKEN.DOT) {
                        this.handle_dot(current_token);
                    } else if (current_token.type === TOKEN.EOF) {
                        this.handle_eof(current_token);
                    } else if (current_token.type === TOKEN.UNKNOWN) {
                        this.handle_unknown(current_token, preserve_statement_flags);
                    } else {
                        this.handle_unknown(current_token, preserve_statement_flags);
                    }
                };
                Beautifier.prototype.handle_whitespace_and_comments = function(current_token, preserve_statement_flags) {
                    var newlines = current_token.newlines;
                    var keep_whitespace = this._options.keep_array_indentation && is_array(this._flags.mode);
                    if (current_token.comments_before) {
                        var comment_token = current_token.comments_before.next();
                        while(comment_token){
                            // The cleanest handling of inline comments is to treat them as though they aren't there.
                            // Just continue formatting and the behavior should be logical.
                            // Also ignore unknown tokens.  Again, this should result in better behavior.
                            this.handle_whitespace_and_comments(comment_token, preserve_statement_flags);
                            this.handle_token(comment_token, preserve_statement_flags);
                            comment_token = current_token.comments_before.next();
                        }
                    }
                    if (keep_whitespace) {
                        for(var i = 0; i < newlines; i += 1){
                            this.print_newline(i > 0, preserve_statement_flags);
                        }
                    } else {
                        if (this._options.max_preserve_newlines && newlines > this._options.max_preserve_newlines) {
                            newlines = this._options.max_preserve_newlines;
                        }
                        if (this._options.preserve_newlines) {
                            if (newlines > 1) {
                                this.print_newline(false, preserve_statement_flags);
                                for(var j = 1; j < newlines; j += 1){
                                    this.print_newline(true, preserve_statement_flags);
                                }
                            }
                        }
                    }
                };
                var newline_restricted_tokens = [
                    "async",
                    "break",
                    "continue",
                    "return",
                    "throw",
                    "yield"
                ];
                Beautifier.prototype.allow_wrap_or_preserved_newline = function(current_token, force_linewrap) {
                    force_linewrap = force_linewrap === undefined ? false : force_linewrap;
                    // Never wrap the first token on a line
                    if (this._output.just_added_newline()) {
                        return;
                    }
                    var shouldPreserveOrForce = this._options.preserve_newlines && current_token.newlines || force_linewrap;
                    var operatorLogicApplies = in_array(this._flags.last_token.text, positionable_operators) || in_array(current_token.text, positionable_operators);
                    if (operatorLogicApplies) {
                        var shouldPrintOperatorNewline = in_array(this._flags.last_token.text, positionable_operators) && in_array(this._options.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE) || in_array(current_token.text, positionable_operators);
                        shouldPreserveOrForce = shouldPreserveOrForce && shouldPrintOperatorNewline;
                    }
                    if (shouldPreserveOrForce) {
                        this.print_newline(false, true);
                    } else if (this._options.wrap_line_length) {
                        if (reserved_array(this._flags.last_token, newline_restricted_tokens)) {
                            // These tokens should never have a newline inserted
                            // between them and the following expression.
                            return;
                        }
                        this._output.set_wrap_point();
                    }
                };
                Beautifier.prototype.print_newline = function(force_newline, preserve_statement_flags) {
                    if (!preserve_statement_flags) {
                        if (this._flags.last_token.text !== ";" && this._flags.last_token.text !== "," && this._flags.last_token.text !== "=" && (this._flags.last_token.type !== TOKEN.OPERATOR || this._flags.last_token.text === "--" || this._flags.last_token.text === "++")) {
                            var next_token = this._tokens.peek();
                            while(this._flags.mode === MODE.Statement && !(this._flags.if_block && reserved_word(next_token, "else")) && !this._flags.do_block){
                                this.restore_mode();
                            }
                        }
                    }
                    if (this._output.add_new_line(force_newline)) {
                        this._flags.multiline_frame = true;
                    }
                };
                Beautifier.prototype.print_token_line_indentation = function(current_token) {
                    if (this._output.just_added_newline()) {
                        if (this._options.keep_array_indentation && current_token.newlines && (current_token.text === "[" || is_array(this._flags.mode))) {
                            this._output.current_line.set_indent(-1);
                            this._output.current_line.push(current_token.whitespace_before);
                            this._output.space_before_token = false;
                        } else if (this._output.set_indent(this._flags.indentation_level, this._flags.alignment)) {
                            this._flags.line_indent_level = this._flags.indentation_level;
                        }
                    }
                };
                Beautifier.prototype.print_token = function(current_token) {
                    if (this._output.raw) {
                        this._output.add_raw_token(current_token);
                        return;
                    }
                    if (this._options.comma_first && current_token.previous && current_token.previous.type === TOKEN.COMMA && this._output.just_added_newline()) {
                        if (this._output.previous_line.last() === ",") {
                            var popped = this._output.previous_line.pop();
                            // if the comma was already at the start of the line,
                            // pull back onto that line and reprint the indentation
                            if (this._output.previous_line.is_empty()) {
                                this._output.previous_line.push(popped);
                                this._output.trim(true);
                                this._output.current_line.pop();
                                this._output.trim();
                            }
                            // add the comma in front of the next token
                            this.print_token_line_indentation(current_token);
                            this._output.add_token(",");
                            this._output.space_before_token = true;
                        }
                    }
                    this.print_token_line_indentation(current_token);
                    this._output.non_breaking_space = true;
                    this._output.add_token(current_token.text);
                    if (this._output.previous_token_wrapped) {
                        this._flags.multiline_frame = true;
                    }
                };
                Beautifier.prototype.indent = function() {
                    this._flags.indentation_level += 1;
                    this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
                };
                Beautifier.prototype.deindent = function() {
                    if (this._flags.indentation_level > 0 && (!this._flags.parent || this._flags.indentation_level > this._flags.parent.indentation_level)) {
                        this._flags.indentation_level -= 1;
                        this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
                    }
                };
                Beautifier.prototype.set_mode = function(mode) {
                    if (this._flags) {
                        this._flag_store.push(this._flags);
                        this._previous_flags = this._flags;
                    } else {
                        this._previous_flags = this.create_flags(null, mode);
                    }
                    this._flags = this.create_flags(this._previous_flags, mode);
                    this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
                };
                Beautifier.prototype.restore_mode = function() {
                    if (this._flag_store.length > 0) {
                        this._previous_flags = this._flags;
                        this._flags = this._flag_store.pop();
                        if (this._previous_flags.mode === MODE.Statement) {
                            remove_redundant_indentation(this._output, this._previous_flags);
                        }
                        this._output.set_indent(this._flags.indentation_level, this._flags.alignment);
                    }
                };
                Beautifier.prototype.start_of_object_property = function() {
                    return this._flags.parent.mode === MODE.ObjectLiteral && this._flags.mode === MODE.Statement && (this._flags.last_token.text === ":" && this._flags.ternary_depth === 0 || reserved_array(this._flags.last_token, [
                        "get",
                        "set"
                    ]));
                };
                Beautifier.prototype.start_of_statement = function(current_token) {
                    var start = false;
                    start = start || reserved_array(this._flags.last_token, [
                        "var",
                        "let",
                        "const"
                    ]) && current_token.type === TOKEN.WORD;
                    start = start || reserved_word(this._flags.last_token, "do");
                    start = start || !(this._flags.parent.mode === MODE.ObjectLiteral && this._flags.mode === MODE.Statement) && reserved_array(this._flags.last_token, newline_restricted_tokens) && !current_token.newlines;
                    start = start || reserved_word(this._flags.last_token, "else") && !(reserved_word(current_token, "if") && !current_token.comments_before);
                    start = start || this._flags.last_token.type === TOKEN.END_EXPR && (this._previous_flags.mode === MODE.ForInitializer || this._previous_flags.mode === MODE.Conditional);
                    start = start || this._flags.last_token.type === TOKEN.WORD && this._flags.mode === MODE.BlockStatement && !this._flags.in_case && !(current_token.text === "--" || current_token.text === "++") && this._last_last_text !== "function" && current_token.type !== TOKEN.WORD && current_token.type !== TOKEN.RESERVED;
                    start = start || this._flags.mode === MODE.ObjectLiteral && (this._flags.last_token.text === ":" && this._flags.ternary_depth === 0 || reserved_array(this._flags.last_token, [
                        "get",
                        "set"
                    ]));
                    if (start) {
                        this.set_mode(MODE.Statement);
                        this.indent();
                        this.handle_whitespace_and_comments(current_token, true);
                        // Issue #276:
                        // If starting a new statement with [if, for, while, do], push to a new line.
                        // if (a) if (b) if(c) d(); else e(); else f();
                        if (!this.start_of_object_property()) {
                            this.allow_wrap_or_preserved_newline(current_token, reserved_array(current_token, [
                                "do",
                                "for",
                                "if",
                                "while"
                            ]));
                        }
                        return true;
                    }
                    return false;
                };
                Beautifier.prototype.handle_start_expr = function(current_token) {
                    // The conditional starts the statement if appropriate.
                    if (!this.start_of_statement(current_token)) {
                        this.handle_whitespace_and_comments(current_token);
                    }
                    var next_mode = MODE.Expression;
                    if (current_token.text === "[") {
                        if (this._flags.last_token.type === TOKEN.WORD || this._flags.last_token.text === ")") {
                            // this is array index specifier, break immediately
                            // a[x], fn()[x]
                            if (reserved_array(this._flags.last_token, line_starters)) {
                                this._output.space_before_token = true;
                            }
                            this.print_token(current_token);
                            this.set_mode(next_mode);
                            this.indent();
                            if (this._options.space_in_paren) {
                                this._output.space_before_token = true;
                            }
                            return;
                        }
                        next_mode = MODE.ArrayLiteral;
                        if (is_array(this._flags.mode)) {
                            if (this._flags.last_token.text === "[" || this._flags.last_token.text === "," && (this._last_last_text === "]" || this._last_last_text === "}")) {
                                // ], [ goes to new line
                                // }, [ goes to new line
                                if (!this._options.keep_array_indentation) {
                                    this.print_newline();
                                }
                            }
                        }
                        if (!in_array(this._flags.last_token.type, [
                            TOKEN.START_EXPR,
                            TOKEN.END_EXPR,
                            TOKEN.WORD,
                            TOKEN.OPERATOR,
                            TOKEN.DOT
                        ])) {
                            this._output.space_before_token = true;
                        }
                    } else {
                        if (this._flags.last_token.type === TOKEN.RESERVED) {
                            if (this._flags.last_token.text === "for") {
                                this._output.space_before_token = this._options.space_before_conditional;
                                next_mode = MODE.ForInitializer;
                            } else if (in_array(this._flags.last_token.text, [
                                "if",
                                "while",
                                "switch"
                            ])) {
                                this._output.space_before_token = this._options.space_before_conditional;
                                next_mode = MODE.Conditional;
                            } else if (in_array(this._flags.last_word, [
                                "await",
                                "async"
                            ])) {
                                // Should be a space between await and an IIFE, or async and an arrow function
                                this._output.space_before_token = true;
                            } else if (this._flags.last_token.text === "import" && current_token.whitespace_before === "") {
                                this._output.space_before_token = false;
                            } else if (in_array(this._flags.last_token.text, line_starters) || this._flags.last_token.text === "catch") {
                                this._output.space_before_token = true;
                            }
                        } else if (this._flags.last_token.type === TOKEN.EQUALS || this._flags.last_token.type === TOKEN.OPERATOR) {
                            // Support of this kind of newline preservation.
                            // a = (b &&
                            //     (c || d));
                            if (!this.start_of_object_property()) {
                                this.allow_wrap_or_preserved_newline(current_token);
                            }
                        } else if (this._flags.last_token.type === TOKEN.WORD) {
                            this._output.space_before_token = false;
                            // function name() vs function name ()
                            // function* name() vs function* name ()
                            // async name() vs async name ()
                            // In ES6, you can also define the method properties of an object
                            // var obj = {a: function() {}}
                            // It can be abbreviated
                            // var obj = {a() {}}
                            // var obj = { a() {}} vs var obj = { a () {}}
                            // var obj = { * a() {}} vs var obj = { * a () {}}
                            var peek_back_two = this._tokens.peek(-3);
                            if (this._options.space_after_named_function && peek_back_two) {
                                // peek starts at next character so -1 is current token
                                var peek_back_three = this._tokens.peek(-4);
                                if (reserved_array(peek_back_two, [
                                    "async",
                                    "function"
                                ]) || peek_back_two.text === "*" && reserved_array(peek_back_three, [
                                    "async",
                                    "function"
                                ])) {
                                    this._output.space_before_token = true;
                                } else if (this._flags.mode === MODE.ObjectLiteral) {
                                    if (peek_back_two.text === "{" || peek_back_two.text === "," || peek_back_two.text === "*" && (peek_back_three.text === "{" || peek_back_three.text === ",")) {
                                        this._output.space_before_token = true;
                                    }
                                } else if (this._flags.parent && this._flags.parent.class_start_block) {
                                    this._output.space_before_token = true;
                                }
                            }
                        } else {
                            // Support preserving wrapped arrow function expressions
                            // a.b('c',
                            //     () => d.e
                            // )
                            this.allow_wrap_or_preserved_newline(current_token);
                        }
                        // function() vs function ()
                        // yield*() vs yield* ()
                        // function*() vs function* ()
                        if (this._flags.last_token.type === TOKEN.RESERVED && (this._flags.last_word === "function" || this._flags.last_word === "typeof") || this._flags.last_token.text === "*" && (in_array(this._last_last_text, [
                            "function",
                            "yield"
                        ]) || this._flags.mode === MODE.ObjectLiteral && in_array(this._last_last_text, [
                            "{",
                            ","
                        ]))) {
                            this._output.space_before_token = this._options.space_after_anon_function;
                        }
                    }
                    if (this._flags.last_token.text === ";" || this._flags.last_token.type === TOKEN.START_BLOCK) {
                        this.print_newline();
                    } else if (this._flags.last_token.type === TOKEN.END_EXPR || this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.END_BLOCK || this._flags.last_token.text === "." || this._flags.last_token.type === TOKEN.COMMA) {
                        // do nothing on (( and )( and ][ and ]( and .(
                        // TODO: Consider whether forcing this is required.  Review failing tests when removed.
                        this.allow_wrap_or_preserved_newline(current_token, current_token.newlines);
                    }
                    this.print_token(current_token);
                    this.set_mode(next_mode);
                    if (this._options.space_in_paren) {
                        this._output.space_before_token = true;
                    }
                    // In all cases, if we newline while inside an expression it should be indented.
                    this.indent();
                };
                Beautifier.prototype.handle_end_expr = function(current_token) {
                    // statements inside expressions are not valid syntax, but...
                    // statements must all be closed when their container closes
                    while(this._flags.mode === MODE.Statement){
                        this.restore_mode();
                    }
                    this.handle_whitespace_and_comments(current_token);
                    if (this._flags.multiline_frame) {
                        this.allow_wrap_or_preserved_newline(current_token, current_token.text === "]" && is_array(this._flags.mode) && !this._options.keep_array_indentation);
                    }
                    if (this._options.space_in_paren) {
                        if (this._flags.last_token.type === TOKEN.START_EXPR && !this._options.space_in_empty_paren) {
                            // () [] no inner space in empty parens like these, ever, ref #320
                            this._output.trim();
                            this._output.space_before_token = false;
                        } else {
                            this._output.space_before_token = true;
                        }
                    }
                    this.deindent();
                    this.print_token(current_token);
                    this.restore_mode();
                    remove_redundant_indentation(this._output, this._previous_flags);
                    // do {} while () // no statement required after
                    if (this._flags.do_while && this._previous_flags.mode === MODE.Conditional) {
                        this._previous_flags.mode = MODE.Expression;
                        this._flags.do_block = false;
                        this._flags.do_while = false;
                    }
                };
                Beautifier.prototype.handle_start_block = function(current_token) {
                    this.handle_whitespace_and_comments(current_token);
                    // Check if this is should be treated as a ObjectLiteral
                    var next_token = this._tokens.peek();
                    var second_token = this._tokens.peek(1);
                    if (this._flags.last_word === "switch" && this._flags.last_token.type === TOKEN.END_EXPR) {
                        this.set_mode(MODE.BlockStatement);
                        this._flags.in_case_statement = true;
                    } else if (this._flags.case_body) {
                        this.set_mode(MODE.BlockStatement);
                    } else if (second_token && (in_array(second_token.text, [
                        ":",
                        ","
                    ]) && in_array(next_token.type, [
                        TOKEN.STRING,
                        TOKEN.WORD,
                        TOKEN.RESERVED
                    ]) || in_array(next_token.text, [
                        "get",
                        "set",
                        "..."
                    ]) && in_array(second_token.type, [
                        TOKEN.WORD,
                        TOKEN.RESERVED
                    ]))) {
                        // We don't support TypeScript,but we didn't break it for a very long time.
                        // We'll try to keep not breaking it.
                        if (in_array(this._last_last_text, [
                            "class",
                            "interface"
                        ]) && !in_array(second_token.text, [
                            ":",
                            ","
                        ])) {
                            this.set_mode(MODE.BlockStatement);
                        } else {
                            this.set_mode(MODE.ObjectLiteral);
                        }
                    } else if (this._flags.last_token.type === TOKEN.OPERATOR && this._flags.last_token.text === "=>") {
                        // arrow function: (param1, paramN) => { statements }
                        this.set_mode(MODE.BlockStatement);
                    } else if (in_array(this._flags.last_token.type, [
                        TOKEN.EQUALS,
                        TOKEN.START_EXPR,
                        TOKEN.COMMA,
                        TOKEN.OPERATOR
                    ]) || reserved_array(this._flags.last_token, [
                        "return",
                        "throw",
                        "import",
                        "default"
                    ])) {
                        // Detecting shorthand function syntax is difficult by scanning forward,
                        //     so check the surrounding context.
                        // If the block is being returned, imported, export default, passed as arg,
                        //     assigned with = or assigned in a nested object, treat as an ObjectLiteral.
                        this.set_mode(MODE.ObjectLiteral);
                    } else {
                        this.set_mode(MODE.BlockStatement);
                    }
                    if (this._flags.last_token) {
                        if (reserved_array(this._flags.last_token.previous, [
                            "class",
                            "extends"
                        ])) {
                            this._flags.class_start_block = true;
                        }
                    }
                    var empty_braces = !next_token.comments_before && next_token.text === "}";
                    var empty_anonymous_function = empty_braces && this._flags.last_word === "function" && this._flags.last_token.type === TOKEN.END_EXPR;
                    if (this._options.brace_preserve_inline) {
                        // search forward for a newline wanted inside this block
                        var index = 0;
                        var check_token = null;
                        this._flags.inline_frame = true;
                        do {
                            index += 1;
                            check_token = this._tokens.peek(index - 1);
                            if (check_token.newlines) {
                                this._flags.inline_frame = false;
                                break;
                            }
                        }while (check_token.type !== TOKEN.EOF && !(check_token.type === TOKEN.END_BLOCK && check_token.opened === current_token));
                    }
                    if ((this._options.brace_style === "expand" || this._options.brace_style === "none" && current_token.newlines) && !this._flags.inline_frame) {
                        if (this._flags.last_token.type !== TOKEN.OPERATOR && (empty_anonymous_function || this._flags.last_token.type === TOKEN.EQUALS || reserved_array(this._flags.last_token, special_words) && this._flags.last_token.text !== "else")) {
                            this._output.space_before_token = true;
                        } else {
                            this.print_newline(false, true);
                        }
                    } else {
                        if (is_array(this._previous_flags.mode) && (this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.COMMA)) {
                            if (this._flags.last_token.type === TOKEN.COMMA || this._options.space_in_paren) {
                                this._output.space_before_token = true;
                            }
                            if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR && this._flags.inline_frame) {
                                this.allow_wrap_or_preserved_newline(current_token);
                                this._previous_flags.multiline_frame = this._previous_flags.multiline_frame || this._flags.multiline_frame;
                                this._flags.multiline_frame = false;
                            }
                        }
                        if (this._flags.last_token.type !== TOKEN.OPERATOR && this._flags.last_token.type !== TOKEN.START_EXPR) {
                            if (in_array(this._flags.last_token.type, [
                                TOKEN.START_BLOCK,
                                TOKEN.SEMICOLON
                            ]) && !this._flags.inline_frame) {
                                this.print_newline();
                            } else {
                                this._output.space_before_token = true;
                            }
                        }
                    }
                    this.print_token(current_token);
                    this.indent();
                    // Except for specific cases, open braces are followed by a new line.
                    if (!empty_braces && !(this._options.brace_preserve_inline && this._flags.inline_frame)) {
                        this.print_newline();
                    }
                };
                Beautifier.prototype.handle_end_block = function(current_token) {
                    // statements must all be closed when their container closes
                    this.handle_whitespace_and_comments(current_token);
                    while(this._flags.mode === MODE.Statement){
                        this.restore_mode();
                    }
                    var empty_braces = this._flags.last_token.type === TOKEN.START_BLOCK;
                    if (this._flags.inline_frame && !empty_braces) {
                        this._output.space_before_token = true;
                    } else if (this._options.brace_style === "expand") {
                        if (!empty_braces) {
                            this.print_newline();
                        }
                    } else {
                        // skip {}
                        if (!empty_braces) {
                            if (is_array(this._flags.mode) && this._options.keep_array_indentation) {
                                // we REALLY need a newline here, but newliner would skip that
                                this._options.keep_array_indentation = false;
                                this.print_newline();
                                this._options.keep_array_indentation = true;
                            } else {
                                this.print_newline();
                            }
                        }
                    }
                    this.restore_mode();
                    this.print_token(current_token);
                };
                Beautifier.prototype.handle_word = function(current_token) {
                    if (current_token.type === TOKEN.RESERVED) {
                        if (in_array(current_token.text, [
                            "set",
                            "get"
                        ]) && this._flags.mode !== MODE.ObjectLiteral) {
                            current_token.type = TOKEN.WORD;
                        } else if (current_token.text === "import" && in_array(this._tokens.peek().text, [
                            "(",
                            "."
                        ])) {
                            current_token.type = TOKEN.WORD;
                        } else if (in_array(current_token.text, [
                            "as",
                            "from"
                        ]) && !this._flags.import_block) {
                            current_token.type = TOKEN.WORD;
                        } else if (this._flags.mode === MODE.ObjectLiteral) {
                            var next_token = this._tokens.peek();
                            if (next_token.text === ":") {
                                current_token.type = TOKEN.WORD;
                            }
                        }
                    }
                    if (this.start_of_statement(current_token)) {
                        // The conditional starts the statement if appropriate.
                        if (reserved_array(this._flags.last_token, [
                            "var",
                            "let",
                            "const"
                        ]) && current_token.type === TOKEN.WORD) {
                            this._flags.declaration_statement = true;
                        }
                    } else if (current_token.newlines && !is_expression(this._flags.mode) && (this._flags.last_token.type !== TOKEN.OPERATOR || this._flags.last_token.text === "--" || this._flags.last_token.text === "++") && this._flags.last_token.type !== TOKEN.EQUALS && (this._options.preserve_newlines || !reserved_array(this._flags.last_token, [
                        "var",
                        "let",
                        "const",
                        "set",
                        "get"
                    ]))) {
                        this.handle_whitespace_and_comments(current_token);
                        this.print_newline();
                    } else {
                        this.handle_whitespace_and_comments(current_token);
                    }
                    if (this._flags.do_block && !this._flags.do_while) {
                        if (reserved_word(current_token, "while")) {
                            // do {} ## while ()
                            this._output.space_before_token = true;
                            this.print_token(current_token);
                            this._output.space_before_token = true;
                            this._flags.do_while = true;
                            return;
                        } else {
                            // do {} should always have while as the next word.
                            // if we don't see the expected while, recover
                            this.print_newline();
                            this._flags.do_block = false;
                        }
                    }
                    // if may be followed by else, or not
                    // Bare/inline ifs are tricky
                    // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();
                    if (this._flags.if_block) {
                        if (!this._flags.else_block && reserved_word(current_token, "else")) {
                            this._flags.else_block = true;
                        } else {
                            while(this._flags.mode === MODE.Statement){
                                this.restore_mode();
                            }
                            this._flags.if_block = false;
                            this._flags.else_block = false;
                        }
                    }
                    if (this._flags.in_case_statement && reserved_array(current_token, [
                        "case",
                        "default"
                    ])) {
                        this.print_newline();
                        if (!this._flags.case_block && (this._flags.case_body || this._options.jslint_happy)) {
                            // switch cases following one another
                            this.deindent();
                        }
                        this._flags.case_body = false;
                        this.print_token(current_token);
                        this._flags.in_case = true;
                        return;
                    }
                    if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.EQUALS || this._flags.last_token.type === TOKEN.OPERATOR) {
                        if (!this.start_of_object_property()) {
                            this.allow_wrap_or_preserved_newline(current_token);
                        }
                    }
                    if (reserved_word(current_token, "function")) {
                        if (in_array(this._flags.last_token.text, [
                            "}",
                            ";"
                        ]) || this._output.just_added_newline() && !(in_array(this._flags.last_token.text, [
                            "(",
                            "[",
                            "{",
                            ":",
                            "=",
                            ","
                        ]) || this._flags.last_token.type === TOKEN.OPERATOR)) {
                            // make sure there is a nice clean space of at least one blank line
                            // before a new function definition
                            if (!this._output.just_added_blankline() && !current_token.comments_before) {
                                this.print_newline();
                                this.print_newline(true);
                            }
                        }
                        if (this._flags.last_token.type === TOKEN.RESERVED || this._flags.last_token.type === TOKEN.WORD) {
                            if (reserved_array(this._flags.last_token, [
                                "get",
                                "set",
                                "new",
                                "export"
                            ]) || reserved_array(this._flags.last_token, newline_restricted_tokens)) {
                                this._output.space_before_token = true;
                            } else if (reserved_word(this._flags.last_token, "default") && this._last_last_text === "export") {
                                this._output.space_before_token = true;
                            } else if (this._flags.last_token.text === "declare") {
                                // accomodates Typescript declare function formatting
                                this._output.space_before_token = true;
                            } else {
                                this.print_newline();
                            }
                        } else if (this._flags.last_token.type === TOKEN.OPERATOR || this._flags.last_token.text === "=") {
                            // foo = function
                            this._output.space_before_token = true;
                        } else if (!this._flags.multiline_frame && (is_expression(this._flags.mode) || is_array(this._flags.mode))) {
                        // (function
                        } else {
                            this.print_newline();
                        }
                        this.print_token(current_token);
                        this._flags.last_word = current_token.text;
                        return;
                    }
                    var prefix = "NONE";
                    if (this._flags.last_token.type === TOKEN.END_BLOCK) {
                        if (this._previous_flags.inline_frame) {
                            prefix = "SPACE";
                        } else if (!reserved_array(current_token, [
                            "else",
                            "catch",
                            "finally",
                            "from"
                        ])) {
                            prefix = "NEWLINE";
                        } else {
                            if (this._options.brace_style === "expand" || this._options.brace_style === "end-expand" || this._options.brace_style === "none" && current_token.newlines) {
                                prefix = "NEWLINE";
                            } else {
                                prefix = "SPACE";
                                this._output.space_before_token = true;
                            }
                        }
                    } else if (this._flags.last_token.type === TOKEN.SEMICOLON && this._flags.mode === MODE.BlockStatement) {
                        // TODO: Should this be for STATEMENT as well?
                        prefix = "NEWLINE";
                    } else if (this._flags.last_token.type === TOKEN.SEMICOLON && is_expression(this._flags.mode)) {
                        prefix = "SPACE";
                    } else if (this._flags.last_token.type === TOKEN.STRING) {
                        prefix = "NEWLINE";
                    } else if (this._flags.last_token.type === TOKEN.RESERVED || this._flags.last_token.type === TOKEN.WORD || this._flags.last_token.text === "*" && (in_array(this._last_last_text, [
                        "function",
                        "yield"
                    ]) || this._flags.mode === MODE.ObjectLiteral && in_array(this._last_last_text, [
                        "{",
                        ","
                    ]))) {
                        prefix = "SPACE";
                    } else if (this._flags.last_token.type === TOKEN.START_BLOCK) {
                        if (this._flags.inline_frame) {
                            prefix = "SPACE";
                        } else {
                            prefix = "NEWLINE";
                        }
                    } else if (this._flags.last_token.type === TOKEN.END_EXPR) {
                        this._output.space_before_token = true;
                        prefix = "NEWLINE";
                    }
                    if (reserved_array(current_token, line_starters) && this._flags.last_token.text !== ")") {
                        if (this._flags.inline_frame || this._flags.last_token.text === "else" || this._flags.last_token.text === "export") {
                            prefix = "SPACE";
                        } else {
                            prefix = "NEWLINE";
                        }
                    }
                    if (reserved_array(current_token, [
                        "else",
                        "catch",
                        "finally"
                    ])) {
                        if ((!(this._flags.last_token.type === TOKEN.END_BLOCK && this._previous_flags.mode === MODE.BlockStatement) || this._options.brace_style === "expand" || this._options.brace_style === "end-expand" || this._options.brace_style === "none" && current_token.newlines) && !this._flags.inline_frame) {
                            this.print_newline();
                        } else {
                            this._output.trim(true);
                            var line = this._output.current_line;
                            // If we trimmed and there's something other than a close block before us
                            // put a newline back in.  Handles '} // comment' scenario.
                            if (line.last() !== "}") {
                                this.print_newline();
                            }
                            this._output.space_before_token = true;
                        }
                    } else if (prefix === "NEWLINE") {
                        if (reserved_array(this._flags.last_token, special_words)) {
                            // no newline between 'return nnn'
                            this._output.space_before_token = true;
                        } else if (this._flags.last_token.text === "declare" && reserved_array(current_token, [
                            "var",
                            "let",
                            "const"
                        ])) {
                            // accomodates Typescript declare formatting
                            this._output.space_before_token = true;
                        } else if (this._flags.last_token.type !== TOKEN.END_EXPR) {
                            if ((this._flags.last_token.type !== TOKEN.START_EXPR || !reserved_array(current_token, [
                                "var",
                                "let",
                                "const"
                            ])) && this._flags.last_token.text !== ":") {
                                // no need to force newline on 'var': for (var x = 0...)
                                if (reserved_word(current_token, "if") && reserved_word(current_token.previous, "else")) {
                                    // no newline for } else if {
                                    this._output.space_before_token = true;
                                } else {
                                    this.print_newline();
                                }
                            }
                        } else if (reserved_array(current_token, line_starters) && this._flags.last_token.text !== ")") {
                            this.print_newline();
                        }
                    } else if (this._flags.multiline_frame && is_array(this._flags.mode) && this._flags.last_token.text === "," && this._last_last_text === "}") {
                        this.print_newline(); // }, in lists get a newline treatment
                    } else if (prefix === "SPACE") {
                        this._output.space_before_token = true;
                    }
                    if (current_token.previous && (current_token.previous.type === TOKEN.WORD || current_token.previous.type === TOKEN.RESERVED)) {
                        this._output.space_before_token = true;
                    }
                    this.print_token(current_token);
                    this._flags.last_word = current_token.text;
                    if (current_token.type === TOKEN.RESERVED) {
                        if (current_token.text === "do") {
                            this._flags.do_block = true;
                        } else if (current_token.text === "if") {
                            this._flags.if_block = true;
                        } else if (current_token.text === "import") {
                            this._flags.import_block = true;
                        } else if (this._flags.import_block && reserved_word(current_token, "from")) {
                            this._flags.import_block = false;
                        }
                    }
                };
                Beautifier.prototype.handle_semicolon = function(current_token) {
                    if (this.start_of_statement(current_token)) {
                        // The conditional starts the statement if appropriate.
                        // Semicolon can be the start (and end) of a statement
                        this._output.space_before_token = false;
                    } else {
                        this.handle_whitespace_and_comments(current_token);
                    }
                    var next_token = this._tokens.peek();
                    while(this._flags.mode === MODE.Statement && !(this._flags.if_block && reserved_word(next_token, "else")) && !this._flags.do_block){
                        this.restore_mode();
                    }
                    // hacky but effective for the moment
                    if (this._flags.import_block) {
                        this._flags.import_block = false;
                    }
                    this.print_token(current_token);
                };
                Beautifier.prototype.handle_string = function(current_token) {
                    if (current_token.text.startsWith("`") && current_token.newlines === 0 && current_token.whitespace_before === "" && (current_token.previous.text === ")" || this._flags.last_token.type === TOKEN.WORD)) {
                    //Conditional for detectign backtick strings
                    } else if (this.start_of_statement(current_token)) {
                        // The conditional starts the statement if appropriate.
                        // One difference - strings want at least a space before
                        this._output.space_before_token = true;
                    } else {
                        this.handle_whitespace_and_comments(current_token);
                        if (this._flags.last_token.type === TOKEN.RESERVED || this._flags.last_token.type === TOKEN.WORD || this._flags.inline_frame) {
                            this._output.space_before_token = true;
                        } else if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.EQUALS || this._flags.last_token.type === TOKEN.OPERATOR) {
                            if (!this.start_of_object_property()) {
                                this.allow_wrap_or_preserved_newline(current_token);
                            }
                        } else if (current_token.text.startsWith("`") && this._flags.last_token.type === TOKEN.END_EXPR && (current_token.previous.text === "]" || current_token.previous.text === ")") && current_token.newlines === 0) {
                            this._output.space_before_token = true;
                        } else {
                            this.print_newline();
                        }
                    }
                    this.print_token(current_token);
                };
                Beautifier.prototype.handle_equals = function(current_token) {
                    if (this.start_of_statement(current_token)) {
                    // The conditional starts the statement if appropriate.
                    } else {
                        this.handle_whitespace_and_comments(current_token);
                    }
                    if (this._flags.declaration_statement) {
                        // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done
                        this._flags.declaration_assignment = true;
                    }
                    this._output.space_before_token = true;
                    this.print_token(current_token);
                    this._output.space_before_token = true;
                };
                Beautifier.prototype.handle_comma = function(current_token) {
                    this.handle_whitespace_and_comments(current_token, true);
                    this.print_token(current_token);
                    this._output.space_before_token = true;
                    if (this._flags.declaration_statement) {
                        if (is_expression(this._flags.parent.mode)) {
                            // do not break on comma, for(var a = 1, b = 2)
                            this._flags.declaration_assignment = false;
                        }
                        if (this._flags.declaration_assignment) {
                            this._flags.declaration_assignment = false;
                            this.print_newline(false, true);
                        } else if (this._options.comma_first) {
                            // for comma-first, we want to allow a newline before the comma
                            // to turn into a newline after the comma, which we will fixup later
                            this.allow_wrap_or_preserved_newline(current_token);
                        }
                    } else if (this._flags.mode === MODE.ObjectLiteral || this._flags.mode === MODE.Statement && this._flags.parent.mode === MODE.ObjectLiteral) {
                        if (this._flags.mode === MODE.Statement) {
                            this.restore_mode();
                        }
                        if (!this._flags.inline_frame) {
                            this.print_newline();
                        }
                    } else if (this._options.comma_first) {
                        // EXPR or DO_BLOCK
                        // for comma-first, we want to allow a newline before the comma
                        // to turn into a newline after the comma, which we will fixup later
                        this.allow_wrap_or_preserved_newline(current_token);
                    }
                };
                Beautifier.prototype.handle_operator = function(current_token) {
                    var isGeneratorAsterisk = current_token.text === "*" && (reserved_array(this._flags.last_token, [
                        "function",
                        "yield"
                    ]) || in_array(this._flags.last_token.type, [
                        TOKEN.START_BLOCK,
                        TOKEN.COMMA,
                        TOKEN.END_BLOCK,
                        TOKEN.SEMICOLON
                    ]));
                    var isUnary = in_array(current_token.text, [
                        "-",
                        "+"
                    ]) && (in_array(this._flags.last_token.type, [
                        TOKEN.START_BLOCK,
                        TOKEN.START_EXPR,
                        TOKEN.EQUALS,
                        TOKEN.OPERATOR
                    ]) || in_array(this._flags.last_token.text, line_starters) || this._flags.last_token.text === ",");
                    if (this.start_of_statement(current_token)) {
                    // The conditional starts the statement if appropriate.
                    } else {
                        var preserve_statement_flags = !isGeneratorAsterisk;
                        this.handle_whitespace_and_comments(current_token, preserve_statement_flags);
                    }
                    // hack for actionscript's import .*;
                    if (current_token.text === "*" && this._flags.last_token.type === TOKEN.DOT) {
                        this.print_token(current_token);
                        return;
                    }
                    if (current_token.text === "::") {
                        // no spaces around exotic namespacing syntax operator
                        this.print_token(current_token);
                        return;
                    }
                    // Allow line wrapping between operators when operator_position is
                    //   set to before or preserve
                    if (this._flags.last_token.type === TOKEN.OPERATOR && in_array(this._options.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)) {
                        this.allow_wrap_or_preserved_newline(current_token);
                    }
                    if (current_token.text === ":" && this._flags.in_case) {
                        this.print_token(current_token);
                        this._flags.in_case = false;
                        this._flags.case_body = true;
                        if (this._tokens.peek().type !== TOKEN.START_BLOCK) {
                            this.indent();
                            this.print_newline();
                            this._flags.case_block = false;
                        } else {
                            this._flags.case_block = true;
                            this._output.space_before_token = true;
                        }
                        return;
                    }
                    var space_before = true;
                    var space_after = true;
                    var in_ternary = false;
                    if (current_token.text === ":") {
                        if (this._flags.ternary_depth === 0) {
                            // Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.
                            space_before = false;
                        } else {
                            this._flags.ternary_depth -= 1;
                            in_ternary = true;
                        }
                    } else if (current_token.text === "?") {
                        this._flags.ternary_depth += 1;
                    }
                    // let's handle the operator_position option prior to any conflicting logic
                    if (!isUnary && !isGeneratorAsterisk && this._options.preserve_newlines && in_array(current_token.text, positionable_operators)) {
                        var isColon = current_token.text === ":";
                        var isTernaryColon = isColon && in_ternary;
                        var isOtherColon = isColon && !in_ternary;
                        switch(this._options.operator_position){
                            case OPERATOR_POSITION.before_newline:
                                // if the current token is : and it's not a ternary statement then we set space_before to false
                                this._output.space_before_token = !isOtherColon;
                                this.print_token(current_token);
                                if (!isColon || isTernaryColon) {
                                    this.allow_wrap_or_preserved_newline(current_token);
                                }
                                this._output.space_before_token = true;
                                return;
                            case OPERATOR_POSITION.after_newline:
                                // if the current token is anything but colon, or (via deduction) it's a colon and in a ternary statement,
                                //   then print a newline.
                                this._output.space_before_token = true;
                                if (!isColon || isTernaryColon) {
                                    if (this._tokens.peek().newlines) {
                                        this.print_newline(false, true);
                                    } else {
                                        this.allow_wrap_or_preserved_newline(current_token);
                                    }
                                } else {
                                    this._output.space_before_token = false;
                                }
                                this.print_token(current_token);
                                this._output.space_before_token = true;
                                return;
                            case OPERATOR_POSITION.preserve_newline:
                                if (!isOtherColon) {
                                    this.allow_wrap_or_preserved_newline(current_token);
                                }
                                // if we just added a newline, or the current token is : and it's not a ternary statement,
                                //   then we set space_before to false
                                space_before = !(this._output.just_added_newline() || isOtherColon);
                                this._output.space_before_token = space_before;
                                this.print_token(current_token);
                                this._output.space_before_token = true;
                                return;
                        }
                    }
                    if (isGeneratorAsterisk) {
                        this.allow_wrap_or_preserved_newline(current_token);
                        space_before = false;
                        var next_token = this._tokens.peek();
                        space_after = next_token && in_array(next_token.type, [
                            TOKEN.WORD,
                            TOKEN.RESERVED
                        ]);
                    } else if (current_token.text === "...") {
                        this.allow_wrap_or_preserved_newline(current_token);
                        space_before = this._flags.last_token.type === TOKEN.START_BLOCK;
                        space_after = false;
                    } else if (in_array(current_token.text, [
                        "--",
                        "++",
                        "!",
                        "~"
                    ]) || isUnary) {
                        // unary operators (and binary +/- pretending to be unary) special cases
                        if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR) {
                            this.allow_wrap_or_preserved_newline(current_token);
                        }
                        space_before = false;
                        space_after = false;
                        // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1
                        // if there is a newline between -- or ++ and anything else we should preserve it.
                        if (current_token.newlines && (current_token.text === "--" || current_token.text === "++" || current_token.text === "~")) {
                            var new_line_needed = reserved_array(this._flags.last_token, special_words) && current_token.newlines;
                            if (new_line_needed && (this._previous_flags.if_block || this._previous_flags.else_block)) {
                                this.restore_mode();
                            }
                            this.print_newline(new_line_needed, true);
                        }
                        if (this._flags.last_token.text === ";" && is_expression(this._flags.mode)) {
                            // for (;; ++i)
                            //        ^^^
                            space_before = true;
                        }
                        if (this._flags.last_token.type === TOKEN.RESERVED) {
                            space_before = true;
                        } else if (this._flags.last_token.type === TOKEN.END_EXPR) {
                            space_before = !(this._flags.last_token.text === "]" && (current_token.text === "--" || current_token.text === "++"));
                        } else if (this._flags.last_token.type === TOKEN.OPERATOR) {
                            // a++ + ++b;
                            // a - -b
                            space_before = in_array(current_token.text, [
                                "--",
                                "-",
                                "++",
                                "+"
                            ]) && in_array(this._flags.last_token.text, [
                                "--",
                                "-",
                                "++",
                                "+"
                            ]);
                            // + and - are not unary when preceeded by -- or ++ operator
                            // a-- + b
                            // a * +b
                            // a - -b
                            if (in_array(current_token.text, [
                                "+",
                                "-"
                            ]) && in_array(this._flags.last_token.text, [
                                "--",
                                "++"
                            ])) {
                                space_after = true;
                            }
                        }
                        if ((this._flags.mode === MODE.BlockStatement && !this._flags.inline_frame || this._flags.mode === MODE.Statement) && (this._flags.last_token.text === "{" || this._flags.last_token.text === ";")) {
                            // { foo; --i }
                            // foo(); --bar;
                            this.print_newline();
                        }
                    }
                    this._output.space_before_token = this._output.space_before_token || space_before;
                    this.print_token(current_token);
                    this._output.space_before_token = space_after;
                };
                Beautifier.prototype.handle_block_comment = function(current_token, preserve_statement_flags) {
                    if (this._output.raw) {
                        this._output.add_raw_token(current_token);
                        if (current_token.directives && current_token.directives.preserve === "end") {
                            // If we're testing the raw output behavior, do not allow a directive to turn it off.
                            this._output.raw = this._options.test_output_raw;
                        }
                        return;
                    }
                    if (current_token.directives) {
                        this.print_newline(false, preserve_statement_flags);
                        this.print_token(current_token);
                        if (current_token.directives.preserve === "start") {
                            this._output.raw = true;
                        }
                        this.print_newline(false, true);
                        return;
                    }
                    // inline block
                    if (!acorn.newline.test(current_token.text) && !current_token.newlines) {
                        this._output.space_before_token = true;
                        this.print_token(current_token);
                        this._output.space_before_token = true;
                        return;
                    } else {
                        this.print_block_commment(current_token, preserve_statement_flags);
                    }
                };
                Beautifier.prototype.print_block_commment = function(current_token, preserve_statement_flags) {
                    var lines = split_linebreaks(current_token.text);
                    var j; // iterator for this case
                    var javadoc = false;
                    var starless = false;
                    var lastIndent = current_token.whitespace_before;
                    var lastIndentLength = lastIndent.length;
                    // block comment starts with a new line
                    this.print_newline(false, preserve_statement_flags);
                    // first line always indented
                    this.print_token_line_indentation(current_token);
                    this._output.add_token(lines[0]);
                    this.print_newline(false, preserve_statement_flags);
                    if (lines.length > 1) {
                        lines = lines.slice(1);
                        javadoc = all_lines_start_with(lines, "*");
                        starless = each_line_matches_indent(lines, lastIndent);
                        if (javadoc) {
                            this._flags.alignment = 1;
                        }
                        for(j = 0; j < lines.length; j++){
                            if (javadoc) {
                                // javadoc: reformat and re-indent
                                this.print_token_line_indentation(current_token);
                                this._output.add_token(ltrim(lines[j]));
                            } else if (starless && lines[j]) {
                                // starless: re-indent non-empty content, avoiding trim
                                this.print_token_line_indentation(current_token);
                                this._output.add_token(lines[j].substring(lastIndentLength));
                            } else {
                                // normal comments output raw
                                this._output.current_line.set_indent(-1);
                                this._output.add_token(lines[j]);
                            }
                            // for comments on their own line or  more than one line, make sure there's a new line after
                            this.print_newline(false, preserve_statement_flags);
                        }
                        this._flags.alignment = 0;
                    }
                };
                Beautifier.prototype.handle_comment = function(current_token, preserve_statement_flags) {
                    if (current_token.newlines) {
                        this.print_newline(false, preserve_statement_flags);
                    } else {
                        this._output.trim(true);
                    }
                    this._output.space_before_token = true;
                    this.print_token(current_token);
                    this.print_newline(false, preserve_statement_flags);
                };
                Beautifier.prototype.handle_dot = function(current_token) {
                    if (this.start_of_statement(current_token)) {
                    // The conditional starts the statement if appropriate.
                    } else {
                        this.handle_whitespace_and_comments(current_token, true);
                    }
                    if (this._flags.last_token.text.match("^[0-9]+$")) {
                        this._output.space_before_token = true;
                    }
                    if (reserved_array(this._flags.last_token, special_words)) {
                        this._output.space_before_token = false;
                    } else {
                        // allow preserved newlines before dots in general
                        // force newlines on dots after close paren when break_chained - for bar().baz()
                        this.allow_wrap_or_preserved_newline(current_token, this._flags.last_token.text === ")" && this._options.break_chained_methods);
                    }
                    // Only unindent chained method dot if this dot starts a new line.
                    // Otherwise the automatic extra indentation removal will handle the over indent
                    if (this._options.unindent_chained_methods && this._output.just_added_newline()) {
                        this.deindent();
                    }
                    this.print_token(current_token);
                };
                Beautifier.prototype.handle_unknown = function(current_token, preserve_statement_flags) {
                    this.print_token(current_token);
                    if (current_token.text[current_token.text.length - 1] === "\n") {
                        this.print_newline(false, preserve_statement_flags);
                    }
                };
                Beautifier.prototype.handle_eof = function(current_token) {
                    // Unwind any open statements
                    while(this._flags.mode === MODE.Statement){
                        this.restore_mode();
                    }
                    this.handle_whitespace_and_comments(current_token);
                };
                module.exports.Beautifier = Beautifier;
            /***/ },
            /* 2 */ /***/ function(module) {
                /*jshint node:true */ /*
  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ function OutputLine(parent) {
                    this.__parent = parent;
                    this.__character_count = 0;
                    // use indent_count as a marker for this.__lines that have preserved indentation
                    this.__indent_count = -1;
                    this.__alignment_count = 0;
                    this.__wrap_point_index = 0;
                    this.__wrap_point_character_count = 0;
                    this.__wrap_point_indent_count = -1;
                    this.__wrap_point_alignment_count = 0;
                    this.__items = [];
                }
                OutputLine.prototype.clone_empty = function() {
                    var line = new OutputLine(this.__parent);
                    line.set_indent(this.__indent_count, this.__alignment_count);
                    return line;
                };
                OutputLine.prototype.item = function(index) {
                    if (index < 0) {
                        return this.__items[this.__items.length + index];
                    } else {
                        return this.__items[index];
                    }
                };
                OutputLine.prototype.has_match = function(pattern) {
                    for(var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--){
                        if (this.__items[lastCheckedOutput].match(pattern)) {
                            return true;
                        }
                    }
                    return false;
                };
                OutputLine.prototype.set_indent = function(indent, alignment) {
                    if (this.is_empty()) {
                        this.__indent_count = indent || 0;
                        this.__alignment_count = alignment || 0;
                        this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);
                    }
                };
                OutputLine.prototype._set_wrap_point = function() {
                    if (this.__parent.wrap_line_length) {
                        this.__wrap_point_index = this.__items.length;
                        this.__wrap_point_character_count = this.__character_count;
                        this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;
                        this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;
                    }
                };
                OutputLine.prototype._should_wrap = function() {
                    return this.__wrap_point_index && this.__character_count > this.__parent.wrap_line_length && this.__wrap_point_character_count > this.__parent.next_line.__character_count;
                };
                OutputLine.prototype._allow_wrap = function() {
                    if (this._should_wrap()) {
                        this.__parent.add_new_line();
                        var next = this.__parent.current_line;
                        next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);
                        next.__items = this.__items.slice(this.__wrap_point_index);
                        this.__items = this.__items.slice(0, this.__wrap_point_index);
                        next.__character_count += this.__character_count - this.__wrap_point_character_count;
                        this.__character_count = this.__wrap_point_character_count;
                        if (next.__items[0] === " ") {
                            next.__items.splice(0, 1);
                            next.__character_count -= 1;
                        }
                        return true;
                    }
                    return false;
                };
                OutputLine.prototype.is_empty = function() {
                    return this.__items.length === 0;
                };
                OutputLine.prototype.last = function() {
                    if (!this.is_empty()) {
                        return this.__items[this.__items.length - 1];
                    } else {
                        return null;
                    }
                };
                OutputLine.prototype.push = function(item) {
                    this.__items.push(item);
                    var last_newline_index = item.lastIndexOf("\n");
                    if (last_newline_index !== -1) {
                        this.__character_count = item.length - last_newline_index;
                    } else {
                        this.__character_count += item.length;
                    }
                };
                OutputLine.prototype.pop = function() {
                    var item = null;
                    if (!this.is_empty()) {
                        item = this.__items.pop();
                        this.__character_count -= item.length;
                    }
                    return item;
                };
                OutputLine.prototype._remove_indent = function() {
                    if (this.__indent_count > 0) {
                        this.__indent_count -= 1;
                        this.__character_count -= this.__parent.indent_size;
                    }
                };
                OutputLine.prototype._remove_wrap_indent = function() {
                    if (this.__wrap_point_indent_count > 0) {
                        this.__wrap_point_indent_count -= 1;
                    }
                };
                OutputLine.prototype.trim = function() {
                    while(this.last() === " "){
                        this.__items.pop();
                        this.__character_count -= 1;
                    }
                };
                OutputLine.prototype.toString = function() {
                    var result = "";
                    if (this.is_empty()) {
                        if (this.__parent.indent_empty_lines) {
                            result = this.__parent.get_indent_string(this.__indent_count);
                        }
                    } else {
                        result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);
                        result += this.__items.join("");
                    }
                    return result;
                };
                function IndentStringCache(options, baseIndentString) {
                    this.__cache = [
                        ""
                    ];
                    this.__indent_size = options.indent_size;
                    this.__indent_string = options.indent_char;
                    if (!options.indent_with_tabs) {
                        this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);
                    }
                    // Set to null to continue support for auto detection of base indent
                    baseIndentString = baseIndentString || "";
                    if (options.indent_level > 0) {
                        baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);
                    }
                    this.__base_string = baseIndentString;
                    this.__base_string_length = baseIndentString.length;
                }
                IndentStringCache.prototype.get_indent_size = function(indent, column) {
                    var result = this.__base_string_length;
                    column = column || 0;
                    if (indent < 0) {
                        result = 0;
                    }
                    result += indent * this.__indent_size;
                    result += column;
                    return result;
                };
                IndentStringCache.prototype.get_indent_string = function(indent_level, column) {
                    var result = this.__base_string;
                    column = column || 0;
                    if (indent_level < 0) {
                        indent_level = 0;
                        result = "";
                    }
                    column += indent_level * this.__indent_size;
                    this.__ensure_cache(column);
                    result += this.__cache[column];
                    return result;
                };
                IndentStringCache.prototype.__ensure_cache = function(column) {
                    while(column >= this.__cache.length){
                        this.__add_column();
                    }
                };
                IndentStringCache.prototype.__add_column = function() {
                    var column = this.__cache.length;
                    var indent = 0;
                    var result = "";
                    if (this.__indent_size && column >= this.__indent_size) {
                        indent = Math.floor(column / this.__indent_size);
                        column -= indent * this.__indent_size;
                        result = new Array(indent + 1).join(this.__indent_string);
                    }
                    if (column) {
                        result += new Array(column + 1).join(" ");
                    }
                    this.__cache.push(result);
                };
                function Output(options, baseIndentString) {
                    this.__indent_cache = new IndentStringCache(options, baseIndentString);
                    this.raw = false;
                    this._end_with_newline = options.end_with_newline;
                    this.indent_size = options.indent_size;
                    this.wrap_line_length = options.wrap_line_length;
                    this.indent_empty_lines = options.indent_empty_lines;
                    this.__lines = [];
                    this.previous_line = null;
                    this.current_line = null;
                    this.next_line = new OutputLine(this);
                    this.space_before_token = false;
                    this.non_breaking_space = false;
                    this.previous_token_wrapped = false;
                    // initialize
                    this.__add_outputline();
                }
                Output.prototype.__add_outputline = function() {
                    this.previous_line = this.current_line;
                    this.current_line = this.next_line.clone_empty();
                    this.__lines.push(this.current_line);
                };
                Output.prototype.get_line_number = function() {
                    return this.__lines.length;
                };
                Output.prototype.get_indent_string = function(indent, column) {
                    return this.__indent_cache.get_indent_string(indent, column);
                };
                Output.prototype.get_indent_size = function(indent, column) {
                    return this.__indent_cache.get_indent_size(indent, column);
                };
                Output.prototype.is_empty = function() {
                    return !this.previous_line && this.current_line.is_empty();
                };
                Output.prototype.add_new_line = function(force_newline) {
                    // never newline at the start of file
                    // otherwise, newline only if we didn't just add one or we're forced
                    if (this.is_empty() || !force_newline && this.just_added_newline()) {
                        return false;
                    }
                    // if raw output is enabled, don't print additional newlines,
                    // but still return True as though you had
                    if (!this.raw) {
                        this.__add_outputline();
                    }
                    return true;
                };
                Output.prototype.get_code = function(eol) {
                    this.trim(true);
                    // handle some edge cases where the last tokens
                    // has text that ends with newline(s)
                    var last_item = this.current_line.pop();
                    if (last_item) {
                        if (last_item[last_item.length - 1] === "\n") {
                            last_item = last_item.replace(/\n+$/g, "");
                        }
                        this.current_line.push(last_item);
                    }
                    if (this._end_with_newline) {
                        this.__add_outputline();
                    }
                    var sweet_code = this.__lines.join("\n");
                    if (eol !== "\n") {
                        sweet_code = sweet_code.replace(/[\n]/g, eol);
                    }
                    return sweet_code;
                };
                Output.prototype.set_wrap_point = function() {
                    this.current_line._set_wrap_point();
                };
                Output.prototype.set_indent = function(indent, alignment) {
                    indent = indent || 0;
                    alignment = alignment || 0;
                    // Next line stores alignment values
                    this.next_line.set_indent(indent, alignment);
                    // Never indent your first output indent at the start of the file
                    if (this.__lines.length > 1) {
                        this.current_line.set_indent(indent, alignment);
                        return true;
                    }
                    this.current_line.set_indent();
                    return false;
                };
                Output.prototype.add_raw_token = function(token) {
                    for(var x = 0; x < token.newlines; x++){
                        this.__add_outputline();
                    }
                    this.current_line.set_indent(-1);
                    this.current_line.push(token.whitespace_before);
                    this.current_line.push(token.text);
                    this.space_before_token = false;
                    this.non_breaking_space = false;
                    this.previous_token_wrapped = false;
                };
                Output.prototype.add_token = function(printable_token) {
                    this.__add_space_before_token();
                    this.current_line.push(printable_token);
                    this.space_before_token = false;
                    this.non_breaking_space = false;
                    this.previous_token_wrapped = this.current_line._allow_wrap();
                };
                Output.prototype.__add_space_before_token = function() {
                    if (this.space_before_token && !this.just_added_newline()) {
                        if (!this.non_breaking_space) {
                            this.set_wrap_point();
                        }
                        this.current_line.push(" ");
                    }
                };
                Output.prototype.remove_indent = function(index) {
                    var output_length = this.__lines.length;
                    while(index < output_length){
                        this.__lines[index]._remove_indent();
                        index++;
                    }
                    this.current_line._remove_wrap_indent();
                };
                Output.prototype.trim = function(eat_newlines) {
                    eat_newlines = eat_newlines === undefined ? false : eat_newlines;
                    this.current_line.trim();
                    while(eat_newlines && this.__lines.length > 1 && this.current_line.is_empty()){
                        this.__lines.pop();
                        this.current_line = this.__lines[this.__lines.length - 1];
                        this.current_line.trim();
                    }
                    this.previous_line = this.__lines.length > 1 ? this.__lines[this.__lines.length - 2] : null;
                };
                Output.prototype.just_added_newline = function() {
                    return this.current_line.is_empty();
                };
                Output.prototype.just_added_blankline = function() {
                    return this.is_empty() || this.current_line.is_empty() && this.previous_line.is_empty();
                };
                Output.prototype.ensure_empty_line_above = function(starts_with, ends_with) {
                    var index = this.__lines.length - 2;
                    while(index >= 0){
                        var potentialEmptyLine = this.__lines[index];
                        if (potentialEmptyLine.is_empty()) {
                            break;
                        } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 && potentialEmptyLine.item(-1) !== ends_with) {
                            this.__lines.splice(index + 1, 0, new OutputLine(this));
                            this.previous_line = this.__lines[this.__lines.length - 2];
                            break;
                        }
                        index--;
                    }
                };
                module.exports.Output = Output;
            /***/ },
            /* 3 */ /***/ function(module) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ function Token(type, text, newlines, whitespace_before) {
                    this.type = type;
                    this.text = text;
                    // comments_before are
                    // comments that have a new line before them
                    // and may or may not have a newline after
                    // this is a set of comments before
                    this.comments_before = null; /* inline comment*/ 
                    // this.comments_after =  new TokenStream(); // no new line before and newline after
                    this.newlines = newlines || 0;
                    this.whitespace_before = whitespace_before || "";
                    this.parent = null;
                    this.next = null;
                    this.previous = null;
                    this.opened = null;
                    this.closed = null;
                    this.directives = null;
                }
                module.exports.Token = Token;
            /***/ },
            /* 4 */ /***/ function(__unused_webpack_module, exports1) {
                /* jshint node: true, curly: false */ // Parts of this section of code is taken from acorn.
                //
                // Acorn was written by Marijn Haverbeke and released under an MIT
                // license. The Unicode regexps (for identifiers and whitespace) were
                // taken from [Esprima](http://esprima.org) by Ariya Hidayat.
                //
                // Git repositories for Acorn are available at
                //
                //     http://marijnhaverbeke.nl/git/acorn
                //     https://github.com/marijnh/acorn.git
                // ## Character categories
                // acorn used char codes to squeeze the last bit of performance out
                // Beautifier is okay without that, so we're using regex
                // permit # (23), $ (36), and @ (64). @ is used in ES7 decorators.
                // 65 through 91 are uppercase letters.
                // permit _ (95).
                // 97 through 123 are lowercase letters.
                var baseASCIIidentifierStartChars = "\\x23\\x24\\x40\\x41-\\x5a\\x5f\\x61-\\x7a";
                // inside an identifier @ is not allowed but 0-9 are.
                var baseASCIIidentifierChars = "\\x24\\x30-\\x39\\x41-\\x5a\\x5f\\x61-\\x7a";
                // Big ugly regular expressions that match characters in the
                // whitespace, identifier, and identifier-start categories. These
                // are only applied when a character is found to actually have a
                // code point above 128.
                var nonASCIIidentifierStartChars = "\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc";
                var nonASCIIidentifierChars = "\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f";
                //var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
                //var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
                var identifierStart = "(?:\\\\u[0-9a-fA-F]{4}|[" + baseASCIIidentifierStartChars + nonASCIIidentifierStartChars + "])";
                var identifierChars = "(?:\\\\u[0-9a-fA-F]{4}|[" + baseASCIIidentifierChars + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "])*";
                exports1.identifier = new RegExp(identifierStart + identifierChars, "g");
                exports1.identifierStart = new RegExp(identifierStart);
                exports1.identifierMatch = new RegExp("(?:\\\\u[0-9a-fA-F]{4}|[" + baseASCIIidentifierChars + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "])+");
                var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/; // jshint ignore:line
                // Whether a single character denotes a newline.
                exports1.newline = /[\n\r\u2028\u2029]/;
                // Matches a whole line break (where CRLF is considered a single
                // line break). Used to count lines.
                // in javascript, these two differ
                // in python they are the same, different methods are called on them
                exports1.lineBreak = new RegExp("\r\n|" + exports1.newline.source);
                exports1.allLineBreaks = new RegExp(exports1.lineBreak.source, "g");
            /***/ },
            /* 5 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_122088__) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var BaseOptions = __nested_webpack_require_122088__(6).Options;
                var validPositionValues = [
                    "before-newline",
                    "after-newline",
                    "preserve-newline"
                ];
                function Options(options) {
                    BaseOptions.call(this, options, "js");
                    // compatibility, re
                    var raw_brace_style = this.raw_options.brace_style || null;
                    if (raw_brace_style === "expand-strict") {
                        this.raw_options.brace_style = "expand";
                    } else if (raw_brace_style === "collapse-preserve-inline") {
                        this.raw_options.brace_style = "collapse,preserve-inline";
                    } else if (this.raw_options.braces_on_own_line !== undefined) {
                        this.raw_options.brace_style = this.raw_options.braces_on_own_line ? "expand" : "collapse";
                    // } else if (!raw_brace_style) { //Nothing exists to set it
                    //   raw_brace_style = "collapse";
                    }
                    //preserve-inline in delimited string will trigger brace_preserve_inline, everything
                    //else is considered a brace_style and the last one only will have an effect
                    var brace_style_split = this._get_selection_list("brace_style", [
                        "collapse",
                        "expand",
                        "end-expand",
                        "none",
                        "preserve-inline"
                    ]);
                    this.brace_preserve_inline = false; //Defaults in case one or other was not specified in meta-option
                    this.brace_style = "collapse";
                    for(var bs = 0; bs < brace_style_split.length; bs++){
                        if (brace_style_split[bs] === "preserve-inline") {
                            this.brace_preserve_inline = true;
                        } else {
                            this.brace_style = brace_style_split[bs];
                        }
                    }
                    this.unindent_chained_methods = this._get_boolean("unindent_chained_methods");
                    this.break_chained_methods = this._get_boolean("break_chained_methods");
                    this.space_in_paren = this._get_boolean("space_in_paren");
                    this.space_in_empty_paren = this._get_boolean("space_in_empty_paren");
                    this.jslint_happy = this._get_boolean("jslint_happy");
                    this.space_after_anon_function = this._get_boolean("space_after_anon_function");
                    this.space_after_named_function = this._get_boolean("space_after_named_function");
                    this.keep_array_indentation = this._get_boolean("keep_array_indentation");
                    this.space_before_conditional = this._get_boolean("space_before_conditional", true);
                    this.unescape_strings = this._get_boolean("unescape_strings");
                    this.e4x = this._get_boolean("e4x");
                    this.comma_first = this._get_boolean("comma_first");
                    this.operator_position = this._get_selection("operator_position", validPositionValues);
                    // For testing of beautify preserve:start directive
                    this.test_output_raw = this._get_boolean("test_output_raw");
                    // force this._options.space_after_anon_function to true if this._options.jslint_happy
                    if (this.jslint_happy) {
                        this.space_after_anon_function = true;
                    }
                }
                Options.prototype = new BaseOptions();
                module.exports.Options = Options;
            /***/ },
            /* 6 */ /***/ function(module) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ function Options(options, merge_child_field) {
                    this.raw_options = _mergeOpts(options, merge_child_field);
                    // Support passing the source text back with no change
                    this.disabled = this._get_boolean("disabled");
                    this.eol = this._get_characters("eol", "auto");
                    this.end_with_newline = this._get_boolean("end_with_newline");
                    this.indent_size = this._get_number("indent_size", 4);
                    this.indent_char = this._get_characters("indent_char", " ");
                    this.indent_level = this._get_number("indent_level");
                    this.preserve_newlines = this._get_boolean("preserve_newlines", true);
                    this.max_preserve_newlines = this._get_number("max_preserve_newlines", 32786);
                    if (!this.preserve_newlines) {
                        this.max_preserve_newlines = 0;
                    }
                    this.indent_with_tabs = this._get_boolean("indent_with_tabs", this.indent_char === "	");
                    if (this.indent_with_tabs) {
                        this.indent_char = "	";
                        // indent_size behavior changed after 1.8.6
                        // It used to be that indent_size would be
                        // set to 1 for indent_with_tabs. That is no longer needed and
                        // actually doesn't make sense - why not use spaces? Further,
                        // that might produce unexpected behavior - tabs being used
                        // for single-column alignment. So, when indent_with_tabs is true
                        // and indent_size is 1, reset indent_size to 4.
                        if (this.indent_size === 1) {
                            this.indent_size = 4;
                        }
                    }
                    // Backwards compat with 1.3.x
                    this.wrap_line_length = this._get_number("wrap_line_length", this._get_number("max_char"));
                    this.indent_empty_lines = this._get_boolean("indent_empty_lines");
                    // valid templating languages ['django', 'erb', 'handlebars', 'php', 'smarty']
                    // For now, 'auto' = all off for javascript, all on for html (and inline javascript).
                    // other values ignored
                    this.templating = this._get_selection_list("templating", [
                        "auto",
                        "none",
                        "django",
                        "erb",
                        "handlebars",
                        "php",
                        "smarty"
                    ], [
                        "auto"
                    ]);
                }
                Options.prototype._get_array = function(name, default_value) {
                    var option_value = this.raw_options[name];
                    var result = default_value || [];
                    if (typeof option_value === "object") {
                        if (option_value !== null && typeof option_value.concat === "function") {
                            result = option_value.concat();
                        }
                    } else if (typeof option_value === "string") {
                        result = option_value.split(/[^a-zA-Z0-9_\/\-]+/);
                    }
                    return result;
                };
                Options.prototype._get_boolean = function(name, default_value) {
                    var option_value = this.raw_options[name];
                    var result = option_value === undefined ? !!default_value : !!option_value;
                    return result;
                };
                Options.prototype._get_characters = function(name, default_value) {
                    var option_value = this.raw_options[name];
                    var result = default_value || "";
                    if (typeof option_value === "string") {
                        result = option_value.replace(/\\r/, "\r").replace(/\\n/, "\n").replace(/\\t/, "	");
                    }
                    return result;
                };
                Options.prototype._get_number = function(name, default_value) {
                    var option_value = this.raw_options[name];
                    default_value = parseInt(default_value, 10);
                    if (isNaN(default_value)) {
                        default_value = 0;
                    }
                    var result = parseInt(option_value, 10);
                    if (isNaN(result)) {
                        result = default_value;
                    }
                    return result;
                };
                Options.prototype._get_selection = function(name, selection_list, default_value) {
                    var result = this._get_selection_list(name, selection_list, default_value);
                    if (result.length !== 1) {
                        throw new Error("Invalid Option Value: The option '" + name + "' can only be one of the following values:\n" + selection_list + "\nYou passed in: '" + this.raw_options[name] + "'");
                    }
                    return result[0];
                };
                Options.prototype._get_selection_list = function(name, selection_list, default_value) {
                    if (!selection_list || selection_list.length === 0) {
                        throw new Error("Selection list cannot be empty.");
                    }
                    default_value = default_value || [
                        selection_list[0]
                    ];
                    if (!this._is_valid_selection(default_value, selection_list)) {
                        throw new Error("Invalid Default Value!");
                    }
                    var result = this._get_array(name, default_value);
                    if (!this._is_valid_selection(result, selection_list)) {
                        throw new Error("Invalid Option Value: The option '" + name + "' can contain only the following values:\n" + selection_list + "\nYou passed in: '" + this.raw_options[name] + "'");
                    }
                    return result;
                };
                Options.prototype._is_valid_selection = function(result, selection_list) {
                    return result.length && selection_list.length && !result.some(function(item) {
                        return selection_list.indexOf(item) === -1;
                    });
                };
                // merges child options up with the parent options object
                // Example: obj = {a: 1, b: {a: 2}}
                //          mergeOpts(obj, 'b')
                //
                //          Returns: {a: 2}
                function _mergeOpts(allOptions, childFieldName) {
                    var finalOpts = {};
                    allOptions = _normalizeOpts(allOptions);
                    var name;
                    for(name in allOptions){
                        if (name !== childFieldName) {
                            finalOpts[name] = allOptions[name];
                        }
                    }
                    //merge in the per type settings for the childFieldName
                    if (childFieldName && allOptions[childFieldName]) {
                        for(name in allOptions[childFieldName]){
                            finalOpts[name] = allOptions[childFieldName][name];
                        }
                    }
                    return finalOpts;
                }
                function _normalizeOpts(options) {
                    var convertedOpts = {};
                    var key;
                    for(key in options){
                        var newKey = key.replace(/-/g, "_");
                        convertedOpts[newKey] = options[key];
                    }
                    return convertedOpts;
                }
                module.exports.Options = Options;
                module.exports.normalizeOpts = _normalizeOpts;
                module.exports.mergeOpts = _mergeOpts;
            /***/ },
            /* 7 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_136615__) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var InputScanner = __nested_webpack_require_136615__(8).InputScanner;
                var BaseTokenizer = __nested_webpack_require_136615__(9).Tokenizer;
                var BASETOKEN = __nested_webpack_require_136615__(9).TOKEN;
                var Directives = __nested_webpack_require_136615__(13).Directives;
                var acorn = __nested_webpack_require_136615__(4);
                var Pattern = __nested_webpack_require_136615__(12).Pattern;
                var TemplatablePattern = __nested_webpack_require_136615__(14).TemplatablePattern;
                function in_array(what, arr) {
                    return arr.indexOf(what) !== -1;
                }
                var TOKEN = {
                    START_EXPR: "TK_START_EXPR",
                    END_EXPR: "TK_END_EXPR",
                    START_BLOCK: "TK_START_BLOCK",
                    END_BLOCK: "TK_END_BLOCK",
                    WORD: "TK_WORD",
                    RESERVED: "TK_RESERVED",
                    SEMICOLON: "TK_SEMICOLON",
                    STRING: "TK_STRING",
                    EQUALS: "TK_EQUALS",
                    OPERATOR: "TK_OPERATOR",
                    COMMA: "TK_COMMA",
                    BLOCK_COMMENT: "TK_BLOCK_COMMENT",
                    COMMENT: "TK_COMMENT",
                    DOT: "TK_DOT",
                    UNKNOWN: "TK_UNKNOWN",
                    START: BASETOKEN.START,
                    RAW: BASETOKEN.RAW,
                    EOF: BASETOKEN.EOF
                };
                var directives_core = new Directives(/\/\*/, /\*\//);
                var number_pattern = /0[xX][0123456789abcdefABCDEF_]*n?|0[oO][01234567_]*n?|0[bB][01_]*n?|\d[\d_]*n|(?:\.\d[\d_]*|\d[\d_]*\.?[\d_]*)(?:[eE][+-]?[\d_]+)?/;
                var digit = /[0-9]/;
                // Dot "." must be distinguished from "..." and decimal
                var dot_pattern = /[^\d\.]/;
                var positionable_operators = (">>> === !== &&= ??= ||= " + "<< && >= ** != == <= >> || ?? |> " + "< / - + > : & % ? ^ | *").split(" ");
                // IMPORTANT: this must be sorted longest to shortest or tokenizing many not work.
                // Also, you must update possitionable operators separately from punct
                var punct = ">>>= " + "... >>= <<= === >>> !== **= &&= ??= ||= " + "=> ^= :: /= << <= == && -= >= >> != -- += ** || ?? ++ %= &= *= |= |> " + "= ! ? > < : / ^ - + * & % ~ |";
                punct = punct.replace(/[-[\]{}()*+?.,\\^$|#]/g, "\\$&");
                // ?. but not if followed by a number 
                punct = "\\?\\.(?!\\d) " + punct;
                punct = punct.replace(/ /g, "|");
                var punct_pattern = new RegExp(punct);
                // words which should always start on new line.
                var line_starters = "continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export".split(",");
                var reserved_words = line_starters.concat([
                    "do",
                    "in",
                    "of",
                    "else",
                    "get",
                    "set",
                    "new",
                    "catch",
                    "finally",
                    "typeof",
                    "yield",
                    "async",
                    "await",
                    "from",
                    "as",
                    "class",
                    "extends"
                ]);
                var reserved_word_pattern = new RegExp("^(?:" + reserved_words.join("|") + ")$");
                // var template_pattern = /(?:(?:<\?php|<\?=)[\s\S]*?\?>)|(?:<%[\s\S]*?%>)/g;
                var in_html_comment;
                var Tokenizer = function(input_string, options) {
                    BaseTokenizer.call(this, input_string, options);
                    this._patterns.whitespace = this._patterns.whitespace.matching(/\u00A0\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff/.source, /\u2028\u2029/.source);
                    var pattern_reader = new Pattern(this._input);
                    var templatable = new TemplatablePattern(this._input).read_options(this._options);
                    this.__patterns = {
                        template: templatable,
                        identifier: templatable.starting_with(acorn.identifier).matching(acorn.identifierMatch),
                        number: pattern_reader.matching(number_pattern),
                        punct: pattern_reader.matching(punct_pattern),
                        // comment ends just before nearest linefeed or end of file
                        comment: pattern_reader.starting_with(/\/\//).until(/[\n\r\u2028\u2029]/),
                        //  /* ... */ comment ends with nearest */ or end of file
                        block_comment: pattern_reader.starting_with(/\/\*/).until_after(/\*\//),
                        html_comment_start: pattern_reader.matching(/<!--/),
                        html_comment_end: pattern_reader.matching(/-->/),
                        include: pattern_reader.starting_with(/#include/).until_after(acorn.lineBreak),
                        shebang: pattern_reader.starting_with(/#!/).until_after(acorn.lineBreak),
                        xml: pattern_reader.matching(/[\s\S]*?<(\/?)([-a-zA-Z:0-9_.]+|{[^}]+?}|!\[CDATA\[[^\]]*?\]\]|)(\s*{[^}]+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{([^{}]|{[^}]+?})+?}))*\s*(\/?)\s*>/),
                        single_quote: templatable.until(/['\\\n\r\u2028\u2029]/),
                        double_quote: templatable.until(/["\\\n\r\u2028\u2029]/),
                        template_text: templatable.until(/[`\\$]/),
                        template_expression: templatable.until(/[`}\\]/)
                    };
                };
                Tokenizer.prototype = new BaseTokenizer();
                Tokenizer.prototype._is_comment = function(current_token) {
                    return current_token.type === TOKEN.COMMENT || current_token.type === TOKEN.BLOCK_COMMENT || current_token.type === TOKEN.UNKNOWN;
                };
                Tokenizer.prototype._is_opening = function(current_token) {
                    return current_token.type === TOKEN.START_BLOCK || current_token.type === TOKEN.START_EXPR;
                };
                Tokenizer.prototype._is_closing = function(current_token, open_token) {
                    return (current_token.type === TOKEN.END_BLOCK || current_token.type === TOKEN.END_EXPR) && open_token && (current_token.text === "]" && open_token.text === "[" || current_token.text === ")" && open_token.text === "(" || current_token.text === "}" && open_token.text === "{");
                };
                Tokenizer.prototype._reset = function() {
                    in_html_comment = false;
                };
                Tokenizer.prototype._get_next_token = function(previous_token, open_token) {
                    var token = null;
                    this._readWhitespace();
                    var c = this._input.peek();
                    if (c === null) {
                        return this._create_token(TOKEN.EOF, "");
                    }
                    token = token || this._read_non_javascript(c);
                    token = token || this._read_string(c);
                    token = token || this._read_pair(c, this._input.peek(1)); // Issue #2062 hack for record type '#{'
                    token = token || this._read_word(previous_token);
                    token = token || this._read_singles(c);
                    token = token || this._read_comment(c);
                    token = token || this._read_regexp(c, previous_token);
                    token = token || this._read_xml(c, previous_token);
                    token = token || this._read_punctuation();
                    token = token || this._create_token(TOKEN.UNKNOWN, this._input.next());
                    return token;
                };
                Tokenizer.prototype._read_word = function(previous_token) {
                    var resulting_string;
                    resulting_string = this.__patterns.identifier.read();
                    if (resulting_string !== "") {
                        resulting_string = resulting_string.replace(acorn.allLineBreaks, "\n");
                        if (!(previous_token.type === TOKEN.DOT || previous_token.type === TOKEN.RESERVED && (previous_token.text === "set" || previous_token.text === "get")) && reserved_word_pattern.test(resulting_string)) {
                            if ((resulting_string === "in" || resulting_string === "of") && (previous_token.type === TOKEN.WORD || previous_token.type === TOKEN.STRING)) {
                                return this._create_token(TOKEN.OPERATOR, resulting_string);
                            }
                            return this._create_token(TOKEN.RESERVED, resulting_string);
                        }
                        return this._create_token(TOKEN.WORD, resulting_string);
                    }
                    resulting_string = this.__patterns.number.read();
                    if (resulting_string !== "") {
                        return this._create_token(TOKEN.WORD, resulting_string);
                    }
                };
                Tokenizer.prototype._read_singles = function(c) {
                    var token = null;
                    if (c === "(" || c === "[") {
                        token = this._create_token(TOKEN.START_EXPR, c);
                    } else if (c === ")" || c === "]") {
                        token = this._create_token(TOKEN.END_EXPR, c);
                    } else if (c === "{") {
                        token = this._create_token(TOKEN.START_BLOCK, c);
                    } else if (c === "}") {
                        token = this._create_token(TOKEN.END_BLOCK, c);
                    } else if (c === ";") {
                        token = this._create_token(TOKEN.SEMICOLON, c);
                    } else if (c === "." && dot_pattern.test(this._input.peek(1))) {
                        token = this._create_token(TOKEN.DOT, c);
                    } else if (c === ",") {
                        token = this._create_token(TOKEN.COMMA, c);
                    }
                    if (token) {
                        this._input.next();
                    }
                    return token;
                };
                Tokenizer.prototype._read_pair = function(c, d) {
                    var token = null;
                    if (c === "#" && d === "{") {
                        token = this._create_token(TOKEN.START_BLOCK, c + d);
                    }
                    if (token) {
                        this._input.next();
                        this._input.next();
                    }
                    return token;
                };
                Tokenizer.prototype._read_punctuation = function() {
                    var resulting_string = this.__patterns.punct.read();
                    if (resulting_string !== "") {
                        if (resulting_string === "=") {
                            return this._create_token(TOKEN.EQUALS, resulting_string);
                        } else if (resulting_string === "?.") {
                            return this._create_token(TOKEN.DOT, resulting_string);
                        } else {
                            return this._create_token(TOKEN.OPERATOR, resulting_string);
                        }
                    }
                };
                Tokenizer.prototype._read_non_javascript = function(c) {
                    var resulting_string = "";
                    if (c === "#") {
                        if (this._is_first_token()) {
                            resulting_string = this.__patterns.shebang.read();
                            if (resulting_string) {
                                return this._create_token(TOKEN.UNKNOWN, resulting_string.trim() + "\n");
                            }
                        }
                        // handles extendscript #includes
                        resulting_string = this.__patterns.include.read();
                        if (resulting_string) {
                            return this._create_token(TOKEN.UNKNOWN, resulting_string.trim() + "\n");
                        }
                        c = this._input.next();
                        // Spidermonkey-specific sharp variables for circular references. Considered obsolete.
                        var sharp = "#";
                        if (this._input.hasNext() && this._input.testChar(digit)) {
                            do {
                                c = this._input.next();
                                sharp += c;
                            }while (this._input.hasNext() && c !== "#" && c !== "=");
                            if (c === "#") {
                            //
                            } else if (this._input.peek() === "[" && this._input.peek(1) === "]") {
                                sharp += "[]";
                                this._input.next();
                                this._input.next();
                            } else if (this._input.peek() === "{" && this._input.peek(1) === "}") {
                                sharp += "{}";
                                this._input.next();
                                this._input.next();
                            }
                            return this._create_token(TOKEN.WORD, sharp);
                        }
                        this._input.back();
                    } else if (c === "<" && this._is_first_token()) {
                        resulting_string = this.__patterns.html_comment_start.read();
                        if (resulting_string) {
                            while(this._input.hasNext() && !this._input.testChar(acorn.newline)){
                                resulting_string += this._input.next();
                            }
                            in_html_comment = true;
                            return this._create_token(TOKEN.COMMENT, resulting_string);
                        }
                    } else if (in_html_comment && c === "-") {
                        resulting_string = this.__patterns.html_comment_end.read();
                        if (resulting_string) {
                            in_html_comment = false;
                            return this._create_token(TOKEN.COMMENT, resulting_string);
                        }
                    }
                    return null;
                };
                Tokenizer.prototype._read_comment = function(c) {
                    var token = null;
                    if (c === "/") {
                        var comment = "";
                        if (this._input.peek(1) === "*") {
                            // peek for comment /* ... */
                            comment = this.__patterns.block_comment.read();
                            var directives = directives_core.get_directives(comment);
                            if (directives && directives.ignore === "start") {
                                comment += directives_core.readIgnored(this._input);
                            }
                            comment = comment.replace(acorn.allLineBreaks, "\n");
                            token = this._create_token(TOKEN.BLOCK_COMMENT, comment);
                            token.directives = directives;
                        } else if (this._input.peek(1) === "/") {
                            // peek for comment // ...
                            comment = this.__patterns.comment.read();
                            token = this._create_token(TOKEN.COMMENT, comment);
                        }
                    }
                    return token;
                };
                Tokenizer.prototype._read_string = function(c) {
                    if (c === "`" || c === "'" || c === '"') {
                        var resulting_string = this._input.next();
                        this.has_char_escapes = false;
                        if (c === "`") {
                            resulting_string += this._read_string_recursive("`", true, "${");
                        } else {
                            resulting_string += this._read_string_recursive(c);
                        }
                        if (this.has_char_escapes && this._options.unescape_strings) {
                            resulting_string = unescape_string(resulting_string);
                        }
                        if (this._input.peek() === c) {
                            resulting_string += this._input.next();
                        }
                        resulting_string = resulting_string.replace(acorn.allLineBreaks, "\n");
                        return this._create_token(TOKEN.STRING, resulting_string);
                    }
                    return null;
                };
                Tokenizer.prototype._allow_regexp_or_xml = function(previous_token) {
                    // regex and xml can only appear in specific locations during parsing
                    return previous_token.type === TOKEN.RESERVED && in_array(previous_token.text, [
                        "return",
                        "case",
                        "throw",
                        "else",
                        "do",
                        "typeof",
                        "yield"
                    ]) || previous_token.type === TOKEN.END_EXPR && previous_token.text === ")" && previous_token.opened.previous.type === TOKEN.RESERVED && in_array(previous_token.opened.previous.text, [
                        "if",
                        "while",
                        "for"
                    ]) || in_array(previous_token.type, [
                        TOKEN.COMMENT,
                        TOKEN.START_EXPR,
                        TOKEN.START_BLOCK,
                        TOKEN.START,
                        TOKEN.END_BLOCK,
                        TOKEN.OPERATOR,
                        TOKEN.EQUALS,
                        TOKEN.EOF,
                        TOKEN.SEMICOLON,
                        TOKEN.COMMA
                    ]);
                };
                Tokenizer.prototype._read_regexp = function(c, previous_token) {
                    if (c === "/" && this._allow_regexp_or_xml(previous_token)) {
                        // handle regexp
                        //
                        var resulting_string = this._input.next();
                        var esc = false;
                        var in_char_class = false;
                        while(this._input.hasNext() && (esc || in_char_class || this._input.peek() !== c) && !this._input.testChar(acorn.newline)){
                            resulting_string += this._input.peek();
                            if (!esc) {
                                esc = this._input.peek() === "\\";
                                if (this._input.peek() === "[") {
                                    in_char_class = true;
                                } else if (this._input.peek() === "]") {
                                    in_char_class = false;
                                }
                            } else {
                                esc = false;
                            }
                            this._input.next();
                        }
                        if (this._input.peek() === c) {
                            resulting_string += this._input.next();
                            // regexps may have modifiers /regexp/MOD , so fetch those, too
                            // Only [gim] are valid, but if the user puts in garbage, do what we can to take it.
                            resulting_string += this._input.read(acorn.identifier);
                        }
                        return this._create_token(TOKEN.STRING, resulting_string);
                    }
                    return null;
                };
                Tokenizer.prototype._read_xml = function(c, previous_token) {
                    if (this._options.e4x && c === "<" && this._allow_regexp_or_xml(previous_token)) {
                        var xmlStr = "";
                        var match = this.__patterns.xml.read_match();
                        // handle e4x xml literals
                        //
                        if (match) {
                            // Trim root tag to attempt to
                            var rootTag = match[2].replace(/^{\s+/, "{").replace(/\s+}$/, "}");
                            var isCurlyRoot = rootTag.indexOf("{") === 0;
                            var depth = 0;
                            while(match){
                                var isEndTag = !!match[1];
                                var tagName = match[2];
                                var isSingletonTag = !!match[match.length - 1] || tagName.slice(0, 8) === "![CDATA[";
                                if (!isSingletonTag && (tagName === rootTag || isCurlyRoot && tagName.replace(/^{\s+/, "{").replace(/\s+}$/, "}"))) {
                                    if (isEndTag) {
                                        --depth;
                                    } else {
                                        ++depth;
                                    }
                                }
                                xmlStr += match[0];
                                if (depth <= 0) {
                                    break;
                                }
                                match = this.__patterns.xml.read_match();
                            }
                            // if we didn't close correctly, keep unformatted.
                            if (!match) {
                                xmlStr += this._input.match(/[\s\S]*/g)[0];
                            }
                            xmlStr = xmlStr.replace(acorn.allLineBreaks, "\n");
                            return this._create_token(TOKEN.STRING, xmlStr);
                        }
                    }
                    return null;
                };
                function unescape_string(s) {
                    // You think that a regex would work for this
                    // return s.replace(/\\x([0-9a-f]{2})/gi, function(match, val) {
                    //         return String.fromCharCode(parseInt(val, 16));
                    //     })
                    // However, dealing with '\xff', '\\xff', '\\\xff' makes this more fun.
                    var out = "", escaped = 0;
                    var input_scan = new InputScanner(s);
                    var matched = null;
                    while(input_scan.hasNext()){
                        // Keep any whitespace, non-slash characters
                        // also keep slash pairs.
                        matched = input_scan.match(/([\s]|[^\\]|\\\\)+/g);
                        if (matched) {
                            out += matched[0];
                        }
                        if (input_scan.peek() === "\\") {
                            input_scan.next();
                            if (input_scan.peek() === "x") {
                                matched = input_scan.match(/x([0-9A-Fa-f]{2})/g);
                            } else if (input_scan.peek() === "u") {
                                matched = input_scan.match(/u([0-9A-Fa-f]{4})/g);
                            } else {
                                out += "\\";
                                if (input_scan.hasNext()) {
                                    out += input_scan.next();
                                }
                                continue;
                            }
                            // If there's some error decoding, return the original string
                            if (!matched) {
                                return s;
                            }
                            escaped = parseInt(matched[1], 16);
                            if (escaped > 0x7e && escaped <= 0xff && matched[0].indexOf("x") === 0) {
                                // we bail out on \x7f..\xff,
                                // leaving whole string escaped,
                                // as it's probably completely binary
                                return s;
                            } else if (escaped >= 0x00 && escaped < 0x20) {
                                // leave 0x00...0x1f escaped
                                out += "\\" + matched[0];
                                continue;
                            } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {
                                // single-quote, apostrophe, backslash - escape these
                                out += "\\" + String.fromCharCode(escaped);
                            } else {
                                out += String.fromCharCode(escaped);
                            }
                        }
                    }
                    return out;
                }
                // handle string
                //
                Tokenizer.prototype._read_string_recursive = function(delimiter, allow_unescaped_newlines, start_sub) {
                    var current_char;
                    var pattern;
                    if (delimiter === "'") {
                        pattern = this.__patterns.single_quote;
                    } else if (delimiter === '"') {
                        pattern = this.__patterns.double_quote;
                    } else if (delimiter === "`") {
                        pattern = this.__patterns.template_text;
                    } else if (delimiter === "}") {
                        pattern = this.__patterns.template_expression;
                    }
                    var resulting_string = pattern.read();
                    var next = "";
                    while(this._input.hasNext()){
                        next = this._input.next();
                        if (next === delimiter || !allow_unescaped_newlines && acorn.newline.test(next)) {
                            this._input.back();
                            break;
                        } else if (next === "\\" && this._input.hasNext()) {
                            current_char = this._input.peek();
                            if (current_char === "x" || current_char === "u") {
                                this.has_char_escapes = true;
                            } else if (current_char === "\r" && this._input.peek(1) === "\n") {
                                this._input.next();
                            }
                            next += this._input.next();
                        } else if (start_sub) {
                            if (start_sub === "${" && next === "$" && this._input.peek() === "{") {
                                next += this._input.next();
                            }
                            if (start_sub === next) {
                                if (delimiter === "`") {
                                    next += this._read_string_recursive("}", allow_unescaped_newlines, "`");
                                } else {
                                    next += this._read_string_recursive("`", allow_unescaped_newlines, "${");
                                }
                                if (this._input.hasNext()) {
                                    next += this._input.next();
                                }
                            }
                        }
                        next += pattern.read();
                        resulting_string += next;
                    }
                    return resulting_string;
                };
                module.exports.Tokenizer = Tokenizer;
                module.exports.TOKEN = TOKEN;
                module.exports.positionable_operators = positionable_operators.slice();
                module.exports.line_starters = line_starters.slice();
            /***/ },
            /* 8 */ /***/ function(module) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var regexp_has_sticky = RegExp.prototype.hasOwnProperty("sticky");
                function InputScanner(input_string) {
                    this.__input = input_string || "";
                    this.__input_length = this.__input.length;
                    this.__position = 0;
                }
                InputScanner.prototype.restart = function() {
                    this.__position = 0;
                };
                InputScanner.prototype.back = function() {
                    if (this.__position > 0) {
                        this.__position -= 1;
                    }
                };
                InputScanner.prototype.hasNext = function() {
                    return this.__position < this.__input_length;
                };
                InputScanner.prototype.next = function() {
                    var val = null;
                    if (this.hasNext()) {
                        val = this.__input.charAt(this.__position);
                        this.__position += 1;
                    }
                    return val;
                };
                InputScanner.prototype.peek = function(index) {
                    var val = null;
                    index = index || 0;
                    index += this.__position;
                    if (index >= 0 && index < this.__input_length) {
                        val = this.__input.charAt(index);
                    }
                    return val;
                };
                // This is a JavaScript only helper function (not in python)
                // Javascript doesn't have a match method
                // and not all implementation support "sticky" flag.
                // If they do not support sticky then both this.match() and this.test() method
                // must get the match and check the index of the match.
                // If sticky is supported and set, this method will use it.
                // Otherwise it will check that global is set, and fall back to the slower method.
                InputScanner.prototype.__match = function(pattern, index) {
                    pattern.lastIndex = index;
                    var pattern_match = pattern.exec(this.__input);
                    if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {
                        if (pattern_match.index !== index) {
                            pattern_match = null;
                        }
                    }
                    return pattern_match;
                };
                InputScanner.prototype.test = function(pattern, index) {
                    index = index || 0;
                    index += this.__position;
                    if (index >= 0 && index < this.__input_length) {
                        return !!this.__match(pattern, index);
                    } else {
                        return false;
                    }
                };
                InputScanner.prototype.testChar = function(pattern, index) {
                    // test one character regex match
                    var val = this.peek(index);
                    pattern.lastIndex = 0;
                    return val !== null && pattern.test(val);
                };
                InputScanner.prototype.match = function(pattern) {
                    var pattern_match = this.__match(pattern, this.__position);
                    if (pattern_match) {
                        this.__position += pattern_match[0].length;
                    } else {
                        pattern_match = null;
                    }
                    return pattern_match;
                };
                InputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {
                    var val = "";
                    var match;
                    if (starting_pattern) {
                        match = this.match(starting_pattern);
                        if (match) {
                            val += match[0];
                        }
                    }
                    if (until_pattern && (match || !starting_pattern)) {
                        val += this.readUntil(until_pattern, until_after);
                    }
                    return val;
                };
                InputScanner.prototype.readUntil = function(pattern, until_after) {
                    var val = "";
                    var match_index = this.__position;
                    pattern.lastIndex = this.__position;
                    var pattern_match = pattern.exec(this.__input);
                    if (pattern_match) {
                        match_index = pattern_match.index;
                        if (until_after) {
                            match_index += pattern_match[0].length;
                        }
                    } else {
                        match_index = this.__input_length;
                    }
                    val = this.__input.substring(this.__position, match_index);
                    this.__position = match_index;
                    return val;
                };
                InputScanner.prototype.readUntilAfter = function(pattern) {
                    return this.readUntil(pattern, true);
                };
                InputScanner.prototype.get_regexp = function(pattern, match_from) {
                    var result = null;
                    var flags = "g";
                    if (match_from && regexp_has_sticky) {
                        flags = "y";
                    }
                    // strings are converted to regexp
                    if (typeof pattern === "string" && pattern !== "") {
                        // result = new RegExp(pattern.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'), flags);
                        result = new RegExp(pattern, flags);
                    } else if (pattern) {
                        result = new RegExp(pattern.source, flags);
                    }
                    return result;
                };
                InputScanner.prototype.get_literal_regexp = function(literal_string) {
                    return RegExp(literal_string.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"));
                };
                /* css beautifier legacy helpers */ InputScanner.prototype.peekUntilAfter = function(pattern) {
                    var start = this.__position;
                    var val = this.readUntilAfter(pattern);
                    this.__position = start;
                    return val;
                };
                InputScanner.prototype.lookBack = function(testVal) {
                    var start = this.__position - 1;
                    return start >= testVal.length && this.__input.substring(start - testVal.length, start).toLowerCase() === testVal;
                };
                module.exports.InputScanner = InputScanner;
            /***/ },
            /* 9 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_174087__) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var InputScanner = __nested_webpack_require_174087__(8).InputScanner;
                var Token = __nested_webpack_require_174087__(3).Token;
                var TokenStream = __nested_webpack_require_174087__(10).TokenStream;
                var WhitespacePattern = __nested_webpack_require_174087__(11).WhitespacePattern;
                var TOKEN = {
                    START: "TK_START",
                    RAW: "TK_RAW",
                    EOF: "TK_EOF"
                };
                var Tokenizer = function(input_string, options) {
                    this._input = new InputScanner(input_string);
                    this._options = options || {};
                    this.__tokens = null;
                    this._patterns = {};
                    this._patterns.whitespace = new WhitespacePattern(this._input);
                };
                Tokenizer.prototype.tokenize = function() {
                    this._input.restart();
                    this.__tokens = new TokenStream();
                    this._reset();
                    var current;
                    var previous = new Token(TOKEN.START, "");
                    var open_token = null;
                    var open_stack = [];
                    var comments = new TokenStream();
                    while(previous.type !== TOKEN.EOF){
                        current = this._get_next_token(previous, open_token);
                        while(this._is_comment(current)){
                            comments.add(current);
                            current = this._get_next_token(previous, open_token);
                        }
                        if (!comments.isEmpty()) {
                            current.comments_before = comments;
                            comments = new TokenStream();
                        }
                        current.parent = open_token;
                        if (this._is_opening(current)) {
                            open_stack.push(open_token);
                            open_token = current;
                        } else if (open_token && this._is_closing(current, open_token)) {
                            current.opened = open_token;
                            open_token.closed = current;
                            open_token = open_stack.pop();
                            current.parent = open_token;
                        }
                        current.previous = previous;
                        previous.next = current;
                        this.__tokens.add(current);
                        previous = current;
                    }
                    return this.__tokens;
                };
                Tokenizer.prototype._is_first_token = function() {
                    return this.__tokens.isEmpty();
                };
                Tokenizer.prototype._reset = function() {};
                Tokenizer.prototype._get_next_token = function(previous_token, open_token) {
                    this._readWhitespace();
                    var resulting_string = this._input.read(/.+/g);
                    if (resulting_string) {
                        return this._create_token(TOKEN.RAW, resulting_string);
                    } else {
                        return this._create_token(TOKEN.EOF, "");
                    }
                };
                Tokenizer.prototype._is_comment = function(current_token) {
                    return false;
                };
                Tokenizer.prototype._is_opening = function(current_token) {
                    return false;
                };
                Tokenizer.prototype._is_closing = function(current_token, open_token) {
                    return false;
                };
                Tokenizer.prototype._create_token = function(type, text) {
                    var token = new Token(type, text, this._patterns.whitespace.newline_count, this._patterns.whitespace.whitespace_before_token);
                    return token;
                };
                Tokenizer.prototype._readWhitespace = function() {
                    return this._patterns.whitespace.read();
                };
                module.exports.Tokenizer = Tokenizer;
                module.exports.TOKEN = TOKEN;
            /***/ },
            /* 10 */ /***/ function(module) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ function TokenStream(parent_token) {
                    // private
                    this.__tokens = [];
                    this.__tokens_length = this.__tokens.length;
                    this.__position = 0;
                    this.__parent_token = parent_token;
                }
                TokenStream.prototype.restart = function() {
                    this.__position = 0;
                };
                TokenStream.prototype.isEmpty = function() {
                    return this.__tokens_length === 0;
                };
                TokenStream.prototype.hasNext = function() {
                    return this.__position < this.__tokens_length;
                };
                TokenStream.prototype.next = function() {
                    var val = null;
                    if (this.hasNext()) {
                        val = this.__tokens[this.__position];
                        this.__position += 1;
                    }
                    return val;
                };
                TokenStream.prototype.peek = function(index) {
                    var val = null;
                    index = index || 0;
                    index += this.__position;
                    if (index >= 0 && index < this.__tokens_length) {
                        val = this.__tokens[index];
                    }
                    return val;
                };
                TokenStream.prototype.add = function(token) {
                    if (this.__parent_token) {
                        token.parent = this.__parent_token;
                    }
                    this.__tokens.push(token);
                    this.__tokens_length += 1;
                };
                module.exports.TokenStream = TokenStream;
            /***/ },
            /* 11 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_182621__) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var Pattern = __nested_webpack_require_182621__(12).Pattern;
                function WhitespacePattern(input_scanner, parent) {
                    Pattern.call(this, input_scanner, parent);
                    if (parent) {
                        this._line_regexp = this._input.get_regexp(parent._line_regexp);
                    } else {
                        this.__set_whitespace_patterns("", "");
                    }
                    this.newline_count = 0;
                    this.whitespace_before_token = "";
                }
                WhitespacePattern.prototype = new Pattern();
                WhitespacePattern.prototype.__set_whitespace_patterns = function(whitespace_chars, newline_chars) {
                    whitespace_chars += "\\t ";
                    newline_chars += "\\n\\r";
                    this._match_pattern = this._input.get_regexp("[" + whitespace_chars + newline_chars + "]+", true);
                    this._newline_regexp = this._input.get_regexp("\\r\\n|[" + newline_chars + "]");
                };
                WhitespacePattern.prototype.read = function() {
                    this.newline_count = 0;
                    this.whitespace_before_token = "";
                    var resulting_string = this._input.read(this._match_pattern);
                    if (resulting_string === " ") {
                        this.whitespace_before_token = " ";
                    } else if (resulting_string) {
                        var matches = this.__split(this._newline_regexp, resulting_string);
                        this.newline_count = matches.length - 1;
                        this.whitespace_before_token = matches[this.newline_count];
                    }
                    return resulting_string;
                };
                WhitespacePattern.prototype.matching = function(whitespace_chars, newline_chars) {
                    var result = this._create();
                    result.__set_whitespace_patterns(whitespace_chars, newline_chars);
                    result._update();
                    return result;
                };
                WhitespacePattern.prototype._create = function() {
                    return new WhitespacePattern(this._input, this);
                };
                WhitespacePattern.prototype.__split = function(regexp, input_string) {
                    regexp.lastIndex = 0;
                    var start_index = 0;
                    var result = [];
                    var next_match = regexp.exec(input_string);
                    while(next_match){
                        result.push(input_string.substring(start_index, next_match.index));
                        start_index = next_match.index + next_match[0].length;
                        next_match = regexp.exec(input_string);
                    }
                    if (start_index < input_string.length) {
                        result.push(input_string.substring(start_index, input_string.length));
                    } else {
                        result.push("");
                    }
                    return result;
                };
                module.exports.WhitespacePattern = WhitespacePattern;
            /***/ },
            /* 12 */ /***/ function(module) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ function Pattern(input_scanner, parent) {
                    this._input = input_scanner;
                    this._starting_pattern = null;
                    this._match_pattern = null;
                    this._until_pattern = null;
                    this._until_after = false;
                    if (parent) {
                        this._starting_pattern = this._input.get_regexp(parent._starting_pattern, true);
                        this._match_pattern = this._input.get_regexp(parent._match_pattern, true);
                        this._until_pattern = this._input.get_regexp(parent._until_pattern);
                        this._until_after = parent._until_after;
                    }
                }
                Pattern.prototype.read = function() {
                    var result = this._input.read(this._starting_pattern);
                    if (!this._starting_pattern || result) {
                        result += this._input.read(this._match_pattern, this._until_pattern, this._until_after);
                    }
                    return result;
                };
                Pattern.prototype.read_match = function() {
                    return this._input.match(this._match_pattern);
                };
                Pattern.prototype.until_after = function(pattern) {
                    var result = this._create();
                    result._until_after = true;
                    result._until_pattern = this._input.get_regexp(pattern);
                    result._update();
                    return result;
                };
                Pattern.prototype.until = function(pattern) {
                    var result = this._create();
                    result._until_after = false;
                    result._until_pattern = this._input.get_regexp(pattern);
                    result._update();
                    return result;
                };
                Pattern.prototype.starting_with = function(pattern) {
                    var result = this._create();
                    result._starting_pattern = this._input.get_regexp(pattern, true);
                    result._update();
                    return result;
                };
                Pattern.prototype.matching = function(pattern) {
                    var result = this._create();
                    result._match_pattern = this._input.get_regexp(pattern, true);
                    result._update();
                    return result;
                };
                Pattern.prototype._create = function() {
                    return new Pattern(this._input, this);
                };
                Pattern.prototype._update = function() {};
                module.exports.Pattern = Pattern;
            /***/ },
            /* 13 */ /***/ function(module) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ function Directives(start_block_pattern, end_block_pattern) {
                    start_block_pattern = typeof start_block_pattern === "string" ? start_block_pattern : start_block_pattern.source;
                    end_block_pattern = typeof end_block_pattern === "string" ? end_block_pattern : end_block_pattern.source;
                    this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \w+[:]\w+)+ /.source + end_block_pattern, "g");
                    this.__directive_pattern = / (\w+)[:](\w+)/g;
                    this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\sbeautify\signore:end\s/.source + end_block_pattern, "g");
                }
                Directives.prototype.get_directives = function(text) {
                    if (!text.match(this.__directives_block_pattern)) {
                        return null;
                    }
                    var directives = {};
                    this.__directive_pattern.lastIndex = 0;
                    var directive_match = this.__directive_pattern.exec(text);
                    while(directive_match){
                        directives[directive_match[1]] = directive_match[2];
                        directive_match = this.__directive_pattern.exec(text);
                    }
                    return directives;
                };
                Directives.prototype.readIgnored = function(input) {
                    return input.readUntilAfter(this.__directives_end_ignore_pattern);
                };
                module.exports.Directives = Directives;
            /***/ },
            /* 14 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_194013__) {
                /*jshint node:true */ /*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ var Pattern = __nested_webpack_require_194013__(12).Pattern;
                var template_names = {
                    django: false,
                    erb: false,
                    handlebars: false,
                    php: false,
                    smarty: false
                };
                // This lets templates appear anywhere we would do a readUntil
                // The cost is higher but it is pay to play.
                function TemplatablePattern(input_scanner, parent) {
                    Pattern.call(this, input_scanner, parent);
                    this.__template_pattern = null;
                    this._disabled = Object.assign({}, template_names);
                    this._excluded = Object.assign({}, template_names);
                    if (parent) {
                        this.__template_pattern = this._input.get_regexp(parent.__template_pattern);
                        this._excluded = Object.assign(this._excluded, parent._excluded);
                        this._disabled = Object.assign(this._disabled, parent._disabled);
                    }
                    var pattern = new Pattern(input_scanner);
                    this.__patterns = {
                        handlebars_comment: pattern.starting_with(/{{!--/).until_after(/--}}/),
                        handlebars_unescaped: pattern.starting_with(/{{{/).until_after(/}}}/),
                        handlebars: pattern.starting_with(/{{/).until_after(/}}/),
                        php: pattern.starting_with(/<\?(?:[= ]|php)/).until_after(/\?>/),
                        erb: pattern.starting_with(/<%[^%]/).until_after(/[^%]%>/),
                        // django coflicts with handlebars a bit.
                        django: pattern.starting_with(/{%/).until_after(/%}/),
                        django_value: pattern.starting_with(/{{/).until_after(/}}/),
                        django_comment: pattern.starting_with(/{#/).until_after(/#}/),
                        smarty: pattern.starting_with(/{(?=[^}{\s\n])/).until_after(/[^\s\n]}/),
                        smarty_comment: pattern.starting_with(/{\*/).until_after(/\*}/),
                        smarty_literal: pattern.starting_with(/{literal}/).until_after(/{\/literal}/)
                    };
                }
                TemplatablePattern.prototype = new Pattern();
                TemplatablePattern.prototype._create = function() {
                    return new TemplatablePattern(this._input, this);
                };
                TemplatablePattern.prototype._update = function() {
                    this.__set_templated_pattern();
                };
                TemplatablePattern.prototype.disable = function(language) {
                    var result = this._create();
                    result._disabled[language] = true;
                    result._update();
                    return result;
                };
                TemplatablePattern.prototype.read_options = function(options) {
                    var result = this._create();
                    for(var language in template_names){
                        result._disabled[language] = options.templating.indexOf(language) === -1;
                    }
                    result._update();
                    return result;
                };
                TemplatablePattern.prototype.exclude = function(language) {
                    var result = this._create();
                    result._excluded[language] = true;
                    result._update();
                    return result;
                };
                TemplatablePattern.prototype.read = function() {
                    var result = "";
                    if (this._match_pattern) {
                        result = this._input.read(this._starting_pattern);
                    } else {
                        result = this._input.read(this._starting_pattern, this.__template_pattern);
                    }
                    var next = this._read_template();
                    while(next){
                        if (this._match_pattern) {
                            next += this._input.read(this._match_pattern);
                        } else {
                            next += this._input.readUntil(this.__template_pattern);
                        }
                        result += next;
                        next = this._read_template();
                    }
                    if (this._until_after) {
                        result += this._input.readUntilAfter(this._until_pattern);
                    }
                    return result;
                };
                TemplatablePattern.prototype.__set_templated_pattern = function() {
                    var items = [];
                    if (!this._disabled.php) {
                        items.push(this.__patterns.php._starting_pattern.source);
                    }
                    if (!this._disabled.handlebars) {
                        items.push(this.__patterns.handlebars._starting_pattern.source);
                    }
                    if (!this._disabled.erb) {
                        items.push(this.__patterns.erb._starting_pattern.source);
                    }
                    if (!this._disabled.django) {
                        items.push(this.__patterns.django._starting_pattern.source);
                        // The starting pattern for django is more complex because it has different
                        // patterns for value, comment, and other sections
                        items.push(this.__patterns.django_value._starting_pattern.source);
                        items.push(this.__patterns.django_comment._starting_pattern.source);
                    }
                    if (!this._disabled.smarty) {
                        items.push(this.__patterns.smarty._starting_pattern.source);
                    }
                    if (this._until_pattern) {
                        items.push(this._until_pattern.source);
                    }
                    this.__template_pattern = this._input.get_regexp("(?:" + items.join("|") + ")");
                };
                TemplatablePattern.prototype._read_template = function() {
                    var resulting_string = "";
                    var c = this._input.peek();
                    if (c === "<") {
                        var peek1 = this._input.peek(1);
                        //if we're in a comment, do something special
                        // We treat all comments as literals, even more than preformatted tags
                        // we just look for the appropriate close tag
                        if (!this._disabled.php && !this._excluded.php && peek1 === "?") {
                            resulting_string = resulting_string || this.__patterns.php.read();
                        }
                        if (!this._disabled.erb && !this._excluded.erb && peek1 === "%") {
                            resulting_string = resulting_string || this.__patterns.erb.read();
                        }
                    } else if (c === "{") {
                        if (!this._disabled.handlebars && !this._excluded.handlebars) {
                            resulting_string = resulting_string || this.__patterns.handlebars_comment.read();
                            resulting_string = resulting_string || this.__patterns.handlebars_unescaped.read();
                            resulting_string = resulting_string || this.__patterns.handlebars.read();
                        }
                        if (!this._disabled.django) {
                            // django coflicts with handlebars a bit.
                            if (!this._excluded.django && !this._excluded.handlebars) {
                                resulting_string = resulting_string || this.__patterns.django_value.read();
                            }
                            if (!this._excluded.django) {
                                resulting_string = resulting_string || this.__patterns.django_comment.read();
                                resulting_string = resulting_string || this.__patterns.django.read();
                            }
                        }
                        if (!this._disabled.smarty) {
                            // smarty cannot be enabled with django or handlebars enabled
                            if (this._disabled.django && this._disabled.handlebars) {
                                resulting_string = resulting_string || this.__patterns.smarty_comment.read();
                                resulting_string = resulting_string || this.__patterns.smarty_literal.read();
                                resulting_string = resulting_string || this.__patterns.smarty.read();
                            }
                        }
                    }
                    return resulting_string;
                };
                module.exports.TemplatablePattern = TemplatablePattern;
            /***/ }
        ];
        /************************************************************************/ /******/ // The module cache
        /******/ var __webpack_module_cache__ = {};
        /******/ /******/ // The require function
        /******/ function __nested_webpack_require_204489__(moduleId) {
            /******/ // Check if module is in cache
            /******/ var cachedModule = __webpack_module_cache__[moduleId];
            /******/ if (cachedModule !== undefined) {
                /******/ return cachedModule.exports;
            /******/ }
            /******/ // Create a new module (and put it into the cache)
            /******/ var module = __webpack_module_cache__[moduleId] = {
                /******/ // no module.id needed
                /******/ // no module.loaded needed
                /******/ exports: {}
            };
            /******/ /******/ // Execute the module function
            /******/ __webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_204489__);
            /******/ /******/ // Return the exports of the module
            /******/ return module.exports;
        /******/ }
        /******/ /************************************************************************/ /******/ /******/ // startup
        /******/ // Load entry module and return exports
        /******/ // This entry module is referenced by other modules so it can't be inlined
        /******/ var __nested_webpack_exports__ = __nested_webpack_require_204489__(0);
        /******/ legacy_beautify_js = __nested_webpack_exports__;
    /******/ /******/ })();
    var js_beautify = legacy_beautify_js;
    /* Footer */ if (true) {
        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
            return {
                js_beautify: js_beautify
            };
        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
})();


/***/ }),

/***/ 79:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var isBuffer = __webpack_require__(2293);
var toString = Object.prototype.toString;
/**
 * Get the native `typeof` a value.
 *
 * @param  {*} `val`
 * @return {*} Native javascript type
 */ module.exports = function kindOf(val) {
    // primitivies
    if (typeof val === "undefined") {
        return "undefined";
    }
    if (val === null) {
        return "null";
    }
    if (val === true || val === false || val instanceof Boolean) {
        return "boolean";
    }
    if (typeof val === "string" || val instanceof String) {
        return "string";
    }
    if (typeof val === "number" || val instanceof Number) {
        return "number";
    }
    // functions
    if (typeof val === "function" || val instanceof Function) {
        return "function";
    }
    // array
    if (typeof Array.isArray !== "undefined" && Array.isArray(val)) {
        return "array";
    }
    // check for instances of RegExp and Date before calling `toString`
    if (val instanceof RegExp) {
        return "regexp";
    }
    if (val instanceof Date) {
        return "date";
    }
    // other objects
    var type = toString.call(val);
    if (type === "[object RegExp]") {
        return "regexp";
    }
    if (type === "[object Date]") {
        return "date";
    }
    if (type === "[object Arguments]") {
        return "arguments";
    }
    if (type === "[object Error]") {
        return "error";
    }
    // buffer
    if (isBuffer(val)) {
        return "buffer";
    }
    // es6: Map, WeakMap, Set, WeakSet
    if (type === "[object Set]") {
        return "set";
    }
    if (type === "[object WeakSet]") {
        return "weakset";
    }
    if (type === "[object Map]") {
        return "map";
    }
    if (type === "[object WeakMap]") {
        return "weakmap";
    }
    if (type === "[object Symbol]") {
        return "symbol";
    }
    // typed arrays
    if (type === "[object Int8Array]") {
        return "int8array";
    }
    if (type === "[object Uint8Array]") {
        return "uint8array";
    }
    if (type === "[object Uint8ClampedArray]") {
        return "uint8clampedarray";
    }
    if (type === "[object Int16Array]") {
        return "int16array";
    }
    if (type === "[object Uint16Array]") {
        return "uint16array";
    }
    if (type === "[object Int32Array]") {
        return "int32array";
    }
    if (type === "[object Uint32Array]") {
        return "uint32array";
    }
    if (type === "[object Float32Array]") {
        return "float32array";
    }
    if (type === "[object Float64Array]") {
        return "float64array";
    }
    // must be a plain object
    return "object";
};


/***/ }),

/***/ 635:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015-2022 Douglas Christopher Wilson
 * MIT Licensed
 */ /**
 * Module exports.
 */ 
module.exports = __webpack_require__(1670);


/***/ }),

/***/ 8156:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */ 
/**
 * Module dependencies.
 * @private
 */ var db = __webpack_require__(635);
var extname = (__webpack_require__(1017).extname);
/**
 * Module variables.
 * @private
 */ var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
var TEXT_TYPE_REGEXP = /^text\//i;
/**
 * Module exports.
 * @public
 */ exports.charset = charset;
exports.charsets = {
    lookup: charset
};
exports.contentType = contentType;
exports.extension = extension;
exports.extensions = Object.create(null);
exports.lookup = lookup;
exports.types = Object.create(null);
// Populate the extensions/types maps
populateMaps(exports.extensions, exports.types);
/**
 * Get the default charset for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */ function charset(type) {
    if (!type || typeof type !== "string") {
        return false;
    }
    // TODO: use media-typer
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var mime = match && db[match[1].toLowerCase()];
    if (mime && mime.charset) {
        return mime.charset;
    }
    // default text/* to utf-8
    if (match && TEXT_TYPE_REGEXP.test(match[1])) {
        return "UTF-8";
    }
    return false;
}
/**
 * Create a full Content-Type header given a MIME type or extension.
 *
 * @param {string} str
 * @return {boolean|string}
 */ function contentType(str) {
    // TODO: should this even be in this module?
    if (!str || typeof str !== "string") {
        return false;
    }
    var mime = str.indexOf("/") === -1 ? exports.lookup(str) : str;
    if (!mime) {
        return false;
    }
    // TODO: use content-type or other module
    if (mime.indexOf("charset") === -1) {
        var charset = exports.charset(mime);
        if (charset) mime += "; charset=" + charset.toLowerCase();
    }
    return mime;
}
/**
 * Get the default extension for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */ function extension(type) {
    if (!type || typeof type !== "string") {
        return false;
    }
    // TODO: use media-typer
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    // get extensions
    var exts = match && exports.extensions[match[1].toLowerCase()];
    if (!exts || !exts.length) {
        return false;
    }
    return exts[0];
}
/**
 * Lookup the MIME type for a file path/extension.
 *
 * @param {string} path
 * @return {boolean|string}
 */ function lookup(path) {
    if (!path || typeof path !== "string") {
        return false;
    }
    // get the extension ("ext" or ".ext" or full path)
    var extension = extname("x." + path).toLowerCase().substr(1);
    if (!extension) {
        return false;
    }
    return exports.types[extension] || false;
}
/**
 * Populate the extensions and types maps.
 * @private
 */ function populateMaps(extensions, types) {
    // source preference (least -> most)
    var preference = [
        "nginx",
        "apache",
        undefined,
        "iana"
    ];
    Object.keys(db).forEach(function forEachMimeType(type) {
        var mime = db[type];
        var exts = mime.extensions;
        if (!exts || !exts.length) {
            return;
        }
        // mime -> extensions
        extensions[type] = exts;
        // extension -> mime
        for(var i = 0; i < exts.length; i++){
            var extension = exts[i];
            if (types[extension]) {
                var from = preference.indexOf(db[types[extension]].source);
                var to = preference.indexOf(mime.source);
                if (types[extension] !== "application/octet-stream" && (from > to || from === to && types[extension].substr(0, 12) === "application/")) {
                    continue;
                }
            }
            // set the extension -> mime
            types[extension] = type;
        }
    });
}


/***/ }),

/***/ 5888:
/***/ ((module) => {

/**
 * Helpers.
 */ 
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */ module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
        return parse(val);
    } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */ function parse(str) {
    str = String(str);
    if (str.length > 100) {
        return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
        return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch(type){
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
            return n * y;
        case "weeks":
        case "week":
        case "w":
            return n * w;
        case "days":
        case "day":
        case "d":
            return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
            return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
            return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
            return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
            return n;
        default:
            return undefined;
    }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
        return Math.round(ms / d) + "d";
    }
    if (msAbs >= h) {
        return Math.round(ms / h) + "h";
    }
    if (msAbs >= m) {
        return Math.round(ms / m) + "m";
    }
    if (msAbs >= s) {
        return Math.round(ms / s) + "s";
    }
    return ms + "ms";
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
    }
    if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
    }
    if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
    }
    if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
    }
    return ms + " ms";
}
/**
 * Pluralization helper.
 */ function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
}


/***/ }),

/***/ 2619:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * @license React
 * react-dom-server-legacy.node.production.min.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
var aa = __webpack_require__(9066), ba = __webpack_require__(84), ca = __webpack_require__(2781), p = Object.assign, t = Object.prototype.hasOwnProperty, da = RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), ea = {}, fa = {};
function ka(a) {
    if (t.call(fa, a)) return !0;
    if (t.call(ea, a)) return !1;
    if (da.test(a)) return fa[a] = !0;
    ea[a] = !0;
    return !1;
}
var la = new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" ")), ma = new Map([
    [
        "acceptCharset",
        "accept-charset"
    ],
    [
        "htmlFor",
        "for"
    ],
    [
        "httpEquiv",
        "http-equiv"
    ],
    [
        "crossOrigin",
        "crossorigin"
    ],
    [
        "accentHeight",
        "accent-height"
    ],
    [
        "alignmentBaseline",
        "alignment-baseline"
    ],
    [
        "arabicForm",
        "arabic-form"
    ],
    [
        "baselineShift",
        "baseline-shift"
    ],
    [
        "capHeight",
        "cap-height"
    ],
    [
        "clipPath",
        "clip-path"
    ],
    [
        "clipRule",
        "clip-rule"
    ],
    [
        "colorInterpolation",
        "color-interpolation"
    ],
    [
        "colorInterpolationFilters",
        "color-interpolation-filters"
    ],
    [
        "colorProfile",
        "color-profile"
    ],
    [
        "colorRendering",
        "color-rendering"
    ],
    [
        "dominantBaseline",
        "dominant-baseline"
    ],
    [
        "enableBackground",
        "enable-background"
    ],
    [
        "fillOpacity",
        "fill-opacity"
    ],
    [
        "fillRule",
        "fill-rule"
    ],
    [
        "floodColor",
        "flood-color"
    ],
    [
        "floodOpacity",
        "flood-opacity"
    ],
    [
        "fontFamily",
        "font-family"
    ],
    [
        "fontSize",
        "font-size"
    ],
    [
        "fontSizeAdjust",
        "font-size-adjust"
    ],
    [
        "fontStretch",
        "font-stretch"
    ],
    [
        "fontStyle",
        "font-style"
    ],
    [
        "fontVariant",
        "font-variant"
    ],
    [
        "fontWeight",
        "font-weight"
    ],
    [
        "glyphName",
        "glyph-name"
    ],
    [
        "glyphOrientationHorizontal",
        "glyph-orientation-horizontal"
    ],
    [
        "glyphOrientationVertical",
        "glyph-orientation-vertical"
    ],
    [
        "horizAdvX",
        "horiz-adv-x"
    ],
    [
        "horizOriginX",
        "horiz-origin-x"
    ],
    [
        "imageRendering",
        "image-rendering"
    ],
    [
        "letterSpacing",
        "letter-spacing"
    ],
    [
        "lightingColor",
        "lighting-color"
    ],
    [
        "markerEnd",
        "marker-end"
    ],
    [
        "markerMid",
        "marker-mid"
    ],
    [
        "markerStart",
        "marker-start"
    ],
    [
        "overlinePosition",
        "overline-position"
    ],
    [
        "overlineThickness",
        "overline-thickness"
    ],
    [
        "paintOrder",
        "paint-order"
    ],
    [
        "panose-1",
        "panose-1"
    ],
    [
        "pointerEvents",
        "pointer-events"
    ],
    [
        "renderingIntent",
        "rendering-intent"
    ],
    [
        "shapeRendering",
        "shape-rendering"
    ],
    [
        "stopColor",
        "stop-color"
    ],
    [
        "stopOpacity",
        "stop-opacity"
    ],
    [
        "strikethroughPosition",
        "strikethrough-position"
    ],
    [
        "strikethroughThickness",
        "strikethrough-thickness"
    ],
    [
        "strokeDasharray",
        "stroke-dasharray"
    ],
    [
        "strokeDashoffset",
        "stroke-dashoffset"
    ],
    [
        "strokeLinecap",
        "stroke-linecap"
    ],
    [
        "strokeLinejoin",
        "stroke-linejoin"
    ],
    [
        "strokeMiterlimit",
        "stroke-miterlimit"
    ],
    [
        "strokeOpacity",
        "stroke-opacity"
    ],
    [
        "strokeWidth",
        "stroke-width"
    ],
    [
        "textAnchor",
        "text-anchor"
    ],
    [
        "textDecoration",
        "text-decoration"
    ],
    [
        "textRendering",
        "text-rendering"
    ],
    [
        "transformOrigin",
        "transform-origin"
    ],
    [
        "underlinePosition",
        "underline-position"
    ],
    [
        "underlineThickness",
        "underline-thickness"
    ],
    [
        "unicodeBidi",
        "unicode-bidi"
    ],
    [
        "unicodeRange",
        "unicode-range"
    ],
    [
        "unitsPerEm",
        "units-per-em"
    ],
    [
        "vAlphabetic",
        "v-alphabetic"
    ],
    [
        "vHanging",
        "v-hanging"
    ],
    [
        "vIdeographic",
        "v-ideographic"
    ],
    [
        "vMathematical",
        "v-mathematical"
    ],
    [
        "vectorEffect",
        "vector-effect"
    ],
    [
        "vertAdvY",
        "vert-adv-y"
    ],
    [
        "vertOriginX",
        "vert-origin-x"
    ],
    [
        "vertOriginY",
        "vert-origin-y"
    ],
    [
        "wordSpacing",
        "word-spacing"
    ],
    [
        "writingMode",
        "writing-mode"
    ],
    [
        "xmlnsXlink",
        "xmlns:xlink"
    ],
    [
        "xHeight",
        "x-height"
    ]
]), na = /["'&<>]/;
function u(a) {
    if ("boolean" === typeof a || "number" === typeof a) return "" + a;
    a = "" + a;
    var b = na.exec(a);
    if (b) {
        var c = "", d, e = 0;
        for(d = b.index; d < a.length; d++){
            switch(a.charCodeAt(d)){
                case 34:
                    b = "&quot;";
                    break;
                case 38:
                    b = "&amp;";
                    break;
                case 39:
                    b = "&#x27;";
                    break;
                case 60:
                    b = "&lt;";
                    break;
                case 62:
                    b = "&gt;";
                    break;
                default:
                    continue;
            }
            e !== d && (c += a.slice(e, d));
            e = d + 1;
            c += b;
        }
        a = e !== d ? c + a.slice(e, d) : c;
    }
    return a;
}
var oa = /([A-Z])/g, pa = /^ms-/, qa = Array.isArray, ra = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, sa = ba.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Dispatcher, xa = {
    prefetchDNS: ta,
    preconnect: ua,
    preload: va,
    preinit: wa
};
function v(a, b, c) {
    return {
        insertionMode: a,
        selectedValue: b,
        noscriptTagInScope: c
    };
}
function ya(a, b, c) {
    switch(b){
        case "noscript":
            return v(2, null, !0);
        case "select":
            return v(2, null != c.value ? c.value : c.defaultValue, a.noscriptTagInScope);
        case "svg":
            return v(3, null, a.noscriptTagInScope);
        case "math":
            return v(4, null, a.noscriptTagInScope);
        case "foreignObject":
            return v(2, null, a.noscriptTagInScope);
        case "table":
            return v(5, null, a.noscriptTagInScope);
        case "thead":
        case "tbody":
        case "tfoot":
            return v(6, null, a.noscriptTagInScope);
        case "colgroup":
            return v(8, null, a.noscriptTagInScope);
        case "tr":
            return v(7, null, a.noscriptTagInScope);
    }
    return 5 <= a.insertionMode ? v(2, null, a.noscriptTagInScope) : 0 === a.insertionMode ? "html" === b ? v(1, null, !1) : v(2, null, !1) : 1 === a.insertionMode ? v(2, null, !1) : a;
}
var za = new Map;
function Aa(a, b) {
    if ("object" !== typeof b) throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    var c = !0, d;
    for(d in b)if (t.call(b, d)) {
        var e = b[d];
        if (null != e && "boolean" !== typeof e && "" !== e) {
            if (0 === d.indexOf("--")) {
                var g = u(d);
                e = u(("" + e).trim());
            } else g = za.get(d), void 0 === g && (g = u(d.replace(oa, "-$1").toLowerCase().replace(pa, "-ms-")), za.set(d, g)), e = "number" === typeof e ? 0 === e || la.has(d) ? "" + e : e + "px" : u(("" + e).trim());
            c ? (c = !1, a.push(' style="', g, ":", e)) : a.push(";", g, ":", e);
        }
    }
    c || a.push('"');
}
function Ba(a, b, c) {
    c && "function" !== typeof c && "symbol" !== typeof c && a.push(" ", b, '=""');
}
function x(a, b, c) {
    "function" !== typeof c && "symbol" !== typeof c && "boolean" !== typeof c && a.push(" ", b, '="', u(c), '"');
}
u("javascript:throw new Error('A React form was unexpectedly submitted.')");
function Ia(a, b) {
    this.push('<input type="hidden"');
    if ("string" !== typeof a) throw Error("File/Blob fields are not yet supported in progressive forms. It probably means you are closing over binary data or FormData in a Server Action.");
    x(this, "name", b);
    x(this, "value", a);
    this.push("/>");
}
function Ja(a, b, c, d, e, g, f) {
    null != f && z(a, "name", f);
    null != c && z(a, "formAction", c);
    null != d && z(a, "formEncType", d);
    null != e && z(a, "formMethod", e);
    null != g && z(a, "formTarget", g);
    return null;
}
function z(a, b, c) {
    switch(b){
        case "className":
            x(a, "class", c);
            break;
        case "tabIndex":
            x(a, "tabindex", c);
            break;
        case "dir":
        case "role":
        case "viewBox":
        case "width":
        case "height":
            x(a, b, c);
            break;
        case "style":
            Aa(a, c);
            break;
        case "src":
        case "href":
        case "action":
        case "formAction":
            if (null == c || "function" === typeof c || "symbol" === typeof c || "boolean" === typeof c) break;
            a.push(" ", b, '="', u("" + c), '"');
            break;
        case "defaultValue":
        case "defaultChecked":
        case "innerHTML":
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
            break;
        case "autoFocus":
        case "multiple":
        case "muted":
            Ba(a, b.toLowerCase(), c);
            break;
        case "xlinkHref":
            if ("function" === typeof c || "symbol" === typeof c || "boolean" === typeof c) break;
            a.push(" ", "xlink:href", '="', u("" + c), '"');
            break;
        case "contentEditable":
        case "spellCheck":
        case "draggable":
        case "value":
        case "autoReverse":
        case "externalResourcesRequired":
        case "focusable":
        case "preserveAlpha":
            "function" !== typeof c && "symbol" !== typeof c && a.push(" ", b, '="', u(c), '"');
            break;
        case "allowFullScreen":
        case "async":
        case "autoPlay":
        case "controls":
        case "default":
        case "defer":
        case "disabled":
        case "disablePictureInPicture":
        case "disableRemotePlayback":
        case "formNoValidate":
        case "hidden":
        case "loop":
        case "noModule":
        case "noValidate":
        case "open":
        case "playsInline":
        case "readOnly":
        case "required":
        case "reversed":
        case "scoped":
        case "seamless":
        case "itemScope":
            c && "function" !== typeof c && "symbol" !== typeof c && a.push(" ", b, '=""');
            break;
        case "capture":
        case "download":
            !0 === c ? a.push(" ", b, '=""') : !1 !== c && "function" !== typeof c && "symbol" !== typeof c && a.push(" ", b, '="', u(c), '"');
            break;
        case "cols":
        case "rows":
        case "size":
        case "span":
            "function" !== typeof c && "symbol" !== typeof c && !isNaN(c) && 1 <= c && a.push(" ", b, '="', u(c), '"');
            break;
        case "rowSpan":
        case "start":
            "function" === typeof c || "symbol" === typeof c || isNaN(c) || a.push(" ", b, '="', u(c), '"');
            break;
        case "xlinkActuate":
            x(a, "xlink:actuate", c);
            break;
        case "xlinkArcrole":
            x(a, "xlink:arcrole", c);
            break;
        case "xlinkRole":
            x(a, "xlink:role", c);
            break;
        case "xlinkShow":
            x(a, "xlink:show", c);
            break;
        case "xlinkTitle":
            x(a, "xlink:title", c);
            break;
        case "xlinkType":
            x(a, "xlink:type", c);
            break;
        case "xmlBase":
            x(a, "xml:base", c);
            break;
        case "xmlLang":
            x(a, "xml:lang", c);
            break;
        case "xmlSpace":
            x(a, "xml:space", c);
            break;
        default:
            if (!(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) {
                if (b = ma.get(b) || b, ka(b)) {
                    switch(typeof c){
                        case "function":
                        case "symbol":
                            return;
                        case "boolean":
                            var d = b.toLowerCase().slice(0, 5);
                            if ("data-" !== d && "aria-" !== d) return;
                    }
                    a.push(" ", b, '="', u(c), '"');
                }
            }
    }
}
function A(a, b, c) {
    if (null != b) {
        if (null != c) throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
        if ("object" !== typeof b || !("__html" in b)) throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        b = b.__html;
        null !== b && void 0 !== b && a.push("" + b);
    }
}
function Ka(a) {
    var b = "";
    aa.Children.forEach(a, function(c) {
        null != c && (b += c);
    });
    return b;
}
function La(a, b, c, d, e, g, f) {
    var k = b.rel, h = b.href, l = b.precedence;
    if (3 === g || f || null != b.itemProp || "string" !== typeof k || "string" !== typeof h || "" === h) return D(a, b), null;
    if ("stylesheet" === b.rel) {
        c = "[style]" + h;
        if ("string" !== typeof l || null != b.disabled || b.onLoad || b.onError) return D(a, b);
        g = d.stylesMap.get(c);
        g || (b = p({}, b, {
            "data-precedence": b.precedence,
            precedence: null
        }), g = d.preloadsMap.get(c), f = 0, g && (g.state |= 4, k = g.props, null == b.crossOrigin && (b.crossOrigin = k.crossOrigin), null == b.integrity && (b.integrity = k.integrity), g.state & 3 && (f = 8)), g = {
            type: "stylesheet",
            chunks: [],
            state: f,
            props: b
        }, d.stylesMap.set(c, g), b = d.precedences.get(l), b || (b = new Set, d.precedences.set(l, b), c = {
            type: "style",
            chunks: [],
            state: 0,
            props: {
                precedence: l,
                hrefs: []
            }
        }, b.add(c), d.stylePrecedences.set(l, c)), b.add(g));
        d.boundaryResources && d.boundaryResources.add(g);
        e && a.push("<!-- -->");
        return null;
    }
    if (b.onLoad || b.onError) return D(a, b);
    e && a.push("<!-- -->");
    switch(b.rel){
        case "preconnect":
        case "dns-prefetch":
            return D(c.preconnectChunks, b);
        case "preload":
            return D(c.preloadChunks, b);
        default:
            return D(c.hoistableChunks, b);
    }
}
function D(a, b) {
    a.push(F("link"));
    for(var c in b)if (t.call(b, c)) {
        var d = b[c];
        if (null != d) switch(c){
            case "children":
            case "dangerouslySetInnerHTML":
                throw Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            default:
                z(a, c, d);
        }
    }
    a.push("/>");
    return null;
}
function Ma(a, b, c) {
    a.push(F(c));
    for(var d in b)if (t.call(b, d)) {
        var e = b[d];
        if (null != e) switch(d){
            case "children":
            case "dangerouslySetInnerHTML":
                throw Error(c + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            default:
                z(a, d, e);
        }
    }
    a.push("/>");
    return null;
}
function Na(a, b) {
    a.push(F("title"));
    var c = null, d = null, e;
    for(e in b)if (t.call(b, e)) {
        var g = b[e];
        if (null != g) switch(e){
            case "children":
                c = g;
                break;
            case "dangerouslySetInnerHTML":
                d = g;
                break;
            default:
                z(a, e, g);
        }
    }
    a.push(">");
    b = Array.isArray(c) ? 2 > c.length ? c[0] : null : c;
    "function" !== typeof b && "symbol" !== typeof b && null !== b && void 0 !== b && a.push(u("" + b));
    A(a, d, c);
    a.push("</", "title", ">");
    return null;
}
function H(a, b) {
    a.push(F("script"));
    var c = null, d = null, e;
    for(e in b)if (t.call(b, e)) {
        var g = b[e];
        if (null != g) switch(e){
            case "children":
                c = g;
                break;
            case "dangerouslySetInnerHTML":
                d = g;
                break;
            default:
                z(a, e, g);
        }
    }
    a.push(">");
    A(a, d, c);
    "string" === typeof c && a.push(u(c));
    a.push("</", "script", ">");
    return null;
}
function J(a, b, c) {
    a.push(F(c));
    var d = c = null, e;
    for(e in b)if (t.call(b, e)) {
        var g = b[e];
        if (null != g) switch(e){
            case "children":
                c = g;
                break;
            case "dangerouslySetInnerHTML":
                d = g;
                break;
            default:
                z(a, e, g);
        }
    }
    a.push(">");
    A(a, d, c);
    return "string" === typeof c ? (a.push(u(c)), null) : c;
}
var Oa = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/, Pa = new Map;
function F(a) {
    var b = Pa.get(a);
    if (void 0 === b) {
        if (!Oa.test(a)) throw Error("Invalid tag: " + a);
        b = "<" + a;
        Pa.set(a, b);
    }
    return b;
}
function Qa(a, b, c, d, e, g, f) {
    switch(b){
        case "div":
        case "span":
        case "svg":
        case "path":
        case "a":
        case "g":
        case "p":
        case "li":
            break;
        case "select":
            a.push(F("select"));
            f = e = null;
            for(var k in c)if (t.call(c, k)) {
                var h = c[k];
                if (null != h) switch(k){
                    case "children":
                        e = h;
                        break;
                    case "dangerouslySetInnerHTML":
                        f = h;
                        break;
                    case "defaultValue":
                    case "value":
                        break;
                    default:
                        z(a, k, h);
                }
            }
            a.push(">");
            A(a, f, e);
            return e;
        case "option":
            e = g.selectedValue;
            a.push(F("option"));
            var l = d = f = null;
            h = null;
            for(var q in c)if (t.call(c, q)) {
                var m = c[q];
                if (null != m) switch(q){
                    case "children":
                        f = m;
                        break;
                    case "selected":
                        l = m;
                        break;
                    case "dangerouslySetInnerHTML":
                        h = m;
                        break;
                    case "value":
                        d = m;
                    default:
                        z(a, q, m);
                }
            }
            if (null != e) if (c = null !== d ? "" + d : Ka(f), qa(e)) for(d = 0; d < e.length; d++){
                if ("" + e[d] === c) {
                    a.push(' selected=""');
                    break;
                }
            }
            else "" + e === c && a.push(' selected=""');
            else l && a.push(' selected=""');
            a.push(">");
            A(a, h, f);
            return f;
        case "textarea":
            a.push(F("textarea"));
            h = f = e = null;
            for(var w in c)if (t.call(c, w) && (d = c[w], null != d)) switch(w){
                case "children":
                    h = d;
                    break;
                case "value":
                    e = d;
                    break;
                case "defaultValue":
                    f = d;
                    break;
                case "dangerouslySetInnerHTML":
                    throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                default:
                    z(a, w, d);
            }
            null === e && null !== f && (e = f);
            a.push(">");
            if (null != h) {
                if (null != e) throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                if (qa(h) && 1 < h.length) throw Error("<textarea> can only have at most one child.");
                e = "" + h;
            }
            "string" === typeof e && "\n" === e[0] && a.push("\n");
            null !== e && a.push(u("" + e));
            return null;
        case "input":
            a.push(F("input"));
            var r = null, y = q = null;
            m = l = d = f = g = w = null;
            for(h in c)if (t.call(c, h) && (k = c[h], null != k)) switch(h){
                case "children":
                case "dangerouslySetInnerHTML":
                    throw Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                case "name":
                    r = k;
                    break;
                case "formAction":
                    q = k;
                    break;
                case "formEncType":
                    y = k;
                    break;
                case "formMethod":
                    w = k;
                    break;
                case "formTarget":
                    g = k;
                    break;
                case "defaultChecked":
                    m = k;
                    break;
                case "defaultValue":
                    d = k;
                    break;
                case "checked":
                    l = k;
                    break;
                case "value":
                    f = k;
                    break;
                default:
                    z(a, h, k);
            }
            c = Ja(a, e, q, y, w, g, r);
            null !== l ? Ba(a, "checked", l) : null !== m && Ba(a, "checked", m);
            null !== f ? z(a, "value", f) : null !== d && z(a, "value", d);
            a.push("/>");
            null !== c && c.forEach(Ia, a);
            return null;
        case "button":
            a.push(F("button"));
            y = q = r = l = d = h = f = null;
            for(m in c)if (t.call(c, m) && (w = c[m], null != w)) switch(m){
                case "children":
                    f = w;
                    break;
                case "dangerouslySetInnerHTML":
                    h = w;
                    break;
                case "name":
                    d = w;
                    break;
                case "formAction":
                    l = w;
                    break;
                case "formEncType":
                    r = w;
                    break;
                case "formMethod":
                    q = w;
                    break;
                case "formTarget":
                    y = w;
                    break;
                default:
                    z(a, m, w);
            }
            c = Ja(a, e, l, r, q, y, d);
            a.push(">");
            null !== c && c.forEach(Ia, a);
            A(a, h, f);
            "string" === typeof f ? (a.push(u(f)), a = null) : a = f;
            return a;
        case "form":
            a.push(F("form"));
            m = l = d = h = f = e = null;
            for(r in c)if (t.call(c, r) && (q = c[r], null != q)) switch(r){
                case "children":
                    e = q;
                    break;
                case "dangerouslySetInnerHTML":
                    f = q;
                    break;
                case "action":
                    h = q;
                    break;
                case "encType":
                    d = q;
                    break;
                case "method":
                    l = q;
                    break;
                case "target":
                    m = q;
                    break;
                default:
                    z(a, r, q);
            }
            null != h && z(a, "action", h);
            null != d && z(a, "encType", d);
            null != l && z(a, "method", l);
            null != m && z(a, "target", m);
            a.push(">");
            A(a, f, e);
            "string" === typeof e ? (a.push(u(e)), a = null) : a = e;
            return a;
        case "menuitem":
            a.push(F("menuitem"));
            for(var B in c)if (t.call(c, B) && (e = c[B], null != e)) switch(B){
                case "children":
                case "dangerouslySetInnerHTML":
                    throw Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                default:
                    z(a, B, e);
            }
            a.push(">");
            return null;
        case "title":
            return 3 === g.insertionMode || g.noscriptTagInScope || null != c.itemProp ? a = Na(a, c) : (Na(e.hoistableChunks, c), a = null), a;
        case "link":
            return La(a, c, e, d, f, g.insertionMode, g.noscriptTagInScope);
        case "script":
            e = c.async;
            if ("string" !== typeof c.src || !c.src || !e || "function" === typeof e || "symbol" === typeof e || c.onLoad || c.onError || 3 === g.insertionMode || g.noscriptTagInScope || null != c.itemProp) a = H(a, c);
            else {
                l = "[script]" + c.src;
                e = d.scriptsMap.get(l);
                if (!e) {
                    e = {
                        type: "script",
                        chunks: [],
                        state: 0,
                        props: null
                    };
                    d.scriptsMap.set(l, e);
                    d.scripts.add(e);
                    h = c;
                    if (d = d.preloadsMap.get(l)) d.state |= 4, c = h = p({}, c), d = d.props, null == c.crossOrigin && (c.crossOrigin = d.crossOrigin), null == c.integrity && (c.integrity = d.integrity);
                    H(e.chunks, h);
                }
                f && a.push("<!-- -->");
                a = null;
            }
            return a;
        case "style":
            e = c.precedence;
            h = c.href;
            if (3 === g.insertionMode || g.noscriptTagInScope || null != c.itemProp || "string" !== typeof e || "string" !== typeof h || "" === h) {
                a.push(F("style"));
                f = e = null;
                for(y in c)if (t.call(c, y) && (h = c[y], null != h)) switch(y){
                    case "children":
                        e = h;
                        break;
                    case "dangerouslySetInnerHTML":
                        f = h;
                        break;
                    default:
                        z(a, y, h);
                }
                a.push(">");
                c = Array.isArray(e) ? 2 > e.length ? e[0] : null : e;
                "function" !== typeof c && "symbol" !== typeof c && null !== c && void 0 !== c && a.push(u("" + c));
                A(a, f, e);
                a.push("</", "style", ">");
                a = null;
            } else {
                m = "[style]" + h;
                r = d.stylesMap.get(m);
                if (!r) {
                    (r = d.stylePrecedences.get(e)) ? r.props.hrefs.push(h) : (r = {
                        type: "style",
                        chunks: [],
                        state: 0,
                        props: {
                            precedence: e,
                            hrefs: [
                                h
                            ]
                        }
                    }, d.stylePrecedences.set(e, r), h = new Set, h.add(r), d.precedences.set(e, h));
                    d.stylesMap.set(m, r);
                    d.boundaryResources && d.boundaryResources.add(r);
                    e = r.chunks;
                    d = h = null;
                    for(l in c)if (t.call(c, l) && (m = c[l], null != m)) switch(l){
                        case "children":
                            h = m;
                            break;
                        case "dangerouslySetInnerHTML":
                            d = m;
                    }
                    c = Array.isArray(h) ? 2 > h.length ? h[0] : null : h;
                    "function" !== typeof c && "symbol" !== typeof c && null !== c && void 0 !== c && e.push(u("" + c));
                    A(e, d, h);
                }
                f && a.push("<!-- -->");
                a = void 0;
            }
            return a;
        case "meta":
            return 3 === g.insertionMode || g.noscriptTagInScope || null != c.itemProp ? a = Ma(a, c, "meta") : (f && a.push("<!-- -->"), a = "string" === typeof c.charSet ? Ma(e.charsetChunks, c, "meta") : Ma(e.hoistableChunks, c, "meta")), a;
        case "listing":
        case "pre":
            a.push(F(b));
            f = e = null;
            for(var G in c)if (t.call(c, G) && (h = c[G], null != h)) switch(G){
                case "children":
                    e = h;
                    break;
                case "dangerouslySetInnerHTML":
                    f = h;
                    break;
                default:
                    z(a, G, h);
            }
            a.push(">");
            if (null != f) {
                if (null != e) throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                if ("object" !== typeof f || !("__html" in f)) throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                c = f.__html;
                null !== c && void 0 !== c && ("string" === typeof c && 0 < c.length && "\n" === c[0] ? a.push("\n", c) : a.push("" + c));
            }
            "string" === typeof e && "\n" === e[0] && a.push("\n");
            return e;
        case "base":
        case "area":
        case "br":
        case "col":
        case "embed":
        case "hr":
        case "img":
        case "keygen":
        case "param":
        case "source":
        case "track":
        case "wbr":
            return Ma(a, c, b);
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
            break;
        case "head":
            return 2 > g.insertionMode && null === e.headChunks ? (e.headChunks = [], a = J(e.headChunks, c, "head")) : a = J(a, c, "head"), a;
        case "html":
            return 0 === g.insertionMode && null === e.htmlChunks ? (e.htmlChunks = [
                "<!DOCTYPE html>"
            ], a = J(e.htmlChunks, c, "html")) : a = J(a, c, "html"), a;
        default:
            if (-1 !== b.indexOf("-")) {
                a.push(F(b));
                f = e = null;
                for(var n in c)if (t.call(c, n) && (h = c[n], null != h)) switch(n){
                    case "children":
                        e = h;
                        break;
                    case "dangerouslySetInnerHTML":
                        f = h;
                        break;
                    case "style":
                        Aa(a, h);
                        break;
                    case "suppressContentEditableWarning":
                    case "suppressHydrationWarning":
                        break;
                    default:
                        ka(n) && "function" !== typeof h && "symbol" !== typeof h && a.push(" ", n, '="', u(h), '"');
                }
                a.push(">");
                A(a, f, e);
                return e;
            }
    }
    return J(a, c, b);
}
function Ra(a, b) {
    b = b.bootstrapChunks;
    for(var c = 0; c < b.length - 1; c++)a.push(b[c]);
    return c < b.length ? (c = b[c], b.length = 0, a.push(c)) : !0;
}
function Sa(a, b, c) {
    a.push('<!--$?--><template id="');
    if (null === c) throw Error("An ID must have been assigned before we can complete the boundary.");
    a.push(c);
    return a.push('"></template>');
}
function Ta(a, b, c, d) {
    switch(c.insertionMode){
        case 0:
        case 1:
        case 2:
            return a.push('<div hidden id="'), a.push(b.segmentPrefix), b = d.toString(16), a.push(b), a.push('">');
        case 3:
            return a.push('<svg aria-hidden="true" style="display:none" id="'), a.push(b.segmentPrefix), b = d.toString(16), a.push(b), a.push('">');
        case 4:
            return a.push('<math aria-hidden="true" style="display:none" id="'), a.push(b.segmentPrefix), b = d.toString(16), a.push(b), a.push('">');
        case 5:
            return a.push('<table hidden id="'), a.push(b.segmentPrefix), b = d.toString(16), a.push(b), a.push('">');
        case 6:
            return a.push('<table hidden><tbody id="'), a.push(b.segmentPrefix), b = d.toString(16), a.push(b), a.push('">');
        case 7:
            return a.push('<table hidden><tr id="'), a.push(b.segmentPrefix), b = d.toString(16), a.push(b), a.push('">');
        case 8:
            return a.push('<table hidden><colgroup id="'), a.push(b.segmentPrefix), b = d.toString(16), a.push(b), a.push('">');
        default:
            throw Error("Unknown insertion mode. This is a bug in React.");
    }
}
function Ua(a, b) {
    switch(b.insertionMode){
        case 0:
        case 1:
        case 2:
            return a.push("</div>");
        case 3:
            return a.push("</svg>");
        case 4:
            return a.push("</math>");
        case 5:
            return a.push("</table>");
        case 6:
            return a.push("</tbody></table>");
        case 7:
            return a.push("</tr></table>");
        case 8:
            return a.push("</colgroup></table>");
        default:
            throw Error("Unknown insertion mode. This is a bug in React.");
    }
}
var Va = /[<\u2028\u2029]/g;
function Wa(a) {
    return JSON.stringify(a).replace(Va, function(b) {
        switch(b){
            case "<":
                return "\\u003c";
            case "\u2028":
                return "\\u2028";
            case "\u2029":
                return "\\u2029";
            default:
                throw Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
        }
    });
}
var Xa = /[&><\u2028\u2029]/g;
function K(a) {
    return JSON.stringify(a).replace(Xa, function(b) {
        switch(b){
            case "&":
                return "\\u0026";
            case ">":
                return "\\u003e";
            case "<":
                return "\\u003c";
            case "\u2028":
                return "\\u2028";
            case "\u2029":
                return "\\u2029";
            default:
                throw Error("escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
        }
    });
}
var Ya = !1, Za = !0;
function $a(a) {
    if ("stylesheet" === a.type && 0 === (a.state & 1)) Ya = !0;
    else if ("style" === a.type) {
        var b = a.chunks, c = a.props.hrefs, d = 0;
        if (b.length) {
            this.push('<style media="not all" data-precedence="');
            a = u(a.props.precedence);
            this.push(a);
            if (c.length) {
                for(this.push('" data-href="'); d < c.length - 1; d++)a = u(c[d]), this.push(a), this.push(" ");
                d = u(c[d]);
                this.push(d);
            }
            this.push('">');
            for(d = 0; d < b.length; d++)this.push(b[d]);
            Za = this.push("</style>");
            Ya = !0;
            b.length = 0;
            c.length = 0;
        }
    }
}
function bb(a, b, c) {
    Ya = !1;
    Za = !0;
    b.forEach($a, a);
    Ya && (c.stylesToHoist = !0);
    return Za;
}
function L(a) {
    if (0 === (a.state & 7)) {
        for(var b = a.chunks, c = 0; c < b.length; c++)this.push(b[c]);
        a.state |= 1;
    }
}
function M(a) {
    if (0 === (a.state & 7)) {
        for(var b = a.chunks, c = 0; c < b.length; c++)this.push(b[c]);
        a.state |= 2;
    }
}
var cb = null, db = !1;
function eb(a, b, c) {
    b = a.chunks;
    if (a.state & 3) c.delete(a);
    else if ("style" === a.type) cb = a;
    else {
        D(b, a.props);
        for(c = 0; c < b.length; c++)this.push(b[c]);
        a.state |= 1;
        db = !0;
    }
}
function fb(a, b) {
    db = !1;
    a.forEach(eb, this);
    a.clear();
    a = cb.chunks;
    var c = cb.props.hrefs;
    if (!1 === db || a.length) {
        this.push('<style data-precedence="');
        b = u(b);
        this.push(b);
        b = 0;
        if (c.length) {
            for(this.push('" data-href="'); b < c.length - 1; b++){
                var d = u(c[b]);
                this.push(d);
                this.push(" ");
            }
            b = u(c[b]);
            this.push(b);
        }
        this.push('">');
        for(b = 0; b < a.length; b++)this.push(a[b]);
        this.push("</style>");
        a.length = 0;
        c.length = 0;
    }
}
function gb(a) {
    if (!(a.state & 8) && "style" !== a.type) {
        var b = a.chunks, c = a.props;
        D(b, {
            rel: "preload",
            as: "style",
            href: a.props.href,
            crossOrigin: c.crossOrigin,
            fetchPriority: c.fetchPriority,
            integrity: c.integrity,
            media: c.media,
            hrefLang: c.hrefLang,
            referrerPolicy: c.referrerPolicy
        });
        for(c = 0; c < b.length; c++)this.push(b[c]);
        a.state |= 8;
        b.length = 0;
    }
}
function hb(a) {
    a.forEach(gb, this);
    a.clear();
}
function ib(a, b) {
    a.push("[");
    var c = "[";
    b.forEach(function(d) {
        if ("style" !== d.type && !(d.state & 1)) {
            if (d.state & 3) a.push(c), d = K("" + d.props.href), a.push(d), a.push("]"), c = ",[";
            else if ("stylesheet" === d.type) {
                a.push(c);
                var e = d.props["data-precedence"], g = d.props, f = K("" + d.props.href);
                a.push(f);
                e = "" + e;
                a.push(",");
                e = K(e);
                a.push(e);
                for(var k in g)if (t.call(g, k) && (f = g[k], null != f)) switch(k){
                    case "href":
                    case "rel":
                    case "precedence":
                    case "data-precedence":
                        break;
                    case "children":
                    case "dangerouslySetInnerHTML":
                        throw Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                    default:
                        a: {
                            e = a;
                            var h = k.toLowerCase();
                            switch(typeof f){
                                case "function":
                                case "symbol":
                                    break a;
                            }
                            switch(k){
                                case "innerHTML":
                                case "dangerouslySetInnerHTML":
                                case "suppressContentEditableWarning":
                                case "suppressHydrationWarning":
                                case "style":
                                    break a;
                                case "className":
                                    h = "class";
                                    f = "" + f;
                                    break;
                                case "hidden":
                                    if (!1 === f) break a;
                                    f = "";
                                    break;
                                case "src":
                                case "href":
                                    f = "" + f;
                                    break;
                                default:
                                    if (2 < k.length && ("o" === k[0] || "O" === k[0]) && ("n" === k[1] || "N" === k[1]) || !ka(k)) break a;
                                    f = "" + f;
                            }
                            e.push(",");
                            h = K(h);
                            e.push(h);
                            e.push(",");
                            f = K(f);
                            e.push(f);
                        }
                }
                a.push("]");
                c = ",[";
                d.state |= 2;
            }
        }
    });
    a.push("]");
}
function jb(a, b) {
    a.push("[");
    var c = "[";
    b.forEach(function(d) {
        if ("style" !== d.type && !(d.state & 1)) {
            if (d.state & 3) a.push(c), d = u(JSON.stringify("" + d.props.href)), a.push(d), a.push("]"), c = ",[";
            else if ("stylesheet" === d.type) {
                a.push(c);
                var e = d.props["data-precedence"], g = d.props, f = u(JSON.stringify("" + d.props.href));
                a.push(f);
                e = "" + e;
                a.push(",");
                e = u(JSON.stringify(e));
                a.push(e);
                for(var k in g)if (t.call(g, k) && (f = g[k], null != f)) switch(k){
                    case "href":
                    case "rel":
                    case "precedence":
                    case "data-precedence":
                        break;
                    case "children":
                    case "dangerouslySetInnerHTML":
                        throw Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                    default:
                        a: {
                            e = a;
                            var h = k.toLowerCase();
                            switch(typeof f){
                                case "function":
                                case "symbol":
                                    break a;
                            }
                            switch(k){
                                case "innerHTML":
                                case "dangerouslySetInnerHTML":
                                case "suppressContentEditableWarning":
                                case "suppressHydrationWarning":
                                case "style":
                                    break a;
                                case "className":
                                    h = "class";
                                    f = "" + f;
                                    break;
                                case "hidden":
                                    if (!1 === f) break a;
                                    f = "";
                                    break;
                                case "src":
                                case "href":
                                    f = "" + f;
                                    break;
                                default:
                                    if (2 < k.length && ("o" === k[0] || "O" === k[0]) && ("n" === k[1] || "N" === k[1]) || !ka(k)) break a;
                                    f = "" + f;
                            }
                            e.push(",");
                            h = u(JSON.stringify(h));
                            e.push(h);
                            e.push(",");
                            f = u(JSON.stringify(f));
                            e.push(f);
                        }
                }
                a.push("]");
                c = ",[";
                d.state |= 2;
            }
        }
    });
    a.push("]");
}
function kb() {
    return {
        preloadsMap: new Map,
        preconnectsMap: new Map,
        stylesMap: new Map,
        scriptsMap: new Map,
        preconnects: new Set,
        fontPreloads: new Set,
        precedences: new Map,
        stylePrecedences: new Map,
        scripts: new Set,
        explicitStylesheetPreloads: new Set,
        explicitScriptPreloads: new Set,
        explicitOtherPreloads: new Set,
        boundaryResources: null
    };
}
function ta(a) {
    var b = N ? N : null;
    if (b) {
        var c = b.resources;
        if ("string" === typeof a && a) {
            var d = "[prefetchDNS]" + a, e = c.preconnectsMap.get(d);
            e || (e = {
                type: "preconnect",
                chunks: [],
                state: 0,
                props: null
            }, c.preconnectsMap.set(d, e), D(e.chunks, {
                href: a,
                rel: "dns-prefetch"
            }));
            c.preconnects.add(e);
            lb(b);
        }
    }
}
function ua(a, b) {
    var c = N ? N : null;
    if (c) {
        var d = c.resources;
        if ("string" === typeof a && a) {
            b = null == b || "string" !== typeof b.crossOrigin ? null : "use-credentials" === b.crossOrigin ? "use-credentials" : "";
            var e = "[preconnect][" + (null === b ? "null" : b) + "]" + a, g = d.preconnectsMap.get(e);
            g || (g = {
                type: "preconnect",
                chunks: [],
                state: 0,
                props: null
            }, d.preconnectsMap.set(e, g), D(g.chunks, {
                rel: "preconnect",
                href: a,
                crossOrigin: b
            }));
            d.preconnects.add(g);
            lb(c);
        }
    }
}
function va(a, b) {
    var c = N ? N : null;
    if (c) {
        var d = c.resources;
        if ("string" === typeof a && a && "object" === typeof b && null !== b && "string" === typeof b.as && b.as) {
            var e = b.as;
            if ("image" === e) {
                var g = b.imageSrcSet;
                var f = b.imageSizes, k = "";
                "string" === typeof g && "" !== g ? (k += "[" + g + "]", "string" === typeof f && (k += "[" + f + "]")) : k += "[][]" + a;
                g = "[" + e + "]" + k;
            } else g = "[" + e + "]" + a;
            f = d.preloadsMap.get(g);
            f || (f = {
                type: "preload",
                chunks: [],
                state: 0,
                props: {
                    rel: "preload",
                    as: e,
                    href: "image" === e && b.imageSrcSet ? void 0 : a,
                    crossOrigin: "font" === e ? "" : b.crossOrigin,
                    integrity: b.integrity,
                    type: b.type,
                    nonce: b.nonce,
                    fetchPriority: b.fetchPriority,
                    imageSrcSet: b.imageSrcSet,
                    imageSizes: b.imageSizes
                }
            }, d.preloadsMap.set(g, f), D(f.chunks, f.props));
            switch(e){
                case "font":
                    d.fontPreloads.add(f);
                    break;
                case "style":
                    d.explicitStylesheetPreloads.add(f);
                    break;
                case "script":
                    d.explicitScriptPreloads.add(f);
                    break;
                default:
                    d.explicitOtherPreloads.add(f);
            }
            lb(c);
        }
    }
}
function wa(a, b) {
    var c = N ? N : null;
    if (c) {
        var d = c.resources;
        if ("string" === typeof a && a && "object" === typeof b && null !== b) {
            var e = b.as;
            switch(e){
                case "style":
                    var g = "[" + e + "]" + a, f = d.stylesMap.get(g);
                    e = b.precedence || "default";
                    if (!f) {
                        f = 0;
                        var k = d.preloadsMap.get(g);
                        k && k.state & 3 && (f = 8);
                        f = {
                            type: "stylesheet",
                            chunks: [],
                            state: f,
                            props: {
                                rel: "stylesheet",
                                href: a,
                                "data-precedence": e,
                                crossOrigin: b.crossOrigin,
                                integrity: b.integrity,
                                fetchPriority: b.fetchPriority
                            }
                        };
                        d.stylesMap.set(g, f);
                        a = d.precedences.get(e);
                        a || (a = new Set, d.precedences.set(e, a), b = {
                            type: "style",
                            chunks: [],
                            state: 0,
                            props: {
                                precedence: e,
                                hrefs: []
                            }
                        }, a.add(b), d.stylePrecedences.set(e, b));
                        a.add(f);
                        lb(c);
                    }
                    break;
                case "script":
                    g = "[" + e + "]" + a, e = d.scriptsMap.get(g), e || (e = {
                        type: "script",
                        chunks: [],
                        state: 0,
                        props: null
                    }, d.scriptsMap.set(g, e), a = {
                        src: a,
                        async: !0,
                        crossOrigin: b.crossOrigin,
                        integrity: b.integrity,
                        nonce: b.nonce,
                        fetchPriority: b.fetchPriority
                    }, d.scripts.add(e), H(e.chunks, a), lb(c));
            }
        }
    }
}
function mb(a) {
    this.add(a);
}
function nb(a, b, c, d) {
    a = void 0 === c ? "" : c;
    c = null;
    var e = 0;
    void 0 !== d && (e = 1, "string" === typeof d ? (c = {
        src: d,
        chunks: []
    }, H(c.chunks, {
        src: d,
        async: !0,
        integrity: void 0,
        nonce: void 0
    })) : (c = {
        src: d.src,
        chunks: []
    }, H(c.chunks, {
        src: d.src,
        async: !0,
        integrity: d.integrity,
        nonce: void 0
    })));
    return {
        bootstrapChunks: [],
        placeholderPrefix: a + "P:",
        segmentPrefix: a + "S:",
        boundaryPrefix: a + "B:",
        idPrefix: a,
        nextSuspenseID: 0,
        streamingFormat: e,
        startInlineScript: "<script>",
        instructions: 0,
        externalRuntimeScript: c,
        htmlChunks: null,
        headChunks: null,
        hasBody: !1,
        charsetChunks: [],
        preconnectChunks: [],
        preloadChunks: [],
        hoistableChunks: [],
        stylesToHoist: !1,
        generateStaticMarkup: b
    };
}
function ob() {
    return {
        insertionMode: 2,
        selectedValue: null,
        noscriptTagInScope: !1
    };
}
function pb(a, b, c, d) {
    if (c.generateStaticMarkup) return a.push(u(b)), !1;
    "" === b ? a = d : (d && a.push("<!-- -->"), a.push(u(b)), a = !0);
    return a;
}
var qb = Symbol.for("react.element"), rb = Symbol.for("react.portal"), sb = Symbol.for("react.fragment"), tb = Symbol.for("react.strict_mode"), ub = Symbol.for("react.profiler"), vb = Symbol.for("react.provider"), wb = Symbol.for("react.context"), xb = Symbol.for("react.server_context"), yb = Symbol.for("react.forward_ref"), zb = Symbol.for("react.suspense"), Ab = Symbol.for("react.suspense_list"), Bb = Symbol.for("react.memo"), Cb = Symbol.for("react.lazy"), Db = Symbol.for("react.scope"), Eb = Symbol.for("react.debug_trace_mode"), Fb = Symbol.for("react.offscreen"), Gb = Symbol.for("react.legacy_hidden"), Hb = Symbol.for("react.cache"), Ib = Symbol.for("react.default_value"), Jb = Symbol.iterator;
function Kb(a) {
    if (null == a) return null;
    if ("function" === typeof a) return a.displayName || a.name || null;
    if ("string" === typeof a) return a;
    switch(a){
        case sb:
            return "Fragment";
        case rb:
            return "Portal";
        case ub:
            return "Profiler";
        case tb:
            return "StrictMode";
        case zb:
            return "Suspense";
        case Ab:
            return "SuspenseList";
        case Hb:
            return "Cache";
    }
    if ("object" === typeof a) switch(a.$$typeof){
        case wb:
            return (a.displayName || "Context") + ".Consumer";
        case vb:
            return (a._context.displayName || "Context") + ".Provider";
        case yb:
            var b = a.render;
            a = a.displayName;
            a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
            return a;
        case Bb:
            return b = a.displayName || null, null !== b ? b : Kb(a.type) || "Memo";
        case Cb:
            b = a._payload;
            a = a._init;
            try {
                return Kb(a(b));
            } catch (c) {
                break;
            }
        case xb:
            return (a.displayName || a._globalName) + ".Provider";
    }
    return null;
}
var Lb = {};
function Mb(a, b) {
    a = a.contextTypes;
    if (!a) return Lb;
    var c = {}, d;
    for(d in a)c[d] = b[d];
    return c;
}
var O = null;
function Nb(a, b) {
    if (a !== b) {
        a.context._currentValue2 = a.parentValue;
        a = a.parent;
        var c = b.parent;
        if (null === a) {
            if (null !== c) throw Error("The stacks must reach the root at the same time. This is a bug in React.");
        } else {
            if (null === c) throw Error("The stacks must reach the root at the same time. This is a bug in React.");
            Nb(a, c);
        }
        b.context._currentValue2 = b.value;
    }
}
function Ob(a) {
    a.context._currentValue2 = a.parentValue;
    a = a.parent;
    null !== a && Ob(a);
}
function Pb(a) {
    var b = a.parent;
    null !== b && Pb(b);
    a.context._currentValue2 = a.value;
}
function Qb(a, b) {
    a.context._currentValue2 = a.parentValue;
    a = a.parent;
    if (null === a) throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
    a.depth === b.depth ? Nb(a, b) : Qb(a, b);
}
function Rb(a, b) {
    var c = b.parent;
    if (null === c) throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
    a.depth === c.depth ? Nb(a, c) : Rb(a, c);
    b.context._currentValue2 = b.value;
}
function Sb(a) {
    var b = O;
    b !== a && (null === b ? Pb(a) : null === a ? Ob(b) : b.depth === a.depth ? Nb(b, a) : b.depth > a.depth ? Qb(b, a) : Rb(b, a), O = a);
}
var Tb = {
    isMounted: function() {
        return !1;
    },
    enqueueSetState: function(a, b) {
        a = a._reactInternals;
        null !== a.queue && a.queue.push(b);
    },
    enqueueReplaceState: function(a, b) {
        a = a._reactInternals;
        a.replace = !0;
        a.queue = [
            b
        ];
    },
    enqueueForceUpdate: function() {}
};
function Ub(a, b, c, d) {
    var e = void 0 !== a.state ? a.state : null;
    a.updater = Tb;
    a.props = c;
    a.state = e;
    var g = {
        queue: [],
        replace: !1
    };
    a._reactInternals = g;
    var f = b.contextType;
    a.context = "object" === typeof f && null !== f ? f._currentValue2 : d;
    f = b.getDerivedStateFromProps;
    "function" === typeof f && (f = f(c, e), e = null === f || void 0 === f ? e : p({}, e, f), a.state = e);
    if ("function" !== typeof b.getDerivedStateFromProps && "function" !== typeof a.getSnapshotBeforeUpdate && ("function" === typeof a.UNSAFE_componentWillMount || "function" === typeof a.componentWillMount)) if (b = a.state, "function" === typeof a.componentWillMount && a.componentWillMount(), "function" === typeof a.UNSAFE_componentWillMount && a.UNSAFE_componentWillMount(), b !== a.state && Tb.enqueueReplaceState(a, a.state, null), null !== g.queue && 0 < g.queue.length) if (b = g.queue, f = g.replace, g.queue = null, g.replace = !1, f && 1 === b.length) a.state = b[0];
    else {
        g = f ? b[0] : a.state;
        e = !0;
        for(f = f ? 1 : 0; f < b.length; f++){
            var k = b[f];
            k = "function" === typeof k ? k.call(a, g, c, d) : k;
            null != k && (e ? (e = !1, g = p({}, g, k)) : p(g, k));
        }
        a.state = g;
    }
    else g.queue = null;
}
var Vb = {
    id: 1,
    overflow: ""
};
function Wb(a, b, c) {
    var d = a.id;
    a = a.overflow;
    var e = 32 - Xb(d) - 1;
    d &= ~(1 << e);
    c += 1;
    var g = 32 - Xb(b) + e;
    if (30 < g) {
        var f = e - e % 5;
        g = (d & (1 << f) - 1).toString(32);
        d >>= f;
        e -= f;
        return {
            id: 1 << 32 - Xb(b) + e | c << e | d,
            overflow: g + a
        };
    }
    return {
        id: 1 << g | c << e | d,
        overflow: a
    };
}
var Xb = Math.clz32 ? Math.clz32 : Yb, Zb = Math.log, $b = Math.LN2;
function Yb(a) {
    a >>>= 0;
    return 0 === a ? 32 : 31 - (Zb(a) / $b | 0) | 0;
}
var ac = Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`");
function bc() {}
function cc(a, b, c) {
    c = a[c];
    void 0 === c ? a.push(b) : c !== b && (b.then(bc, bc), b = c);
    switch(b.status){
        case "fulfilled":
            return b.value;
        case "rejected":
            throw b.reason;
        default:
            if ("string" !== typeof b.status) switch(a = b, a.status = "pending", a.then(function(d) {
                if ("pending" === b.status) {
                    var e = b;
                    e.status = "fulfilled";
                    e.value = d;
                }
            }, function(d) {
                if ("pending" === b.status) {
                    var e = b;
                    e.status = "rejected";
                    e.reason = d;
                }
            }), b.status){
                case "fulfilled":
                    return b.value;
                case "rejected":
                    throw b.reason;
            }
            fc = b;
            throw ac;
    }
}
var fc = null;
function gc() {
    if (null === fc) throw Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
    var a = fc;
    fc = null;
    return a;
}
function hc(a, b) {
    return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
}
var ic = "function" === typeof Object.is ? Object.is : hc, Q = null, jc = null, kc = null, R = null, lc = !1, mc = !1, S = 0, nc = 0, T = null, U = null, oc = 0;
function X() {
    if (null === Q) throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    return Q;
}
function pc() {
    if (0 < oc) throw Error("Rendered more hooks than during the previous render");
    return {
        memoizedState: null,
        queue: null,
        next: null
    };
}
function qc() {
    null === R ? null === kc ? (lc = !1, kc = R = pc()) : (lc = !0, R = kc) : null === R.next ? (lc = !1, R = R.next = pc()) : (lc = !0, R = R.next);
    return R;
}
function rc(a, b, c, d) {
    for(; mc;)mc = !1, nc = S = 0, oc += 1, R = null, c = a(b, d);
    sc();
    return c;
}
function tc() {
    var a = T;
    T = null;
    return a;
}
function sc() {
    jc = Q = null;
    mc = !1;
    kc = null;
    oc = 0;
    R = U = null;
}
function uc(a, b) {
    return "function" === typeof b ? b(a) : b;
}
function vc(a, b, c) {
    Q = X();
    R = qc();
    if (lc) {
        var d = R.queue;
        b = d.dispatch;
        if (null !== U && (c = U.get(d), void 0 !== c)) {
            U.delete(d);
            d = R.memoizedState;
            do d = a(d, c.action), c = c.next;
            while (null !== c);
            R.memoizedState = d;
            return [
                d,
                b
            ];
        }
        return [
            R.memoizedState,
            b
        ];
    }
    a = a === uc ? "function" === typeof b ? b() : b : void 0 !== c ? c(b) : b;
    R.memoizedState = a;
    a = R.queue = {
        last: null,
        dispatch: null
    };
    a = a.dispatch = wc.bind(null, Q, a);
    return [
        R.memoizedState,
        a
    ];
}
function xc(a, b) {
    Q = X();
    R = qc();
    b = void 0 === b ? null : b;
    if (null !== R) {
        var c = R.memoizedState;
        if (null !== c && null !== b) {
            var d = c[1];
            a: if (null === d) d = !1;
            else {
                for(var e = 0; e < d.length && e < b.length; e++)if (!ic(b[e], d[e])) {
                    d = !1;
                    break a;
                }
                d = !0;
            }
            if (d) return c[0];
        }
    }
    a = a();
    R.memoizedState = [
        a,
        b
    ];
    return a;
}
function wc(a, b, c) {
    if (25 <= oc) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
    if (a === Q) if (mc = !0, a = {
        action: c,
        next: null
    }, null === U && (U = new Map), c = U.get(b), void 0 === c) U.set(b, a);
    else {
        for(b = c; null !== b.next;)b = b.next;
        b.next = a;
    }
}
function yc() {
    throw Error("startTransition cannot be called during server rendering.");
}
function zc(a) {
    var b = nc;
    nc += 1;
    null === T && (T = []);
    return cc(T, a, b);
}
function Ac() {
    throw Error("Cache cannot be refreshed during server rendering.");
}
function Bc() {}
var Dc = {
    readContext: function(a) {
        return a._currentValue2;
    },
    use: function(a) {
        if (null !== a && "object" === typeof a) {
            if ("function" === typeof a.then) return zc(a);
            if (a.$$typeof === wb || a.$$typeof === xb) return a._currentValue2;
        }
        throw Error("An unsupported type was passed to use(): " + String(a));
    },
    useContext: function(a) {
        X();
        return a._currentValue2;
    },
    useMemo: xc,
    useReducer: vc,
    useRef: function(a) {
        Q = X();
        R = qc();
        var b = R.memoizedState;
        return null === b ? (a = {
            current: a
        }, R.memoizedState = a) : b;
    },
    useState: function(a) {
        return vc(uc, a);
    },
    useInsertionEffect: Bc,
    useLayoutEffect: Bc,
    useCallback: function(a, b) {
        return xc(function() {
            return a;
        }, b);
    },
    useImperativeHandle: Bc,
    useEffect: Bc,
    useDebugValue: Bc,
    useDeferredValue: function(a) {
        X();
        return a;
    },
    useTransition: function() {
        X();
        return [
            !1,
            yc
        ];
    },
    useId: function() {
        var a = jc.treeContext;
        var b = a.overflow;
        a = a.id;
        a = (a & ~(1 << 32 - Xb(a) - 1)).toString(32) + b;
        var c = Cc;
        if (null === c) throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
        b = S++;
        a = ":" + c.idPrefix + "R" + a;
        0 < b && (a += "H" + b.toString(32));
        return a + ":";
    },
    useSyncExternalStore: function(a, b, c) {
        if (void 0 === c) throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        return c();
    },
    useCacheRefresh: function() {
        return Ac;
    }
}, Cc = null, Ec = {
    getCacheSignal: function() {
        throw Error("Not implemented.");
    },
    getCacheForType: function() {
        throw Error("Not implemented.");
    }
}, Fc = ra.ReactCurrentDispatcher, Gc = ra.ReactCurrentCache;
function Hc(a) {
    console.error(a);
    return null;
}
function Ic() {}
function Jc(a, b, c, d, e, g, f, k, h, l) {
    sa.current = xa;
    var q = [], m = new Set;
    b = {
        destination: null,
        flushScheduled: !1,
        responseState: c,
        progressiveChunkSize: void 0 === e ? 12800 : e,
        status: 0,
        fatalError: null,
        nextSegmentId: 0,
        allPendingTasks: 0,
        pendingRootTasks: 0,
        resources: b,
        completedRootSegment: null,
        abortableTasks: m,
        pingedTasks: q,
        clientRenderedBoundaries: [],
        completedBoundaries: [],
        partialBoundaries: [],
        onError: void 0 === g ? Hc : g,
        onAllReady: void 0 === f ? Ic : f,
        onShellReady: void 0 === k ? Ic : k,
        onShellError: void 0 === h ? Ic : h,
        onFatalError: void 0 === l ? Ic : l
    };
    d = Kc(b, 0, null, d, !1, !1);
    d.parentFlushed = !0;
    a = Lc(b, null, a, null, d, m, Lb, null, Vb);
    q.push(a);
    return b;
}
var N = null;
function Lc(a, b, c, d, e, g, f, k, h) {
    a.allPendingTasks++;
    null === d ? a.pendingRootTasks++ : d.pendingTasks++;
    var l = {
        node: c,
        ping: function() {
            a.pingedTasks.push(l);
            1 === a.pingedTasks.length && (a.flushScheduled = null !== a.destination, Mc(a));
        },
        blockedBoundary: d,
        blockedSegment: e,
        abortSet: g,
        legacyContext: f,
        context: k,
        treeContext: h,
        thenableState: b
    };
    g.add(l);
    return l;
}
function Kc(a, b, c, d, e, g) {
    return {
        status: 0,
        id: -1,
        index: b,
        parentFlushed: !1,
        chunks: [],
        children: [],
        formatContext: d,
        boundary: c,
        lastPushedText: e,
        textEmbedded: g
    };
}
function Y(a, b) {
    a = a.onError(b);
    if (null != a && "string" !== typeof a) throw Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof a + '" instead');
    return a;
}
function Nc(a, b) {
    var c = a.onShellError;
    c(b);
    c = a.onFatalError;
    c(b);
    null !== a.destination ? (a.status = 2, a.destination.destroy(b)) : (a.status = 1, a.fatalError = b);
}
function Oc(a, b, c, d) {
    var e = c.render(), g = d.childContextTypes;
    if (null !== g && void 0 !== g) {
        var f = b.legacyContext;
        if ("function" !== typeof c.getChildContext) d = f;
        else {
            c = c.getChildContext();
            for(var k in c)if (!(k in g)) throw Error((Kb(d) || "Unknown") + '.getChildContext(): key "' + k + '" is not defined in childContextTypes.');
            d = p({}, f, c);
        }
        b.legacyContext = d;
        Z(a, b, null, e);
        b.legacyContext = f;
    } else Z(a, b, null, e);
}
function Pc(a, b) {
    if (a && a.defaultProps) {
        b = p({}, b);
        a = a.defaultProps;
        for(var c in a)void 0 === b[c] && (b[c] = a[c]);
        return b;
    }
    return b;
}
function Qc(a, b, c, d, e, g) {
    if ("function" === typeof d) if (d.prototype && d.prototype.isReactComponent) c = Mb(d, b.legacyContext), g = d.contextType, g = new d(e, "object" === typeof g && null !== g ? g._currentValue2 : c), Ub(g, d, e, c), Oc(a, b, g, d);
    else {
        g = Mb(d, b.legacyContext);
        Q = {};
        jc = b;
        nc = S = 0;
        T = c;
        c = d(e, g);
        c = rc(d, e, c, g);
        var f = 0 !== S;
        if ("object" === typeof c && null !== c && "function" === typeof c.render && void 0 === c.$$typeof) Ub(c, d, e, g), Oc(a, b, c, d);
        else if (f) {
            e = b.treeContext;
            b.treeContext = Wb(e, 1, 0);
            try {
                Z(a, b, null, c);
            } finally{
                b.treeContext = e;
            }
        } else Z(a, b, null, c);
    }
    else if ("string" === typeof d) {
        c = b.blockedSegment;
        f = Qa(c.chunks, d, e, a.resources, a.responseState, c.formatContext, c.lastPushedText);
        c.lastPushedText = !1;
        g = c.formatContext;
        c.formatContext = ya(g, d, e);
        Rc(a, b, f);
        c.formatContext = g;
        a: {
            b = c.chunks;
            switch(d){
                case "title":
                case "style":
                case "script":
                case "area":
                case "base":
                case "br":
                case "col":
                case "embed":
                case "hr":
                case "img":
                case "input":
                case "keygen":
                case "link":
                case "meta":
                case "param":
                case "source":
                case "track":
                case "wbr":
                    break a;
                case "body":
                    if (1 >= g.insertionMode) {
                        a.responseState.hasBody = !0;
                        break a;
                    }
                    break;
                case "html":
                    if (0 === g.insertionMode) break a;
            }
            b.push("</", d, ">");
        }
        c.lastPushedText = !1;
    } else {
        switch(d){
            case Gb:
            case Eb:
            case tb:
            case ub:
            case sb:
                Z(a, b, null, e.children);
                return;
            case Fb:
                "hidden" !== e.mode && Z(a, b, null, e.children);
                return;
            case Ab:
                Z(a, b, null, e.children);
                return;
            case Db:
                throw Error("ReactDOMServer does not yet support scope components.");
            case zb:
                a: {
                    d = b.blockedBoundary;
                    c = b.blockedSegment;
                    g = e.fallback;
                    e = e.children;
                    f = new Set;
                    var k = {
                        id: null,
                        rootSegmentID: -1,
                        parentFlushed: !1,
                        pendingTasks: 0,
                        forceClientRender: !1,
                        completedSegments: [],
                        byteSize: 0,
                        fallbackAbortableTasks: f,
                        errorDigest: null,
                        resources: new Set
                    }, h = Kc(a, c.chunks.length, k, c.formatContext, !1, !1);
                    c.children.push(h);
                    c.lastPushedText = !1;
                    var l = Kc(a, 0, null, c.formatContext, !1, !1);
                    l.parentFlushed = !0;
                    b.blockedBoundary = k;
                    b.blockedSegment = l;
                    a.resources.boundaryResources = k.resources;
                    try {
                        if (Rc(a, b, e), a.responseState.generateStaticMarkup || l.lastPushedText && l.textEmbedded && l.chunks.push("<!-- -->"), l.status = 1, Sc(k, l), 0 === k.pendingTasks) break a;
                    } catch (q) {
                        l.status = 4, k.forceClientRender = !0, k.errorDigest = Y(a, q);
                    } finally{
                        a.resources.boundaryResources = d ? d.resources : null, b.blockedBoundary = d, b.blockedSegment = c;
                    }
                    b = Lc(a, null, g, d, h, f, b.legacyContext, b.context, b.treeContext);
                    a.pingedTasks.push(b);
                }
                return;
        }
        if ("object" === typeof d && null !== d) switch(d.$$typeof){
            case yb:
                d = d.render;
                Q = {};
                jc = b;
                nc = S = 0;
                T = c;
                c = d(e, g);
                e = rc(d, e, c, g);
                if (0 !== S) {
                    d = b.treeContext;
                    b.treeContext = Wb(d, 1, 0);
                    try {
                        Z(a, b, null, e);
                    } finally{
                        b.treeContext = d;
                    }
                } else Z(a, b, null, e);
                return;
            case Bb:
                d = d.type;
                e = Pc(d, e);
                Qc(a, b, c, d, e, g);
                return;
            case vb:
                c = e.children;
                d = d._context;
                e = e.value;
                g = d._currentValue2;
                d._currentValue2 = e;
                f = O;
                O = e = {
                    parent: f,
                    depth: null === f ? 0 : f.depth + 1,
                    context: d,
                    parentValue: g,
                    value: e
                };
                b.context = e;
                Z(a, b, null, c);
                a = O;
                if (null === a) throw Error("Tried to pop a Context at the root of the app. This is a bug in React.");
                e = a.parentValue;
                a.context._currentValue2 = e === Ib ? a.context._defaultValue : e;
                a = O = a.parent;
                b.context = a;
                return;
            case wb:
                e = e.children;
                e = e(d._currentValue2);
                Z(a, b, null, e);
                return;
            case Cb:
                g = d._init;
                d = g(d._payload);
                e = Pc(d, e);
                Qc(a, b, c, d, e, void 0);
                return;
        }
        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((null == d ? d : typeof d) + "."));
    }
}
function Z(a, b, c, d) {
    b.node = d;
    if ("object" === typeof d && null !== d) {
        switch(d.$$typeof){
            case qb:
                Qc(a, b, c, d.type, d.props, d.ref);
                return;
            case rb:
                throw Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
            case Cb:
                c = d._init;
                d = c(d._payload);
                Z(a, b, null, d);
                return;
        }
        if (qa(d)) {
            Tc(a, b, d);
            return;
        }
        null === d || "object" !== typeof d ? c = null : (c = Jb && d[Jb] || d["@@iterator"], c = "function" === typeof c ? c : null);
        if (c && (c = c.call(d))) {
            d = c.next();
            if (!d.done) {
                var e = [];
                do e.push(d.value), d = c.next();
                while (!d.done);
                Tc(a, b, e);
            }
            return;
        }
        if ("function" === typeof d.then) return Z(a, b, null, zc(d));
        if (d.$$typeof === wb || d.$$typeof === xb) return Z(a, b, null, d._currentValue2);
        a = Object.prototype.toString.call(d);
        throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === a ? "object with keys {" + Object.keys(d).join(", ") + "}" : a) + "). If you meant to render a collection of children, use an array instead.");
    }
    "string" === typeof d ? (c = b.blockedSegment, c.lastPushedText = pb(b.blockedSegment.chunks, d, a.responseState, c.lastPushedText)) : "number" === typeof d && (c = b.blockedSegment, c.lastPushedText = pb(b.blockedSegment.chunks, "" + d, a.responseState, c.lastPushedText));
}
function Tc(a, b, c) {
    for(var d = c.length, e = 0; e < d; e++){
        var g = b.treeContext;
        b.treeContext = Wb(g, d, e);
        try {
            Rc(a, b, c[e]);
        } finally{
            b.treeContext = g;
        }
    }
}
function Rc(a, b, c) {
    var d = b.blockedSegment, e = d.children.length, g = d.chunks.length, f = b.blockedSegment.formatContext, k = b.legacyContext, h = b.context;
    try {
        return Z(a, b, null, c);
    } catch (l) {
        if (sc(), d.children.length = e, d.chunks.length = g, c = l === ac ? gc() : l, "object" === typeof c && null !== c && "function" === typeof c.then) d = tc(), e = b.blockedSegment, g = Kc(a, e.chunks.length, null, e.formatContext, e.lastPushedText, !0), e.children.push(g), e.lastPushedText = !1, a = Lc(a, d, b.node, b.blockedBoundary, g, b.abortSet, b.legacyContext, b.context, b.treeContext).ping, c.then(a, a), b.blockedSegment.formatContext = f, b.legacyContext = k, b.context = h, Sb(h);
        else throw b.blockedSegment.formatContext = f, b.legacyContext = k, b.context = h, Sb(h), c;
    }
}
function Uc(a) {
    var b = a.blockedBoundary;
    a = a.blockedSegment;
    a.status = 3;
    Vc(this, b, a);
}
function Wc(a, b, c) {
    var d = a.blockedBoundary;
    a.blockedSegment.status = 3;
    null === d ? (b.allPendingTasks--, 1 !== b.status && 2 !== b.status && (Y(b, c), Nc(b, c))) : (d.pendingTasks--, d.forceClientRender || (d.forceClientRender = !0, d.errorDigest = b.onError(c), d.parentFlushed && b.clientRenderedBoundaries.push(d)), d.fallbackAbortableTasks.forEach(function(e) {
        return Wc(e, b, c);
    }), d.fallbackAbortableTasks.clear(), b.allPendingTasks--, 0 === b.allPendingTasks && (a = b.onAllReady, a()));
}
function Sc(a, b) {
    if (0 === b.chunks.length && 1 === b.children.length && null === b.children[0].boundary) {
        var c = b.children[0];
        c.id = b.id;
        c.parentFlushed = !0;
        1 === c.status && Sc(a, c);
    } else a.completedSegments.push(b);
}
function Vc(a, b, c) {
    if (null === b) {
        if (c.parentFlushed) {
            if (null !== a.completedRootSegment) throw Error("There can only be one root segment. This is a bug in React.");
            a.completedRootSegment = c;
        }
        a.pendingRootTasks--;
        0 === a.pendingRootTasks && (a.onShellError = Ic, b = a.onShellReady, b());
    } else b.pendingTasks--, b.forceClientRender || (0 === b.pendingTasks ? (c.parentFlushed && 1 === c.status && Sc(b, c), b.parentFlushed && a.completedBoundaries.push(b), b.fallbackAbortableTasks.forEach(Uc, a), b.fallbackAbortableTasks.clear()) : c.parentFlushed && 1 === c.status && (Sc(b, c), 1 === b.completedSegments.length && b.parentFlushed && a.partialBoundaries.push(b)));
    a.allPendingTasks--;
    0 === a.allPendingTasks && (a = a.onAllReady, a());
}
function Mc(a) {
    if (2 !== a.status) {
        var b = O, c = Fc.current;
        Fc.current = Dc;
        var d = Gc.current;
        Gc.current = Ec;
        var e = N;
        N = a;
        var g = Cc;
        Cc = a.responseState;
        try {
            var f = a.pingedTasks, k;
            for(k = 0; k < f.length; k++){
                var h = f[k];
                var l = a, q = h.blockedBoundary;
                l.resources.boundaryResources = q ? q.resources : null;
                var m = h.blockedSegment;
                if (0 === m.status) {
                    Sb(h.context);
                    var w = m.children.length, r = m.chunks.length;
                    try {
                        var y = h.thenableState;
                        h.thenableState = null;
                        Z(l, h, y, h.node);
                        l.responseState.generateStaticMarkup || m.lastPushedText && m.textEmbedded && m.chunks.push("<!-- -->");
                        h.abortSet.delete(h);
                        m.status = 1;
                        Vc(l, h.blockedBoundary, m);
                    } catch (C) {
                        sc();
                        m.children.length = w;
                        m.chunks.length = r;
                        var B = C === ac ? gc() : C;
                        if ("object" === typeof B && null !== B && "function" === typeof B.then) {
                            var G = h.ping;
                            B.then(G, G);
                            h.thenableState = tc();
                        } else {
                            h.abortSet.delete(h);
                            m.status = 4;
                            var n = l, I = h.blockedBoundary, V = B, ha = Y(n, V);
                            null === I ? Nc(n, V) : (I.pendingTasks--, I.forceClientRender || (I.forceClientRender = !0, I.errorDigest = ha, I.parentFlushed && n.clientRenderedBoundaries.push(I)));
                            n.allPendingTasks--;
                            if (0 === n.allPendingTasks) {
                                var ia = n.onAllReady;
                                ia();
                            }
                        }
                    } finally{
                        l.resources.boundaryResources = null;
                    }
                }
            }
            f.splice(0, k);
            null !== a.destination && Xc(a, a.destination);
        } catch (C) {
            Y(a, C), Nc(a, C);
        } finally{
            Cc = g, Fc.current = c, Gc.current = d, c === Dc && Sb(b), N = e;
        }
    }
}
function Yc(a, b, c) {
    c.parentFlushed = !0;
    switch(c.status){
        case 0:
            var d = c.id = a.nextSegmentId++;
            c.lastPushedText = !1;
            c.textEmbedded = !1;
            a = a.responseState;
            b.push('<template id="');
            b.push(a.placeholderPrefix);
            a = d.toString(16);
            b.push(a);
            return b.push('"></template>');
        case 1:
            c.status = 2;
            var e = !0;
            d = c.chunks;
            var g = 0;
            c = c.children;
            for(var f = 0; f < c.length; f++){
                for(e = c[f]; g < e.index; g++)b.push(d[g]);
                e = Zc(a, b, e);
            }
            for(; g < d.length - 1; g++)b.push(d[g]);
            g < d.length && (e = b.push(d[g]));
            return e;
        default:
            throw Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
    }
}
function Zc(a, b, c) {
    var d = c.boundary;
    if (null === d) return Yc(a, b, c);
    d.parentFlushed = !0;
    if (d.forceClientRender) return a.responseState.generateStaticMarkup || (d = d.errorDigest, b.push("<!--$!-->"), b.push("<template"), d && (b.push(' data-dgst="'), d = u(d), b.push(d), b.push('"')), b.push("></template>")), Yc(a, b, c), a = a.responseState.generateStaticMarkup ? !0 : b.push("<!--/$-->"), a;
    if (0 < d.pendingTasks) {
        d.rootSegmentID = a.nextSegmentId++;
        0 < d.completedSegments.length && a.partialBoundaries.push(d);
        var e = a.responseState;
        var g = e.nextSuspenseID++;
        e = e.boundaryPrefix + g.toString(16);
        d = d.id = e;
        Sa(b, a.responseState, d);
        Yc(a, b, c);
        return b.push("<!--/$-->");
    }
    if (d.byteSize > a.progressiveChunkSize) return d.rootSegmentID = a.nextSegmentId++, a.completedBoundaries.push(d), Sa(b, a.responseState, d.id), Yc(a, b, c), b.push("<!--/$-->");
    (c = a.resources.boundaryResources) && d.resources.forEach(mb, c);
    a.responseState.generateStaticMarkup || b.push("<!--$-->");
    c = d.completedSegments;
    if (1 !== c.length) throw Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
    Zc(a, b, c[0]);
    a = a.responseState.generateStaticMarkup ? !0 : b.push("<!--/$-->");
    return a;
}
function $c(a, b, c) {
    Ta(b, a.responseState, c.formatContext, c.id);
    Zc(a, b, c);
    return Ua(b, c.formatContext);
}
function ad(a, b, c) {
    a.resources.boundaryResources = c.resources;
    for(var d = c.completedSegments, e = 0; e < d.length; e++)bd(a, b, c, d[e]);
    d.length = 0;
    bb(b, c.resources, a.responseState);
    a = a.responseState;
    d = c.id;
    e = c.rootSegmentID;
    c = c.resources;
    var g = a.stylesToHoist;
    a.stylesToHoist = !1;
    var f = 0 === a.streamingFormat;
    f ? (b.push(a.startInlineScript), g ? 0 === (a.instructions & 2) ? (a.instructions |= 10, b.push('$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};$RR("')) : 0 === (a.instructions & 8) ? (a.instructions |= 8, b.push('$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};$RR("')) : b.push('$RR("') : 0 === (a.instructions & 2) ? (a.instructions |= 2, b.push('$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};$RC("')) : b.push('$RC("')) : g ? b.push('<template data-rri="" data-bid="') : b.push('<template data-rci="" data-bid="');
    if (null === d) throw Error("An ID must have been assigned before we can complete the boundary.");
    e = e.toString(16);
    b.push(d);
    f ? b.push('","') : b.push('" data-sid="');
    b.push(a.segmentPrefix);
    b.push(e);
    g ? f ? (b.push('",'), ib(b, c)) : (b.push('" data-sty="'), jb(b, c)) : f && b.push('"');
    d = f ? b.push(")</script>") : b.push('"></template>');
    return Ra(b, a) && d;
}
function bd(a, b, c, d) {
    if (2 === d.status) return !0;
    var e = d.id;
    if (-1 === e) {
        if (-1 === (d.id = c.rootSegmentID)) throw Error("A root segment ID must have been assigned by now. This is a bug in React.");
        return $c(a, b, d);
    }
    $c(a, b, d);
    a = a.responseState;
    (c = 0 === a.streamingFormat) ? (b.push(a.startInlineScript), 0 === (a.instructions & 1) ? (a.instructions |= 1, b.push('$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};;$RS("')) : b.push('$RS("')) : b.push('<template data-rsi="" data-sid="');
    b.push(a.segmentPrefix);
    e = e.toString(16);
    b.push(e);
    c ? b.push('","') : b.push('" data-pid="');
    b.push(a.placeholderPrefix);
    b.push(e);
    b = c ? b.push('")</script>') : b.push('"></template>');
    return b;
}
function Xc(a, b) {
    try {
        var c, d = a.completedRootSegment;
        if (null !== d) if (0 === a.pendingRootTasks) {
            var e = a.resources, g = a.responseState;
            if (0 !== a.allPendingTasks && g.externalRuntimeScript) {
                var f = g.externalRuntimeScript, k = f.chunks, h = "[script]" + f.src, l = e.scriptsMap.get(h);
                l || (l = {
                    type: "script",
                    chunks: k,
                    state: 0,
                    props: null
                }, e.scriptsMap.set(h, l), e.scripts.add(l));
            }
            var q = g.htmlChunks, m = g.headChunks;
            f = 0;
            if (q) {
                for(f = 0; f < q.length; f++)b.push(q[f]);
                if (m) for(f = 0; f < m.length; f++)b.push(m[f]);
                else {
                    var w = F("head");
                    b.push(w);
                    b.push(">");
                }
            } else if (m) for(f = 0; f < m.length; f++)b.push(m[f]);
            var r = g.charsetChunks;
            for(f = 0; f < r.length; f++)b.push(r[f]);
            r.length = 0;
            e.preconnects.forEach(L, b);
            e.preconnects.clear();
            var y = g.preconnectChunks;
            for(f = 0; f < y.length; f++)b.push(y[f]);
            y.length = 0;
            e.fontPreloads.forEach(L, b);
            e.fontPreloads.clear();
            e.precedences.forEach(fb, b);
            e.scripts.forEach(L, b);
            e.scripts.clear();
            e.explicitStylesheetPreloads.forEach(L, b);
            e.explicitStylesheetPreloads.clear();
            e.explicitScriptPreloads.forEach(L, b);
            e.explicitScriptPreloads.clear();
            e.explicitOtherPreloads.forEach(L, b);
            e.explicitOtherPreloads.clear();
            var B = g.preloadChunks;
            for(f = 0; f < B.length; f++)b.push(B[f]);
            B.length = 0;
            var G = g.hoistableChunks;
            for(f = 0; f < G.length; f++)b.push(G[f]);
            G.length = 0;
            q && null === m && (b.push("</"), b.push("head"), b.push(">"));
            Zc(a, b, d);
            a.completedRootSegment = null;
            Ra(b, a.responseState);
        } else return;
        else if (0 < a.pendingRootTasks) return;
        var n = a.resources, I = a.responseState;
        d = 0;
        n.preconnects.forEach(M, b);
        n.preconnects.clear();
        var V = I.preconnectChunks;
        for(d = 0; d < V.length; d++)b.push(V[d]);
        V.length = 0;
        n.fontPreloads.forEach(M, b);
        n.fontPreloads.clear();
        n.precedences.forEach(hb, b);
        n.scripts.forEach(M, b);
        n.scripts.clear();
        n.explicitStylesheetPreloads.forEach(M, b);
        n.explicitStylesheetPreloads.clear();
        n.explicitScriptPreloads.forEach(M, b);
        n.explicitScriptPreloads.clear();
        n.explicitOtherPreloads.forEach(M, b);
        n.explicitOtherPreloads.clear();
        var ha = I.preloadChunks;
        for(d = 0; d < ha.length; d++)b.push(ha[d]);
        ha.length = 0;
        var ia = I.hoistableChunks;
        for(d = 0; d < ia.length; d++)b.push(ia[d]);
        ia.length = 0;
        var C = a.clientRenderedBoundaries;
        for(c = 0; c < C.length; c++){
            var P = C[c];
            n = b;
            var E = a.responseState, dc = P.id, ab = P.errorDigest, Ca = P.errorMessage, ja = P.errorComponentStack, W = 0 === E.streamingFormat;
            W ? (n.push(E.startInlineScript), 0 === (E.instructions & 4) ? (E.instructions |= 4, n.push('$RX=function(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};;$RX("')) : n.push('$RX("')) : n.push('<template data-rxi="" data-bid="');
            if (null === dc) throw Error("An ID must have been assigned before we can complete the boundary.");
            n.push(dc);
            W && n.push('"');
            if (ab || Ca || ja) if (W) {
                n.push(",");
                var gd = Wa(ab || "");
                n.push(gd);
            } else {
                n.push('" data-dgst="');
                var hd = u(ab || "");
                n.push(hd);
            }
            if (Ca || ja) if (W) {
                n.push(",");
                var id = Wa(Ca || "");
                n.push(id);
            } else {
                n.push('" data-msg="');
                var jd = u(Ca || "");
                n.push(jd);
            }
            if (ja) if (W) {
                n.push(",");
                var kd = Wa(ja);
                n.push(kd);
            } else {
                n.push('" data-stck="');
                var ld = u(ja);
                n.push(ld);
            }
            if (W ? !n.push(")</script>") : !n.push('"></template>')) {
                a.destination = null;
                c++;
                C.splice(0, c);
                return;
            }
        }
        C.splice(0, c);
        var Da = a.completedBoundaries;
        for(c = 0; c < Da.length; c++)if (!ad(a, b, Da[c])) {
            a.destination = null;
            c++;
            Da.splice(0, c);
            return;
        }
        Da.splice(0, c);
        var Ea = a.partialBoundaries;
        for(c = 0; c < Ea.length; c++){
            var Fa = Ea[c];
            a: {
                C = a;
                P = b;
                C.resources.boundaryResources = Fa.resources;
                var Ga = Fa.completedSegments;
                for(E = 0; E < Ga.length; E++)if (!bd(C, P, Fa, Ga[E])) {
                    E++;
                    Ga.splice(0, E);
                    var ec = !1;
                    break a;
                }
                Ga.splice(0, E);
                ec = bb(P, Fa.resources, C.responseState);
            }
            if (!ec) {
                a.destination = null;
                c++;
                Ea.splice(0, c);
                return;
            }
        }
        Ea.splice(0, c);
        var Ha = a.completedBoundaries;
        for(c = 0; c < Ha.length; c++)if (!ad(a, b, Ha[c])) {
            a.destination = null;
            c++;
            Ha.splice(0, c);
            return;
        }
        Ha.splice(0, c);
    } finally{
        0 === a.allPendingTasks && 0 === a.pingedTasks.length && 0 === a.clientRenderedBoundaries.length && 0 === a.completedBoundaries.length && (a.flushScheduled = !1, a = a.responseState, a.hasBody && (b.push("</"), b.push("body"), b.push(">")), a.htmlChunks && (b.push("</"), b.push("html"), b.push(">")), b.push(null));
    }
}
function lb(a) {
    if (!1 === a.flushScheduled && 0 === a.pingedTasks.length && null !== a.destination) {
        var b = a.destination;
        a.flushScheduled = !0;
        Xc(a, b);
    }
}
function cd(a, b) {
    if (1 === a.status) a.status = 2, b.destroy(a.fatalError);
    else if (2 !== a.status && null === a.destination) {
        a.destination = b;
        try {
            Xc(a, b);
        } catch (c) {
            Y(a, c), Nc(a, c);
        }
    }
}
function dd(a, b) {
    try {
        var c = a.abortableTasks;
        if (0 < c.size) {
            var d = void 0 === b ? Error("The render was aborted by the server without a reason.") : b;
            c.forEach(function(e) {
                return Wc(e, a, d);
            });
            c.clear();
        }
        null !== a.destination && Xc(a, a.destination);
    } catch (e) {
        Y(a, e), Nc(a, e);
    }
}
function ed() {}
function fd(a, b, c, d, e) {
    var g = !1, f = null, k = "", h = !1, l = kb();
    a = Jc(a, l, nb(l, c, b ? b.identifierPrefix : void 0, e), ob(), Infinity, ed, void 0, function() {
        h = !0;
    }, void 0, void 0);
    a.flushScheduled = null !== a.destination;
    Mc(a);
    dd(a, d);
    cd(a, {
        push: function(q) {
            null !== q && (k += q);
            return !0;
        },
        destroy: function(q) {
            g = !0;
            f = q;
        }
    });
    if (g && f !== d) throw f;
    if (!h) throw Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
    return k;
}
function md(a, b) {
    a.prototype = Object.create(b.prototype);
    a.prototype.constructor = a;
    a.__proto__ = b;
}
var nd = function(a) {
    function b() {
        var d = a.call(this, {}) || this;
        d.request = null;
        d.startedFlowing = !1;
        return d;
    }
    md(b, a);
    var c = b.prototype;
    c._destroy = function(d, e) {
        dd(this.request);
        e(d);
    };
    c._read = function() {
        this.startedFlowing && cd(this.request, this);
    };
    return b;
}(ca.Readable);
function od() {}
function pd(a, b) {
    var c = new nd, d = kb(), e = Jc(a, d, nb(d, !1, b ? b.identifierPrefix : void 0), ob(), Infinity, od, function() {
        c.startedFlowing = !0;
        cd(e, c);
    }, void 0, void 0);
    c.request = e;
    e.flushScheduled = null !== e.destination;
    Mc(e);
    return c;
}
exports.renderToNodeStream = function(a, b) {
    return pd(a, b);
};
exports.renderToStaticMarkup = function(a, b) {
    return fd(a, b, !0, 'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server');
};
exports.renderToStaticNodeStream = function(a, b) {
    return pd(a, b);
};
exports.renderToString = function(a, b) {
    return fd(a, b, !1, 'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server');
};
exports.version = "18.3.0-canary-7118f5dd7-20230705";


/***/ }),

/***/ 8706:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * @license React
 * react-dom-server.node.production.min.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
var aa = __webpack_require__(3837), ba = __webpack_require__(852), ca = __webpack_require__(9066), da = __webpack_require__(84);
function ea(a) {
    "function" === typeof a.flush && a.flush();
}
var h = null, l = 0, fa = !0;
function q(a, b) {
    if ("string" === typeof b) {
        if (0 !== b.length) if (2048 < 3 * b.length) 0 < l && (w(a, h.subarray(0, l)), h = new Uint8Array(2048), l = 0), w(a, ha.encode(b));
        else {
            var c = h;
            0 < l && (c = h.subarray(l));
            c = ha.encodeInto(b, c);
            var d = c.read;
            l += c.written;
            d < b.length && (w(a, h.subarray(0, l)), h = new Uint8Array(2048), l = ha.encodeInto(b.slice(d), h).written);
            2048 === l && (w(a, h), h = new Uint8Array(2048), l = 0);
        }
    } else 0 !== b.byteLength && (2048 < b.byteLength ? (0 < l && (w(a, h.subarray(0, l)), h = new Uint8Array(2048), l = 0), w(a, b)) : (c = h.length - l, c < b.byteLength && (0 === c ? w(a, h) : (h.set(b.subarray(0, c), l), l += c, w(a, h), b = b.subarray(c)), h = new Uint8Array(2048), l = 0), h.set(b, l), l += b.byteLength, 2048 === l && (w(a, h), h = new Uint8Array(2048), l = 0)));
}
function w(a, b) {
    a = a.write(b);
    fa = fa && a;
}
function y(a, b) {
    q(a, b);
    return fa;
}
function ia(a) {
    h && 0 < l && a.write(h.subarray(0, l));
    h = null;
    l = 0;
    fa = !0;
}
var ha = new aa.TextEncoder;
function z(a) {
    return ha.encode(a);
}
var A = Object.assign, B = Object.prototype.hasOwnProperty, ja = RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), ka = {}, na = {};
function oa(a) {
    if (B.call(na, a)) return !0;
    if (B.call(ka, a)) return !1;
    if (ja.test(a)) return na[a] = !0;
    ka[a] = !0;
    return !1;
}
var pa = new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" ")), qa = new Map([
    [
        "acceptCharset",
        "accept-charset"
    ],
    [
        "htmlFor",
        "for"
    ],
    [
        "httpEquiv",
        "http-equiv"
    ],
    [
        "crossOrigin",
        "crossorigin"
    ],
    [
        "accentHeight",
        "accent-height"
    ],
    [
        "alignmentBaseline",
        "alignment-baseline"
    ],
    [
        "arabicForm",
        "arabic-form"
    ],
    [
        "baselineShift",
        "baseline-shift"
    ],
    [
        "capHeight",
        "cap-height"
    ],
    [
        "clipPath",
        "clip-path"
    ],
    [
        "clipRule",
        "clip-rule"
    ],
    [
        "colorInterpolation",
        "color-interpolation"
    ],
    [
        "colorInterpolationFilters",
        "color-interpolation-filters"
    ],
    [
        "colorProfile",
        "color-profile"
    ],
    [
        "colorRendering",
        "color-rendering"
    ],
    [
        "dominantBaseline",
        "dominant-baseline"
    ],
    [
        "enableBackground",
        "enable-background"
    ],
    [
        "fillOpacity",
        "fill-opacity"
    ],
    [
        "fillRule",
        "fill-rule"
    ],
    [
        "floodColor",
        "flood-color"
    ],
    [
        "floodOpacity",
        "flood-opacity"
    ],
    [
        "fontFamily",
        "font-family"
    ],
    [
        "fontSize",
        "font-size"
    ],
    [
        "fontSizeAdjust",
        "font-size-adjust"
    ],
    [
        "fontStretch",
        "font-stretch"
    ],
    [
        "fontStyle",
        "font-style"
    ],
    [
        "fontVariant",
        "font-variant"
    ],
    [
        "fontWeight",
        "font-weight"
    ],
    [
        "glyphName",
        "glyph-name"
    ],
    [
        "glyphOrientationHorizontal",
        "glyph-orientation-horizontal"
    ],
    [
        "glyphOrientationVertical",
        "glyph-orientation-vertical"
    ],
    [
        "horizAdvX",
        "horiz-adv-x"
    ],
    [
        "horizOriginX",
        "horiz-origin-x"
    ],
    [
        "imageRendering",
        "image-rendering"
    ],
    [
        "letterSpacing",
        "letter-spacing"
    ],
    [
        "lightingColor",
        "lighting-color"
    ],
    [
        "markerEnd",
        "marker-end"
    ],
    [
        "markerMid",
        "marker-mid"
    ],
    [
        "markerStart",
        "marker-start"
    ],
    [
        "overlinePosition",
        "overline-position"
    ],
    [
        "overlineThickness",
        "overline-thickness"
    ],
    [
        "paintOrder",
        "paint-order"
    ],
    [
        "panose-1",
        "panose-1"
    ],
    [
        "pointerEvents",
        "pointer-events"
    ],
    [
        "renderingIntent",
        "rendering-intent"
    ],
    [
        "shapeRendering",
        "shape-rendering"
    ],
    [
        "stopColor",
        "stop-color"
    ],
    [
        "stopOpacity",
        "stop-opacity"
    ],
    [
        "strikethroughPosition",
        "strikethrough-position"
    ],
    [
        "strikethroughThickness",
        "strikethrough-thickness"
    ],
    [
        "strokeDasharray",
        "stroke-dasharray"
    ],
    [
        "strokeDashoffset",
        "stroke-dashoffset"
    ],
    [
        "strokeLinecap",
        "stroke-linecap"
    ],
    [
        "strokeLinejoin",
        "stroke-linejoin"
    ],
    [
        "strokeMiterlimit",
        "stroke-miterlimit"
    ],
    [
        "strokeOpacity",
        "stroke-opacity"
    ],
    [
        "strokeWidth",
        "stroke-width"
    ],
    [
        "textAnchor",
        "text-anchor"
    ],
    [
        "textDecoration",
        "text-decoration"
    ],
    [
        "textRendering",
        "text-rendering"
    ],
    [
        "transformOrigin",
        "transform-origin"
    ],
    [
        "underlinePosition",
        "underline-position"
    ],
    [
        "underlineThickness",
        "underline-thickness"
    ],
    [
        "unicodeBidi",
        "unicode-bidi"
    ],
    [
        "unicodeRange",
        "unicode-range"
    ],
    [
        "unitsPerEm",
        "units-per-em"
    ],
    [
        "vAlphabetic",
        "v-alphabetic"
    ],
    [
        "vHanging",
        "v-hanging"
    ],
    [
        "vIdeographic",
        "v-ideographic"
    ],
    [
        "vMathematical",
        "v-mathematical"
    ],
    [
        "vectorEffect",
        "vector-effect"
    ],
    [
        "vertAdvY",
        "vert-adv-y"
    ],
    [
        "vertOriginX",
        "vert-origin-x"
    ],
    [
        "vertOriginY",
        "vert-origin-y"
    ],
    [
        "wordSpacing",
        "word-spacing"
    ],
    [
        "writingMode",
        "writing-mode"
    ],
    [
        "xmlnsXlink",
        "xmlns:xlink"
    ],
    [
        "xHeight",
        "x-height"
    ]
]), ra = /["'&<>]/;
function C(a) {
    if ("boolean" === typeof a || "number" === typeof a) return "" + a;
    a = "" + a;
    var b = ra.exec(a);
    if (b) {
        var c = "", d, e = 0;
        for(d = b.index; d < a.length; d++){
            switch(a.charCodeAt(d)){
                case 34:
                    b = "&quot;";
                    break;
                case 38:
                    b = "&amp;";
                    break;
                case 39:
                    b = "&#x27;";
                    break;
                case 60:
                    b = "&lt;";
                    break;
                case 62:
                    b = "&gt;";
                    break;
                default:
                    continue;
            }
            e !== d && (c += a.slice(e, d));
            e = d + 1;
            c += b;
        }
        a = e !== d ? c + a.slice(e, d) : c;
    }
    return a;
}
var sa = /([A-Z])/g, ta = /^ms-/, ua = Array.isArray, va = ca.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, wa = da.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Dispatcher, Da = {
    prefetchDNS: za,
    preconnect: Aa,
    preload: Ba,
    preinit: Ca
}, Ea = z('"></template>'), Fa = z("<script>"), Ga = z("</script>"), Ha = z('<script src="'), Ia = z('<script type="module" src="'), Ja = z('" nonce="'), Ka = z('" integrity="'), La = z('" crossorigin="'), Ma = z('" async=""></script>'), Na = /(<\/|<)(s)(cript)/gi;
function Oa(a, b, c, d) {
    return "" + b + ("s" === c ? "\\u0073" : "\\u0053") + d;
}
function E(a, b, c) {
    return {
        insertionMode: a,
        selectedValue: b,
        noscriptTagInScope: c
    };
}
function Pa(a, b, c) {
    switch(b){
        case "noscript":
            return E(2, null, !0);
        case "select":
            return E(2, null != c.value ? c.value : c.defaultValue, a.noscriptTagInScope);
        case "svg":
            return E(3, null, a.noscriptTagInScope);
        case "math":
            return E(4, null, a.noscriptTagInScope);
        case "foreignObject":
            return E(2, null, a.noscriptTagInScope);
        case "table":
            return E(5, null, a.noscriptTagInScope);
        case "thead":
        case "tbody":
        case "tfoot":
            return E(6, null, a.noscriptTagInScope);
        case "colgroup":
            return E(8, null, a.noscriptTagInScope);
        case "tr":
            return E(7, null, a.noscriptTagInScope);
    }
    return 5 <= a.insertionMode ? E(2, null, a.noscriptTagInScope) : 0 === a.insertionMode ? "html" === b ? E(1, null, !1) : E(2, null, !1) : 1 === a.insertionMode ? E(2, null, !1) : a;
}
var G = z("<!-- -->");
function Qa(a, b, c, d) {
    if ("" === b) return d;
    d && a.push(G);
    a.push(C(b));
    return !0;
}
var Ra = new Map, Sa = z(' style="'), Ta = z(":"), Ua = z(";");
function Va(a, b) {
    if ("object" !== typeof b) throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    var c = !0, d;
    for(d in b)if (B.call(b, d)) {
        var e = b[d];
        if (null != e && "boolean" !== typeof e && "" !== e) {
            if (0 === d.indexOf("--")) {
                var g = C(d);
                e = C(("" + e).trim());
            } else g = Ra.get(d), void 0 === g && (g = z(C(d.replace(sa, "-$1").toLowerCase().replace(ta, "-ms-"))), Ra.set(d, g)), e = "number" === typeof e ? 0 === e || pa.has(d) ? "" + e : e + "px" : C(("" + e).trim());
            c ? (c = !1, a.push(Sa, g, Ta, e)) : a.push(Ua, g, Ta, e);
        }
    }
    c || a.push(H);
}
var I = z(" "), J = z('="'), H = z('"'), bb = z('=""');
function cb(a, b, c) {
    c && "function" !== typeof c && "symbol" !== typeof c && a.push(I, b, bb);
}
function K(a, b, c) {
    "function" !== typeof c && "symbol" !== typeof c && "boolean" !== typeof c && a.push(I, b, J, C(c), H);
}
z(C("javascript:throw new Error('A React form was unexpectedly submitted.')"));
var db = z('<input type="hidden"');
function eb(a, b) {
    this.push(db);
    if ("string" !== typeof a) throw Error("File/Blob fields are not yet supported in progressive forms. It probably means you are closing over binary data or FormData in a Server Action.");
    K(this, "name", b);
    K(this, "value", a);
    this.push(fb);
}
function gb(a, b, c, d, e, g, f) {
    null != f && M(a, "name", f);
    null != c && M(a, "formAction", c);
    null != d && M(a, "formEncType", d);
    null != e && M(a, "formMethod", e);
    null != g && M(a, "formTarget", g);
    return null;
}
function M(a, b, c) {
    switch(b){
        case "className":
            K(a, "class", c);
            break;
        case "tabIndex":
            K(a, "tabindex", c);
            break;
        case "dir":
        case "role":
        case "viewBox":
        case "width":
        case "height":
            K(a, b, c);
            break;
        case "style":
            Va(a, c);
            break;
        case "src":
        case "href":
        case "action":
        case "formAction":
            if (null == c || "function" === typeof c || "symbol" === typeof c || "boolean" === typeof c) break;
            a.push(I, b, J, C("" + c), H);
            break;
        case "defaultValue":
        case "defaultChecked":
        case "innerHTML":
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
            break;
        case "autoFocus":
        case "multiple":
        case "muted":
            cb(a, b.toLowerCase(), c);
            break;
        case "xlinkHref":
            if ("function" === typeof c || "symbol" === typeof c || "boolean" === typeof c) break;
            a.push(I, "xlink:href", J, C("" + c), H);
            break;
        case "contentEditable":
        case "spellCheck":
        case "draggable":
        case "value":
        case "autoReverse":
        case "externalResourcesRequired":
        case "focusable":
        case "preserveAlpha":
            "function" !== typeof c && "symbol" !== typeof c && a.push(I, b, J, C(c), H);
            break;
        case "allowFullScreen":
        case "async":
        case "autoPlay":
        case "controls":
        case "default":
        case "defer":
        case "disabled":
        case "disablePictureInPicture":
        case "disableRemotePlayback":
        case "formNoValidate":
        case "hidden":
        case "loop":
        case "noModule":
        case "noValidate":
        case "open":
        case "playsInline":
        case "readOnly":
        case "required":
        case "reversed":
        case "scoped":
        case "seamless":
        case "itemScope":
            c && "function" !== typeof c && "symbol" !== typeof c && a.push(I, b, bb);
            break;
        case "capture":
        case "download":
            !0 === c ? a.push(I, b, bb) : !1 !== c && "function" !== typeof c && "symbol" !== typeof c && a.push(I, b, J, C(c), H);
            break;
        case "cols":
        case "rows":
        case "size":
        case "span":
            "function" !== typeof c && "symbol" !== typeof c && !isNaN(c) && 1 <= c && a.push(I, b, J, C(c), H);
            break;
        case "rowSpan":
        case "start":
            "function" === typeof c || "symbol" === typeof c || isNaN(c) || a.push(I, b, J, C(c), H);
            break;
        case "xlinkActuate":
            K(a, "xlink:actuate", c);
            break;
        case "xlinkArcrole":
            K(a, "xlink:arcrole", c);
            break;
        case "xlinkRole":
            K(a, "xlink:role", c);
            break;
        case "xlinkShow":
            K(a, "xlink:show", c);
            break;
        case "xlinkTitle":
            K(a, "xlink:title", c);
            break;
        case "xlinkType":
            K(a, "xlink:type", c);
            break;
        case "xmlBase":
            K(a, "xml:base", c);
            break;
        case "xmlLang":
            K(a, "xml:lang", c);
            break;
        case "xmlSpace":
            K(a, "xml:space", c);
            break;
        default:
            if (!(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) {
                if (b = qa.get(b) || b, oa(b)) {
                    switch(typeof c){
                        case "function":
                        case "symbol":
                            return;
                        case "boolean":
                            var d = b.toLowerCase().slice(0, 5);
                            if ("data-" !== d && "aria-" !== d) return;
                    }
                    a.push(I, b, J, C(c), H);
                }
            }
    }
}
var P = z(">"), fb = z("/>");
function Q(a, b, c) {
    if (null != b) {
        if (null != c) throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
        if ("object" !== typeof b || !("__html" in b)) throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        b = b.__html;
        null !== b && void 0 !== b && a.push("" + b);
    }
}
function hb(a) {
    var b = "";
    ca.Children.forEach(a, function(c) {
        null != c && (b += c);
    });
    return b;
}
var ib = z(' selected=""');
z('addEventListener("submit",function(a){if(!a.defaultPrevented){var c=a.target,d=a.submitter,e=c.action,b=d;if(d){var f=d.getAttribute("formAction");null!=f&&(e=f,b=null)}"javascript:throw new Error(\'A React form was unexpectedly submitted.\')"===e&&(a.preventDefault(),b?(a=document.createElement("input"),a.name=b.name,a.value=b.value,b.parentNode.insertBefore(a,b),b=new FormData(c),a.parentNode.removeChild(a)):b=new FormData(c),a=c.getRootNode(),(a.$$reactFormReplay=a.$$reactFormReplay||[]).push(c,\nd,b))}});');
function jb(a, b, c, d, e, g, f) {
    var m = b.rel, k = b.href, n = b.precedence;
    if (3 === g || f || null != b.itemProp || "string" !== typeof m || "string" !== typeof k || "" === k) return R(a, b), null;
    if ("stylesheet" === b.rel) {
        c = "[style]" + k;
        if ("string" !== typeof n || null != b.disabled || b.onLoad || b.onError) return R(a, b);
        g = d.stylesMap.get(c);
        g || (b = A({}, b, {
            "data-precedence": b.precedence,
            precedence: null
        }), g = d.preloadsMap.get(c), f = 0, g && (g.state |= 4, m = g.props, null == b.crossOrigin && (b.crossOrigin = m.crossOrigin), null == b.integrity && (b.integrity = m.integrity), g.state & 3 && (f = 8)), g = {
            type: "stylesheet",
            chunks: [],
            state: f,
            props: b
        }, d.stylesMap.set(c, g), b = d.precedences.get(n), b || (b = new Set, d.precedences.set(n, b), c = {
            type: "style",
            chunks: [],
            state: 0,
            props: {
                precedence: n,
                hrefs: []
            }
        }, b.add(c), d.stylePrecedences.set(n, c)), b.add(g));
        d.boundaryResources && d.boundaryResources.add(g);
        e && a.push(G);
        return null;
    }
    if (b.onLoad || b.onError) return R(a, b);
    e && a.push(G);
    switch(b.rel){
        case "preconnect":
        case "dns-prefetch":
            return R(c.preconnectChunks, b);
        case "preload":
            return R(c.preloadChunks, b);
        default:
            return R(c.hoistableChunks, b);
    }
}
function R(a, b) {
    a.push(T("link"));
    for(var c in b)if (B.call(b, c)) {
        var d = b[c];
        if (null != d) switch(c){
            case "children":
            case "dangerouslySetInnerHTML":
                throw Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            default:
                M(a, c, d);
        }
    }
    a.push(fb);
    return null;
}
function kb(a, b, c) {
    a.push(T(c));
    for(var d in b)if (B.call(b, d)) {
        var e = b[d];
        if (null != e) switch(d){
            case "children":
            case "dangerouslySetInnerHTML":
                throw Error(c + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            default:
                M(a, d, e);
        }
    }
    a.push(fb);
    return null;
}
function lb(a, b) {
    a.push(T("title"));
    var c = null, d = null, e;
    for(e in b)if (B.call(b, e)) {
        var g = b[e];
        if (null != g) switch(e){
            case "children":
                c = g;
                break;
            case "dangerouslySetInnerHTML":
                d = g;
                break;
            default:
                M(a, e, g);
        }
    }
    a.push(P);
    b = Array.isArray(c) ? 2 > c.length ? c[0] : null : c;
    "function" !== typeof b && "symbol" !== typeof b && null !== b && void 0 !== b && a.push(C("" + b));
    Q(a, d, c);
    a.push(U, "title", V);
    return null;
}
function mb(a, b) {
    a.push(T("script"));
    var c = null, d = null, e;
    for(e in b)if (B.call(b, e)) {
        var g = b[e];
        if (null != g) switch(e){
            case "children":
                c = g;
                break;
            case "dangerouslySetInnerHTML":
                d = g;
                break;
            default:
                M(a, e, g);
        }
    }
    a.push(P);
    Q(a, d, c);
    "string" === typeof c && a.push(C(c));
    a.push(U, "script", V);
    return null;
}
function nb(a, b, c) {
    a.push(T(c));
    var d = c = null, e;
    for(e in b)if (B.call(b, e)) {
        var g = b[e];
        if (null != g) switch(e){
            case "children":
                c = g;
                break;
            case "dangerouslySetInnerHTML":
                d = g;
                break;
            default:
                M(a, e, g);
        }
    }
    a.push(P);
    Q(a, d, c);
    return "string" === typeof c ? (a.push(C(c)), null) : c;
}
var ob = z("\n"), pb = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/, qb = new Map;
function T(a) {
    var b = qb.get(a);
    if (void 0 === b) {
        if (!pb.test(a)) throw Error("Invalid tag: " + a);
        b = z("<" + a);
        qb.set(a, b);
    }
    return b;
}
var rb = z("<!DOCTYPE html>");
function sb(a, b, c, d, e, g, f) {
    switch(b){
        case "div":
        case "span":
        case "svg":
        case "path":
        case "a":
        case "g":
        case "p":
        case "li":
            break;
        case "select":
            a.push(T("select"));
            f = e = null;
            for(var m in c)if (B.call(c, m)) {
                var k = c[m];
                if (null != k) switch(m){
                    case "children":
                        e = k;
                        break;
                    case "dangerouslySetInnerHTML":
                        f = k;
                        break;
                    case "defaultValue":
                    case "value":
                        break;
                    default:
                        M(a, m, k);
                }
            }
            a.push(P);
            Q(a, f, e);
            return e;
        case "option":
            e = g.selectedValue;
            a.push(T("option"));
            var n = d = f = null;
            k = null;
            for(var t in c)if (B.call(c, t)) {
                var p = c[t];
                if (null != p) switch(t){
                    case "children":
                        f = p;
                        break;
                    case "selected":
                        n = p;
                        break;
                    case "dangerouslySetInnerHTML":
                        k = p;
                        break;
                    case "value":
                        d = p;
                    default:
                        M(a, t, p);
                }
            }
            if (null != e) if (c = null !== d ? "" + d : hb(f), ua(e)) for(d = 0; d < e.length; d++){
                if ("" + e[d] === c) {
                    a.push(ib);
                    break;
                }
            }
            else "" + e === c && a.push(ib);
            else n && a.push(ib);
            a.push(P);
            Q(a, k, f);
            return f;
        case "textarea":
            a.push(T("textarea"));
            k = f = e = null;
            for(var x in c)if (B.call(c, x) && (d = c[x], null != d)) switch(x){
                case "children":
                    k = d;
                    break;
                case "value":
                    e = d;
                    break;
                case "defaultValue":
                    f = d;
                    break;
                case "dangerouslySetInnerHTML":
                    throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                default:
                    M(a, x, d);
            }
            null === e && null !== f && (e = f);
            a.push(P);
            if (null != k) {
                if (null != e) throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                if (ua(k) && 1 < k.length) throw Error("<textarea> can only have at most one child.");
                e = "" + k;
            }
            "string" === typeof e && "\n" === e[0] && a.push(ob);
            null !== e && a.push(C("" + e));
            return null;
        case "input":
            a.push(T("input"));
            var u = null, v = t = null;
            p = n = d = f = g = x = null;
            for(k in c)if (B.call(c, k) && (m = c[k], null != m)) switch(k){
                case "children":
                case "dangerouslySetInnerHTML":
                    throw Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                case "name":
                    u = m;
                    break;
                case "formAction":
                    t = m;
                    break;
                case "formEncType":
                    v = m;
                    break;
                case "formMethod":
                    x = m;
                    break;
                case "formTarget":
                    g = m;
                    break;
                case "defaultChecked":
                    p = m;
                    break;
                case "defaultValue":
                    d = m;
                    break;
                case "checked":
                    n = m;
                    break;
                case "value":
                    f = m;
                    break;
                default:
                    M(a, k, m);
            }
            c = gb(a, e, t, v, x, g, u);
            null !== n ? cb(a, "checked", n) : null !== p && cb(a, "checked", p);
            null !== f ? M(a, "value", f) : null !== d && M(a, "value", d);
            a.push(fb);
            null !== c && c.forEach(eb, a);
            return null;
        case "button":
            a.push(T("button"));
            v = t = u = n = d = k = f = null;
            for(p in c)if (B.call(c, p) && (x = c[p], null != x)) switch(p){
                case "children":
                    f = x;
                    break;
                case "dangerouslySetInnerHTML":
                    k = x;
                    break;
                case "name":
                    d = x;
                    break;
                case "formAction":
                    n = x;
                    break;
                case "formEncType":
                    u = x;
                    break;
                case "formMethod":
                    t = x;
                    break;
                case "formTarget":
                    v = x;
                    break;
                default:
                    M(a, p, x);
            }
            c = gb(a, e, n, u, t, v, d);
            a.push(P);
            null !== c && c.forEach(eb, a);
            Q(a, k, f);
            "string" === typeof f ? (a.push(C(f)), a = null) : a = f;
            return a;
        case "form":
            a.push(T("form"));
            p = n = d = k = f = e = null;
            for(u in c)if (B.call(c, u) && (t = c[u], null != t)) switch(u){
                case "children":
                    e = t;
                    break;
                case "dangerouslySetInnerHTML":
                    f = t;
                    break;
                case "action":
                    k = t;
                    break;
                case "encType":
                    d = t;
                    break;
                case "method":
                    n = t;
                    break;
                case "target":
                    p = t;
                    break;
                default:
                    M(a, u, t);
            }
            null != k && M(a, "action", k);
            null != d && M(a, "encType", d);
            null != n && M(a, "method", n);
            null != p && M(a, "target", p);
            a.push(P);
            Q(a, f, e);
            "string" === typeof e ? (a.push(C(e)), a = null) : a = e;
            return a;
        case "menuitem":
            a.push(T("menuitem"));
            for(var D in c)if (B.call(c, D) && (e = c[D], null != e)) switch(D){
                case "children":
                case "dangerouslySetInnerHTML":
                    throw Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                default:
                    M(a, D, e);
            }
            a.push(P);
            return null;
        case "title":
            return 3 === g.insertionMode || g.noscriptTagInScope || null != c.itemProp ? a = lb(a, c) : (lb(e.hoistableChunks, c), a = null), a;
        case "link":
            return jb(a, c, e, d, f, g.insertionMode, g.noscriptTagInScope);
        case "script":
            e = c.async;
            if ("string" !== typeof c.src || !c.src || !e || "function" === typeof e || "symbol" === typeof e || c.onLoad || c.onError || 3 === g.insertionMode || g.noscriptTagInScope || null != c.itemProp) a = mb(a, c);
            else {
                n = "[script]" + c.src;
                e = d.scriptsMap.get(n);
                if (!e) {
                    e = {
                        type: "script",
                        chunks: [],
                        state: 0,
                        props: null
                    };
                    d.scriptsMap.set(n, e);
                    d.scripts.add(e);
                    k = c;
                    if (d = d.preloadsMap.get(n)) d.state |= 4, c = k = A({}, c), d = d.props, null == c.crossOrigin && (c.crossOrigin = d.crossOrigin), null == c.integrity && (c.integrity = d.integrity);
                    mb(e.chunks, k);
                }
                f && a.push(G);
                a = null;
            }
            return a;
        case "style":
            e = c.precedence;
            k = c.href;
            if (3 === g.insertionMode || g.noscriptTagInScope || null != c.itemProp || "string" !== typeof e || "string" !== typeof k || "" === k) {
                a.push(T("style"));
                f = e = null;
                for(v in c)if (B.call(c, v) && (k = c[v], null != k)) switch(v){
                    case "children":
                        e = k;
                        break;
                    case "dangerouslySetInnerHTML":
                        f = k;
                        break;
                    default:
                        M(a, v, k);
                }
                a.push(P);
                c = Array.isArray(e) ? 2 > e.length ? e[0] : null : e;
                "function" !== typeof c && "symbol" !== typeof c && null !== c && void 0 !== c && a.push(C("" + c));
                Q(a, f, e);
                a.push(U, "style", V);
                a = null;
            } else {
                p = "[style]" + k;
                u = d.stylesMap.get(p);
                if (!u) {
                    (u = d.stylePrecedences.get(e)) ? u.props.hrefs.push(k) : (u = {
                        type: "style",
                        chunks: [],
                        state: 0,
                        props: {
                            precedence: e,
                            hrefs: [
                                k
                            ]
                        }
                    }, d.stylePrecedences.set(e, u), k = new Set, k.add(u), d.precedences.set(e, k));
                    d.stylesMap.set(p, u);
                    d.boundaryResources && d.boundaryResources.add(u);
                    e = u.chunks;
                    d = k = null;
                    for(n in c)if (B.call(c, n) && (p = c[n], null != p)) switch(n){
                        case "children":
                            k = p;
                            break;
                        case "dangerouslySetInnerHTML":
                            d = p;
                    }
                    c = Array.isArray(k) ? 2 > k.length ? k[0] : null : k;
                    "function" !== typeof c && "symbol" !== typeof c && null !== c && void 0 !== c && e.push(C("" + c));
                    Q(e, d, k);
                }
                f && a.push(G);
                a = void 0;
            }
            return a;
        case "meta":
            return 3 === g.insertionMode || g.noscriptTagInScope || null != c.itemProp ? a = kb(a, c, "meta") : (f && a.push(G), a = "string" === typeof c.charSet ? kb(e.charsetChunks, c, "meta") : kb(e.hoistableChunks, c, "meta")), a;
        case "listing":
        case "pre":
            a.push(T(b));
            f = e = null;
            for(var r in c)if (B.call(c, r) && (k = c[r], null != k)) switch(r){
                case "children":
                    e = k;
                    break;
                case "dangerouslySetInnerHTML":
                    f = k;
                    break;
                default:
                    M(a, r, k);
            }
            a.push(P);
            if (null != f) {
                if (null != e) throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                if ("object" !== typeof f || !("__html" in f)) throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                c = f.__html;
                null !== c && void 0 !== c && ("string" === typeof c && 0 < c.length && "\n" === c[0] ? a.push(ob, c) : a.push("" + c));
            }
            "string" === typeof e && "\n" === e[0] && a.push(ob);
            return e;
        case "base":
        case "area":
        case "br":
        case "col":
        case "embed":
        case "hr":
        case "img":
        case "keygen":
        case "param":
        case "source":
        case "track":
        case "wbr":
            return kb(a, c, b);
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
            break;
        case "head":
            return 2 > g.insertionMode && null === e.headChunks ? (e.headChunks = [], a = nb(e.headChunks, c, "head")) : a = nb(a, c, "head"), a;
        case "html":
            return 0 === g.insertionMode && null === e.htmlChunks ? (e.htmlChunks = [
                rb
            ], a = nb(e.htmlChunks, c, "html")) : a = nb(a, c, "html"), a;
        default:
            if (-1 !== b.indexOf("-")) {
                a.push(T(b));
                f = e = null;
                for(var F in c)if (B.call(c, F) && (k = c[F], null != k)) switch(F){
                    case "children":
                        e = k;
                        break;
                    case "dangerouslySetInnerHTML":
                        f = k;
                        break;
                    case "style":
                        Va(a, k);
                        break;
                    case "suppressContentEditableWarning":
                    case "suppressHydrationWarning":
                        break;
                    default:
                        oa(F) && "function" !== typeof k && "symbol" !== typeof k && a.push(I, F, J, C(k), H);
                }
                a.push(P);
                Q(a, f, e);
                return e;
            }
    }
    return nb(a, c, b);
}
var U = z("</"), V = z(">");
function tb(a, b) {
    b = b.bootstrapChunks;
    for(var c = 0; c < b.length - 1; c++)q(a, b[c]);
    return c < b.length ? (c = b[c], b.length = 0, y(a, c)) : !0;
}
var ub = z('<template id="'), vb = z('"></template>'), wb = z("<!--$-->"), xb = z('<!--$?--><template id="'), yb = z('"></template>'), zb = z("<!--$!-->"), Bb = z("<!--/$-->"), Cb = z("<template"), Db = z('"'), Eb = z(' data-dgst="');
z(' data-msg="');
z(' data-stck="');
var Fb = z("></template>");
function Gb(a, b, c) {
    q(a, xb);
    if (null === c) throw Error("An ID must have been assigned before we can complete the boundary.");
    q(a, c);
    return y(a, yb);
}
var Hb = z('<div hidden id="'), Ib = z('">'), Jb = z("</div>"), Kb = z('<svg aria-hidden="true" style="display:none" id="'), Lb = z('">'), Mb = z("</svg>"), Nb = z('<math aria-hidden="true" style="display:none" id="'), Ob = z('">'), Pb = z("</math>"), Qb = z('<table hidden id="'), Rb = z('">'), Sb = z("</table>"), Tb = z('<table hidden><tbody id="'), Ub = z('">'), Vb = z("</tbody></table>"), Wb = z('<table hidden><tr id="'), Xb = z('">'), Yb = z("</tr></table>"), Zb = z('<table hidden><colgroup id="'), $b = z('">'), ac = z("</colgroup></table>");
function bc(a, b, c, d) {
    switch(c.insertionMode){
        case 0:
        case 1:
        case 2:
            return q(a, Hb), q(a, b.segmentPrefix), q(a, d.toString(16)), y(a, Ib);
        case 3:
            return q(a, Kb), q(a, b.segmentPrefix), q(a, d.toString(16)), y(a, Lb);
        case 4:
            return q(a, Nb), q(a, b.segmentPrefix), q(a, d.toString(16)), y(a, Ob);
        case 5:
            return q(a, Qb), q(a, b.segmentPrefix), q(a, d.toString(16)), y(a, Rb);
        case 6:
            return q(a, Tb), q(a, b.segmentPrefix), q(a, d.toString(16)), y(a, Ub);
        case 7:
            return q(a, Wb), q(a, b.segmentPrefix), q(a, d.toString(16)), y(a, Xb);
        case 8:
            return q(a, Zb), q(a, b.segmentPrefix), q(a, d.toString(16)), y(a, $b);
        default:
            throw Error("Unknown insertion mode. This is a bug in React.");
    }
}
function cc(a, b) {
    switch(b.insertionMode){
        case 0:
        case 1:
        case 2:
            return y(a, Jb);
        case 3:
            return y(a, Mb);
        case 4:
            return y(a, Pb);
        case 5:
            return y(a, Sb);
        case 6:
            return y(a, Vb);
        case 7:
            return y(a, Yb);
        case 8:
            return y(a, ac);
        default:
            throw Error("Unknown insertion mode. This is a bug in React.");
    }
}
var dc = z('$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};;$RS("'), ec = z('$RS("'), fc = z('","'), gc = z('")</script>'), hc = z('<template data-rsi="" data-sid="'), ic = z('" data-pid="'), jc = z('$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};$RC("'), kc = z('$RC("'), lc = z('$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};$RR("'), mc = z('$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};$RR("'), nc = z('$RR("'), oc = z('","'), pc = z('",'), qc = z('"'), rc = z(")</script>"), sc = z('<template data-rci="" data-bid="'), tc = z('<template data-rri="" data-bid="'), uc = z('" data-sid="'), vc = z('" data-sty="'), wc = z('$RX=function(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};;$RX("'), xc = z('$RX("'), yc = z('"'), zc = z(","), Ac = z(")</script>"), Bc = z('<template data-rxi="" data-bid="'), Cc = z('" data-dgst="'), Dc = z('" data-msg="'), Ec = z('" data-stck="'), Fc = /[<\u2028\u2029]/g;
function Gc(a) {
    return JSON.stringify(a).replace(Fc, function(b) {
        switch(b){
            case "<":
                return "\\u003c";
            case "\u2028":
                return "\\u2028";
            case "\u2029":
                return "\\u2029";
            default:
                throw Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
        }
    });
}
var Jc = /[&><\u2028\u2029]/g;
function Kc(a) {
    return JSON.stringify(a).replace(Jc, function(b) {
        switch(b){
            case "&":
                return "\\u0026";
            case ">":
                return "\\u003e";
            case "<":
                return "\\u003c";
            case "\u2028":
                return "\\u2028";
            case "\u2029":
                return "\\u2029";
            default:
                throw Error("escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
        }
    });
}
var Lc = z('<style media="not all" data-precedence="'), Mc = z('" data-href="'), Nc = z('">'), Oc = z("</style>"), Pc = !1, Qc = !0;
function Rc(a) {
    if ("stylesheet" === a.type && 0 === (a.state & 1)) Pc = !0;
    else if ("style" === a.type) {
        var b = a.chunks, c = a.props.hrefs, d = 0;
        if (b.length) {
            q(this, Lc);
            q(this, C(a.props.precedence));
            if (c.length) {
                for(q(this, Mc); d < c.length - 1; d++)q(this, C(c[d])), q(this, Sc);
                q(this, C(c[d]));
            }
            q(this, Nc);
            for(d = 0; d < b.length; d++)q(this, b[d]);
            Qc = y(this, Oc);
            Pc = !0;
            b.length = 0;
            c.length = 0;
        }
    }
}
function Tc(a, b, c) {
    Pc = !1;
    Qc = !0;
    b.forEach(Rc, a);
    Pc && (c.stylesToHoist = !0);
    return Qc;
}
function Uc(a) {
    if (0 === (a.state & 7)) {
        for(var b = a.chunks, c = 0; c < b.length; c++)q(this, b[c]);
        a.state |= 1;
    }
}
function Vc(a) {
    if (0 === (a.state & 7)) {
        for(var b = a.chunks, c = 0; c < b.length; c++)q(this, b[c]);
        a.state |= 2;
    }
}
var Wc = null, Xc = !1;
function Yc(a, b, c) {
    b = a.chunks;
    if (a.state & 3) c.delete(a);
    else if ("style" === a.type) Wc = a;
    else {
        R(b, a.props);
        for(c = 0; c < b.length; c++)q(this, b[c]);
        a.state |= 1;
        Xc = !0;
    }
}
var Zc = z('<style data-precedence="'), $c = z('" data-href="'), Sc = z(" "), ad = z('">'), bd = z("</style>");
function cd(a, b) {
    Xc = !1;
    a.forEach(Yc, this);
    a.clear();
    a = Wc.chunks;
    var c = Wc.props.hrefs;
    if (!1 === Xc || a.length) {
        q(this, Zc);
        q(this, C(b));
        b = 0;
        if (c.length) {
            for(q(this, $c); b < c.length - 1; b++)q(this, C(c[b])), q(this, Sc);
            q(this, C(c[b]));
        }
        q(this, ad);
        for(b = 0; b < a.length; b++)q(this, a[b]);
        q(this, bd);
        a.length = 0;
        c.length = 0;
    }
}
function dd(a) {
    if (!(a.state & 8) && "style" !== a.type) {
        var b = a.chunks, c = a.props;
        R(b, {
            rel: "preload",
            as: "style",
            href: a.props.href,
            crossOrigin: c.crossOrigin,
            fetchPriority: c.fetchPriority,
            integrity: c.integrity,
            media: c.media,
            hrefLang: c.hrefLang,
            referrerPolicy: c.referrerPolicy
        });
        for(c = 0; c < b.length; c++)q(this, b[c]);
        a.state |= 8;
        b.length = 0;
    }
}
function ed(a) {
    a.forEach(dd, this);
    a.clear();
}
var fd = z("["), gd = z(",["), hd = z(","), id = z("]");
function jd(a, b) {
    q(a, fd);
    var c = fd;
    b.forEach(function(d) {
        if ("style" !== d.type && !(d.state & 1)) {
            if (d.state & 3) q(a, c), q(a, Kc("" + d.props.href)), q(a, id), c = gd;
            else if ("stylesheet" === d.type) {
                q(a, c);
                var e = d.props["data-precedence"], g = d.props;
                q(a, Kc("" + d.props.href));
                e = "" + e;
                q(a, hd);
                q(a, Kc(e));
                for(var f in g)if (B.call(g, f)) {
                    var m = g[f];
                    if (null != m) switch(f){
                        case "href":
                        case "rel":
                        case "precedence":
                        case "data-precedence":
                            break;
                        case "children":
                        case "dangerouslySetInnerHTML":
                            throw Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                        default:
                            a: {
                                e = a;
                                var k = f.toLowerCase();
                                switch(typeof m){
                                    case "function":
                                    case "symbol":
                                        break a;
                                }
                                switch(f){
                                    case "innerHTML":
                                    case "dangerouslySetInnerHTML":
                                    case "suppressContentEditableWarning":
                                    case "suppressHydrationWarning":
                                    case "style":
                                        break a;
                                    case "className":
                                        k = "class";
                                        m = "" + m;
                                        break;
                                    case "hidden":
                                        if (!1 === m) break a;
                                        m = "";
                                        break;
                                    case "src":
                                    case "href":
                                        m = "" + m;
                                        break;
                                    default:
                                        if (2 < f.length && ("o" === f[0] || "O" === f[0]) && ("n" === f[1] || "N" === f[1]) || !oa(f)) break a;
                                        m = "" + m;
                                }
                                q(e, hd);
                                q(e, Kc(k));
                                q(e, hd);
                                q(e, Kc(m));
                            }
                    }
                }
                q(a, id);
                c = gd;
                d.state |= 2;
            }
        }
    });
    q(a, id);
}
function kd(a, b) {
    q(a, fd);
    var c = fd;
    b.forEach(function(d) {
        if ("style" !== d.type && !(d.state & 1)) {
            if (d.state & 3) q(a, c), q(a, C(JSON.stringify("" + d.props.href))), q(a, id), c = gd;
            else if ("stylesheet" === d.type) {
                q(a, c);
                var e = d.props["data-precedence"], g = d.props;
                q(a, C(JSON.stringify("" + d.props.href)));
                e = "" + e;
                q(a, hd);
                q(a, C(JSON.stringify(e)));
                for(var f in g)if (B.call(g, f)) {
                    var m = g[f];
                    if (null != m) switch(f){
                        case "href":
                        case "rel":
                        case "precedence":
                        case "data-precedence":
                            break;
                        case "children":
                        case "dangerouslySetInnerHTML":
                            throw Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                        default:
                            a: {
                                e = a;
                                var k = f.toLowerCase();
                                switch(typeof m){
                                    case "function":
                                    case "symbol":
                                        break a;
                                }
                                switch(f){
                                    case "innerHTML":
                                    case "dangerouslySetInnerHTML":
                                    case "suppressContentEditableWarning":
                                    case "suppressHydrationWarning":
                                    case "style":
                                        break a;
                                    case "className":
                                        k = "class";
                                        m = "" + m;
                                        break;
                                    case "hidden":
                                        if (!1 === m) break a;
                                        m = "";
                                        break;
                                    case "src":
                                    case "href":
                                        m = "" + m;
                                        break;
                                    default:
                                        if (2 < f.length && ("o" === f[0] || "O" === f[0]) && ("n" === f[1] || "N" === f[1]) || !oa(f)) break a;
                                        m = "" + m;
                                }
                                q(e, hd);
                                q(e, C(JSON.stringify(k)));
                                q(e, hd);
                                q(e, C(JSON.stringify(m)));
                            }
                    }
                }
                q(a, id);
                c = gd;
                d.state |= 2;
            }
        }
    });
    q(a, id);
}
function za(a) {
    var b = ld();
    if (b) {
        var c = b.resources;
        if ("string" === typeof a && a) {
            var d = "[prefetchDNS]" + a, e = c.preconnectsMap.get(d);
            e || (e = {
                type: "preconnect",
                chunks: [],
                state: 0,
                props: null
            }, c.preconnectsMap.set(d, e), R(e.chunks, {
                href: a,
                rel: "dns-prefetch"
            }));
            c.preconnects.add(e);
            md(b);
        }
    }
}
function Aa(a, b) {
    var c = ld();
    if (c) {
        var d = c.resources;
        if ("string" === typeof a && a) {
            b = null == b || "string" !== typeof b.crossOrigin ? null : "use-credentials" === b.crossOrigin ? "use-credentials" : "";
            var e = "[preconnect][" + (null === b ? "null" : b) + "]" + a, g = d.preconnectsMap.get(e);
            g || (g = {
                type: "preconnect",
                chunks: [],
                state: 0,
                props: null
            }, d.preconnectsMap.set(e, g), R(g.chunks, {
                rel: "preconnect",
                href: a,
                crossOrigin: b
            }));
            d.preconnects.add(g);
            md(c);
        }
    }
}
function Ba(a, b) {
    var c = ld();
    if (c) {
        var d = c.resources;
        if ("string" === typeof a && a && "object" === typeof b && null !== b && "string" === typeof b.as && b.as) {
            var e = b.as;
            if ("image" === e) {
                var g = b.imageSrcSet;
                var f = b.imageSizes, m = "";
                "string" === typeof g && "" !== g ? (m += "[" + g + "]", "string" === typeof f && (m += "[" + f + "]")) : m += "[][]" + a;
                g = "[" + e + "]" + m;
            } else g = "[" + e + "]" + a;
            f = d.preloadsMap.get(g);
            f || (f = {
                type: "preload",
                chunks: [],
                state: 0,
                props: {
                    rel: "preload",
                    as: e,
                    href: "image" === e && b.imageSrcSet ? void 0 : a,
                    crossOrigin: "font" === e ? "" : b.crossOrigin,
                    integrity: b.integrity,
                    type: b.type,
                    nonce: b.nonce,
                    fetchPriority: b.fetchPriority,
                    imageSrcSet: b.imageSrcSet,
                    imageSizes: b.imageSizes
                }
            }, d.preloadsMap.set(g, f), R(f.chunks, f.props));
            switch(e){
                case "font":
                    d.fontPreloads.add(f);
                    break;
                case "style":
                    d.explicitStylesheetPreloads.add(f);
                    break;
                case "script":
                    d.explicitScriptPreloads.add(f);
                    break;
                default:
                    d.explicitOtherPreloads.add(f);
            }
            md(c);
        }
    }
}
function Ca(a, b) {
    var c = ld();
    if (c) {
        var d = c.resources;
        if ("string" === typeof a && a && "object" === typeof b && null !== b) {
            var e = b.as;
            switch(e){
                case "style":
                    var g = "[" + e + "]" + a, f = d.stylesMap.get(g);
                    e = b.precedence || "default";
                    if (!f) {
                        f = 0;
                        var m = d.preloadsMap.get(g);
                        m && m.state & 3 && (f = 8);
                        f = {
                            type: "stylesheet",
                            chunks: [],
                            state: f,
                            props: {
                                rel: "stylesheet",
                                href: a,
                                "data-precedence": e,
                                crossOrigin: b.crossOrigin,
                                integrity: b.integrity,
                                fetchPriority: b.fetchPriority
                            }
                        };
                        d.stylesMap.set(g, f);
                        a = d.precedences.get(e);
                        a || (a = new Set, d.precedences.set(e, a), b = {
                            type: "style",
                            chunks: [],
                            state: 0,
                            props: {
                                precedence: e,
                                hrefs: []
                            }
                        }, a.add(b), d.stylePrecedences.set(e, b));
                        a.add(f);
                        md(c);
                    }
                    break;
                case "script":
                    g = "[" + e + "]" + a, e = d.scriptsMap.get(g), e || (e = {
                        type: "script",
                        chunks: [],
                        state: 0,
                        props: null
                    }, d.scriptsMap.set(g, e), a = {
                        src: a,
                        async: !0,
                        crossOrigin: b.crossOrigin,
                        integrity: b.integrity,
                        nonce: b.nonce,
                        fetchPriority: b.fetchPriority
                    }, d.scripts.add(e), mb(e.chunks, a), md(c));
            }
        }
    }
}
function nd(a) {
    this.add(a);
}
var od = new ba.AsyncLocalStorage, pd = Symbol.for("react.element"), qd = Symbol.for("react.portal"), rd = Symbol.for("react.fragment"), sd = Symbol.for("react.strict_mode"), td = Symbol.for("react.profiler"), ud = Symbol.for("react.provider"), vd = Symbol.for("react.context"), wd = Symbol.for("react.server_context"), xd = Symbol.for("react.forward_ref"), yd = Symbol.for("react.suspense"), zd = Symbol.for("react.suspense_list"), Ad = Symbol.for("react.memo"), Bd = Symbol.for("react.lazy"), Cd = Symbol.for("react.scope"), Dd = Symbol.for("react.debug_trace_mode"), Ed = Symbol.for("react.offscreen"), Fd = Symbol.for("react.legacy_hidden"), Gd = Symbol.for("react.cache"), Hd = Symbol.for("react.default_value"), Id = Symbol.iterator;
function Jd(a) {
    if (null == a) return null;
    if ("function" === typeof a) return a.displayName || a.name || null;
    if ("string" === typeof a) return a;
    switch(a){
        case rd:
            return "Fragment";
        case qd:
            return "Portal";
        case td:
            return "Profiler";
        case sd:
            return "StrictMode";
        case yd:
            return "Suspense";
        case zd:
            return "SuspenseList";
        case Gd:
            return "Cache";
    }
    if ("object" === typeof a) switch(a.$$typeof){
        case vd:
            return (a.displayName || "Context") + ".Consumer";
        case ud:
            return (a._context.displayName || "Context") + ".Provider";
        case xd:
            var b = a.render;
            a = a.displayName;
            a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
            return a;
        case Ad:
            return b = a.displayName || null, null !== b ? b : Jd(a.type) || "Memo";
        case Bd:
            b = a._payload;
            a = a._init;
            try {
                return Jd(a(b));
            } catch (c) {
                break;
            }
        case wd:
            return (a.displayName || a._globalName) + ".Provider";
    }
    return null;
}
var Kd = {};
function Ld(a, b) {
    a = a.contextTypes;
    if (!a) return Kd;
    var c = {}, d;
    for(d in a)c[d] = b[d];
    return c;
}
var Md = null;
function Nd(a, b) {
    if (a !== b) {
        a.context._currentValue = a.parentValue;
        a = a.parent;
        var c = b.parent;
        if (null === a) {
            if (null !== c) throw Error("The stacks must reach the root at the same time. This is a bug in React.");
        } else {
            if (null === c) throw Error("The stacks must reach the root at the same time. This is a bug in React.");
            Nd(a, c);
        }
        b.context._currentValue = b.value;
    }
}
function Od(a) {
    a.context._currentValue = a.parentValue;
    a = a.parent;
    null !== a && Od(a);
}
function Pd(a) {
    var b = a.parent;
    null !== b && Pd(b);
    a.context._currentValue = a.value;
}
function Qd(a, b) {
    a.context._currentValue = a.parentValue;
    a = a.parent;
    if (null === a) throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
    a.depth === b.depth ? Nd(a, b) : Qd(a, b);
}
function Rd(a, b) {
    var c = b.parent;
    if (null === c) throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
    a.depth === c.depth ? Nd(a, c) : Rd(a, c);
    b.context._currentValue = b.value;
}
function Sd(a) {
    var b = Md;
    b !== a && (null === b ? Pd(a) : null === a ? Od(b) : b.depth === a.depth ? Nd(b, a) : b.depth > a.depth ? Qd(b, a) : Rd(b, a), Md = a);
}
var Td = {
    isMounted: function() {
        return !1;
    },
    enqueueSetState: function(a, b) {
        a = a._reactInternals;
        null !== a.queue && a.queue.push(b);
    },
    enqueueReplaceState: function(a, b) {
        a = a._reactInternals;
        a.replace = !0;
        a.queue = [
            b
        ];
    },
    enqueueForceUpdate: function() {}
};
function Ud(a, b, c, d) {
    var e = void 0 !== a.state ? a.state : null;
    a.updater = Td;
    a.props = c;
    a.state = e;
    var g = {
        queue: [],
        replace: !1
    };
    a._reactInternals = g;
    var f = b.contextType;
    a.context = "object" === typeof f && null !== f ? f._currentValue : d;
    f = b.getDerivedStateFromProps;
    "function" === typeof f && (f = f(c, e), e = null === f || void 0 === f ? e : A({}, e, f), a.state = e);
    if ("function" !== typeof b.getDerivedStateFromProps && "function" !== typeof a.getSnapshotBeforeUpdate && ("function" === typeof a.UNSAFE_componentWillMount || "function" === typeof a.componentWillMount)) if (b = a.state, "function" === typeof a.componentWillMount && a.componentWillMount(), "function" === typeof a.UNSAFE_componentWillMount && a.UNSAFE_componentWillMount(), b !== a.state && Td.enqueueReplaceState(a, a.state, null), null !== g.queue && 0 < g.queue.length) if (b = g.queue, f = g.replace, g.queue = null, g.replace = !1, f && 1 === b.length) a.state = b[0];
    else {
        g = f ? b[0] : a.state;
        e = !0;
        for(f = f ? 1 : 0; f < b.length; f++){
            var m = b[f];
            m = "function" === typeof m ? m.call(a, g, c, d) : m;
            null != m && (e ? (e = !1, g = A({}, g, m)) : A(g, m));
        }
        a.state = g;
    }
    else g.queue = null;
}
var Vd = {
    id: 1,
    overflow: ""
};
function Wd(a, b, c) {
    var d = a.id;
    a = a.overflow;
    var e = 32 - Xd(d) - 1;
    d &= ~(1 << e);
    c += 1;
    var g = 32 - Xd(b) + e;
    if (30 < g) {
        var f = e - e % 5;
        g = (d & (1 << f) - 1).toString(32);
        d >>= f;
        e -= f;
        return {
            id: 1 << 32 - Xd(b) + e | c << e | d,
            overflow: g + a
        };
    }
    return {
        id: 1 << g | c << e | d,
        overflow: a
    };
}
var Xd = Math.clz32 ? Math.clz32 : Yd, Zd = Math.log, $d = Math.LN2;
function Yd(a) {
    a >>>= 0;
    return 0 === a ? 32 : 31 - (Zd(a) / $d | 0) | 0;
}
var ae = Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`");
function be() {}
function ce(a, b, c) {
    c = a[c];
    void 0 === c ? a.push(b) : c !== b && (b.then(be, be), b = c);
    switch(b.status){
        case "fulfilled":
            return b.value;
        case "rejected":
            throw b.reason;
        default:
            if ("string" !== typeof b.status) switch(a = b, a.status = "pending", a.then(function(d) {
                if ("pending" === b.status) {
                    var e = b;
                    e.status = "fulfilled";
                    e.value = d;
                }
            }, function(d) {
                if ("pending" === b.status) {
                    var e = b;
                    e.status = "rejected";
                    e.reason = d;
                }
            }), b.status){
                case "fulfilled":
                    return b.value;
                case "rejected":
                    throw b.reason;
            }
            de = b;
            throw ae;
    }
}
var de = null;
function ee() {
    if (null === de) throw Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
    var a = de;
    de = null;
    return a;
}
function fe(a, b) {
    return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
}
var ge = "function" === typeof Object.is ? Object.is : fe, W = null, he = null, ie = null, X = null, je = !1, ke = !1, le = 0, me = 0, ne = null, Y = null, oe = 0;
function pe() {
    if (null === W) throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    return W;
}
function qe() {
    if (0 < oe) throw Error("Rendered more hooks than during the previous render");
    return {
        memoizedState: null,
        queue: null,
        next: null
    };
}
function re() {
    null === X ? null === ie ? (je = !1, ie = X = qe()) : (je = !0, X = ie) : null === X.next ? (je = !1, X = X.next = qe()) : (je = !0, X = X.next);
    return X;
}
function se(a, b, c, d) {
    for(; ke;)ke = !1, me = le = 0, oe += 1, X = null, c = a(b, d);
    te();
    return c;
}
function ue() {
    var a = ne;
    ne = null;
    return a;
}
function te() {
    he = W = null;
    ke = !1;
    ie = null;
    oe = 0;
    X = Y = null;
}
function ve(a, b) {
    return "function" === typeof b ? b(a) : b;
}
function we(a, b, c) {
    W = pe();
    X = re();
    if (je) {
        var d = X.queue;
        b = d.dispatch;
        if (null !== Y && (c = Y.get(d), void 0 !== c)) {
            Y.delete(d);
            d = X.memoizedState;
            do d = a(d, c.action), c = c.next;
            while (null !== c);
            X.memoizedState = d;
            return [
                d,
                b
            ];
        }
        return [
            X.memoizedState,
            b
        ];
    }
    a = a === ve ? "function" === typeof b ? b() : b : void 0 !== c ? c(b) : b;
    X.memoizedState = a;
    a = X.queue = {
        last: null,
        dispatch: null
    };
    a = a.dispatch = xe.bind(null, W, a);
    return [
        X.memoizedState,
        a
    ];
}
function ye(a, b) {
    W = pe();
    X = re();
    b = void 0 === b ? null : b;
    if (null !== X) {
        var c = X.memoizedState;
        if (null !== c && null !== b) {
            var d = c[1];
            a: if (null === d) d = !1;
            else {
                for(var e = 0; e < d.length && e < b.length; e++)if (!ge(b[e], d[e])) {
                    d = !1;
                    break a;
                }
                d = !0;
            }
            if (d) return c[0];
        }
    }
    a = a();
    X.memoizedState = [
        a,
        b
    ];
    return a;
}
function xe(a, b, c) {
    if (25 <= oe) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
    if (a === W) if (ke = !0, a = {
        action: c,
        next: null
    }, null === Y && (Y = new Map), c = Y.get(b), void 0 === c) Y.set(b, a);
    else {
        for(b = c; null !== b.next;)b = b.next;
        b.next = a;
    }
}
function ze() {
    throw Error("startTransition cannot be called during server rendering.");
}
function Ae(a) {
    var b = me;
    me += 1;
    null === ne && (ne = []);
    return ce(ne, a, b);
}
function Be() {
    throw Error("Cache cannot be refreshed during server rendering.");
}
function Ce() {}
var Ee = {
    readContext: function(a) {
        return a._currentValue;
    },
    use: function(a) {
        if (null !== a && "object" === typeof a) {
            if ("function" === typeof a.then) return Ae(a);
            if (a.$$typeof === vd || a.$$typeof === wd) return a._currentValue;
        }
        throw Error("An unsupported type was passed to use(): " + String(a));
    },
    useContext: function(a) {
        pe();
        return a._currentValue;
    },
    useMemo: ye,
    useReducer: we,
    useRef: function(a) {
        W = pe();
        X = re();
        var b = X.memoizedState;
        return null === b ? (a = {
            current: a
        }, X.memoizedState = a) : b;
    },
    useState: function(a) {
        return we(ve, a);
    },
    useInsertionEffect: Ce,
    useLayoutEffect: Ce,
    useCallback: function(a, b) {
        return ye(function() {
            return a;
        }, b);
    },
    useImperativeHandle: Ce,
    useEffect: Ce,
    useDebugValue: Ce,
    useDeferredValue: function(a) {
        pe();
        return a;
    },
    useTransition: function() {
        pe();
        return [
            !1,
            ze
        ];
    },
    useId: function() {
        var a = he.treeContext;
        var b = a.overflow;
        a = a.id;
        a = (a & ~(1 << 32 - Xd(a) - 1)).toString(32) + b;
        var c = De;
        if (null === c) throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
        b = le++;
        a = ":" + c.idPrefix + "R" + a;
        0 < b && (a += "H" + b.toString(32));
        return a + ":";
    },
    useSyncExternalStore: function(a, b, c) {
        if (void 0 === c) throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        return c();
    },
    useCacheRefresh: function() {
        return Be;
    }
}, De = null, Fe = {
    getCacheSignal: function() {
        throw Error("Not implemented.");
    },
    getCacheForType: function() {
        throw Error("Not implemented.");
    }
}, Ge = va.ReactCurrentDispatcher, He = va.ReactCurrentCache;
function Ie(a) {
    console.error(a);
    return null;
}
function Je() {}
var Ke = null;
function ld() {
    if (Ke) return Ke;
    var a = od.getStore();
    return a ? a : null;
}
function Le(a, b) {
    a.pingedTasks.push(b);
    1 === a.pingedTasks.length && (a.flushScheduled = null !== a.destination, setImmediate(function() {
        return Me(a);
    }));
}
function Ne(a, b, c, d, e, g, f, m, k) {
    a.allPendingTasks++;
    null === d ? a.pendingRootTasks++ : d.pendingTasks++;
    var n = {
        node: c,
        ping: function() {
            return Le(a, n);
        },
        blockedBoundary: d,
        blockedSegment: e,
        abortSet: g,
        legacyContext: f,
        context: m,
        treeContext: k,
        thenableState: b
    };
    g.add(n);
    return n;
}
function Oe(a, b, c, d, e, g) {
    return {
        status: 0,
        id: -1,
        index: b,
        parentFlushed: !1,
        chunks: [],
        children: [],
        formatContext: d,
        boundary: c,
        lastPushedText: e,
        textEmbedded: g
    };
}
function Pe(a, b) {
    a = a.onError(b);
    if (null != a && "string" !== typeof a) throw Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof a + '" instead');
    return a;
}
function Qe(a, b) {
    var c = a.onShellError;
    c(b);
    c = a.onFatalError;
    c(b);
    null !== a.destination ? (a.status = 2, a.destination.destroy(b)) : (a.status = 1, a.fatalError = b);
}
function Re(a, b, c, d) {
    var e = c.render(), g = d.childContextTypes;
    if (null !== g && void 0 !== g) {
        var f = b.legacyContext;
        if ("function" !== typeof c.getChildContext) d = f;
        else {
            c = c.getChildContext();
            for(var m in c)if (!(m in g)) throw Error((Jd(d) || "Unknown") + '.getChildContext(): key "' + m + '" is not defined in childContextTypes.');
            d = A({}, f, c);
        }
        b.legacyContext = d;
        Z(a, b, null, e);
        b.legacyContext = f;
    } else Z(a, b, null, e);
}
function Se(a, b) {
    if (a && a.defaultProps) {
        b = A({}, b);
        a = a.defaultProps;
        for(var c in a)void 0 === b[c] && (b[c] = a[c]);
        return b;
    }
    return b;
}
function Te(a, b, c, d, e, g) {
    if ("function" === typeof d) if (d.prototype && d.prototype.isReactComponent) c = Ld(d, b.legacyContext), g = d.contextType, g = new d(e, "object" === typeof g && null !== g ? g._currentValue : c), Ud(g, d, e, c), Re(a, b, g, d);
    else {
        g = Ld(d, b.legacyContext);
        W = {};
        he = b;
        me = le = 0;
        ne = c;
        c = d(e, g);
        c = se(d, e, c, g);
        var f = 0 !== le;
        if ("object" === typeof c && null !== c && "function" === typeof c.render && void 0 === c.$$typeof) Ud(c, d, e, g), Re(a, b, c, d);
        else if (f) {
            e = b.treeContext;
            b.treeContext = Wd(e, 1, 0);
            try {
                Z(a, b, null, c);
            } finally{
                b.treeContext = e;
            }
        } else Z(a, b, null, c);
    }
    else if ("string" === typeof d) {
        c = b.blockedSegment;
        f = sb(c.chunks, d, e, a.resources, a.responseState, c.formatContext, c.lastPushedText);
        c.lastPushedText = !1;
        g = c.formatContext;
        c.formatContext = Pa(g, d, e);
        Ue(a, b, f);
        c.formatContext = g;
        a: {
            b = c.chunks;
            switch(d){
                case "title":
                case "style":
                case "script":
                case "area":
                case "base":
                case "br":
                case "col":
                case "embed":
                case "hr":
                case "img":
                case "input":
                case "keygen":
                case "link":
                case "meta":
                case "param":
                case "source":
                case "track":
                case "wbr":
                    break a;
                case "body":
                    if (1 >= g.insertionMode) {
                        a.responseState.hasBody = !0;
                        break a;
                    }
                    break;
                case "html":
                    if (0 === g.insertionMode) break a;
            }
            b.push(U, d, V);
        }
        c.lastPushedText = !1;
    } else {
        switch(d){
            case Fd:
            case Dd:
            case sd:
            case td:
            case rd:
                Z(a, b, null, e.children);
                return;
            case Ed:
                "hidden" !== e.mode && Z(a, b, null, e.children);
                return;
            case zd:
                Z(a, b, null, e.children);
                return;
            case Cd:
                throw Error("ReactDOMServer does not yet support scope components.");
            case yd:
                a: {
                    d = b.blockedBoundary;
                    c = b.blockedSegment;
                    g = e.fallback;
                    e = e.children;
                    f = new Set;
                    var m = {
                        id: null,
                        rootSegmentID: -1,
                        parentFlushed: !1,
                        pendingTasks: 0,
                        forceClientRender: !1,
                        completedSegments: [],
                        byteSize: 0,
                        fallbackAbortableTasks: f,
                        errorDigest: null,
                        resources: new Set
                    }, k = Oe(a, c.chunks.length, m, c.formatContext, !1, !1);
                    c.children.push(k);
                    c.lastPushedText = !1;
                    var n = Oe(a, 0, null, c.formatContext, !1, !1);
                    n.parentFlushed = !0;
                    b.blockedBoundary = m;
                    b.blockedSegment = n;
                    a.resources.boundaryResources = m.resources;
                    try {
                        if (Ue(a, b, e), n.lastPushedText && n.textEmbedded && n.chunks.push(G), n.status = 1, Ve(m, n), 0 === m.pendingTasks) break a;
                    } catch (t) {
                        n.status = 4, m.forceClientRender = !0, m.errorDigest = Pe(a, t);
                    } finally{
                        a.resources.boundaryResources = d ? d.resources : null, b.blockedBoundary = d, b.blockedSegment = c;
                    }
                    b = Ne(a, null, g, d, k, f, b.legacyContext, b.context, b.treeContext);
                    a.pingedTasks.push(b);
                }
                return;
        }
        if ("object" === typeof d && null !== d) switch(d.$$typeof){
            case xd:
                d = d.render;
                W = {};
                he = b;
                me = le = 0;
                ne = c;
                c = d(e, g);
                e = se(d, e, c, g);
                if (0 !== le) {
                    d = b.treeContext;
                    b.treeContext = Wd(d, 1, 0);
                    try {
                        Z(a, b, null, e);
                    } finally{
                        b.treeContext = d;
                    }
                } else Z(a, b, null, e);
                return;
            case Ad:
                d = d.type;
                e = Se(d, e);
                Te(a, b, c, d, e, g);
                return;
            case ud:
                c = e.children;
                d = d._context;
                e = e.value;
                g = d._currentValue;
                d._currentValue = e;
                f = Md;
                Md = e = {
                    parent: f,
                    depth: null === f ? 0 : f.depth + 1,
                    context: d,
                    parentValue: g,
                    value: e
                };
                b.context = e;
                Z(a, b, null, c);
                a = Md;
                if (null === a) throw Error("Tried to pop a Context at the root of the app. This is a bug in React.");
                e = a.parentValue;
                a.context._currentValue = e === Hd ? a.context._defaultValue : e;
                a = Md = a.parent;
                b.context = a;
                return;
            case vd:
                e = e.children;
                e = e(d._currentValue);
                Z(a, b, null, e);
                return;
            case Bd:
                g = d._init;
                d = g(d._payload);
                e = Se(d, e);
                Te(a, b, c, d, e, void 0);
                return;
        }
        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((null == d ? d : typeof d) + "."));
    }
}
function Z(a, b, c, d) {
    b.node = d;
    if ("object" === typeof d && null !== d) {
        switch(d.$$typeof){
            case pd:
                Te(a, b, c, d.type, d.props, d.ref);
                return;
            case qd:
                throw Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
            case Bd:
                c = d._init;
                d = c(d._payload);
                Z(a, b, null, d);
                return;
        }
        if (ua(d)) {
            We(a, b, d);
            return;
        }
        null === d || "object" !== typeof d ? c = null : (c = Id && d[Id] || d["@@iterator"], c = "function" === typeof c ? c : null);
        if (c && (c = c.call(d))) {
            d = c.next();
            if (!d.done) {
                var e = [];
                do e.push(d.value), d = c.next();
                while (!d.done);
                We(a, b, e);
            }
            return;
        }
        if ("function" === typeof d.then) return Z(a, b, null, Ae(d));
        if (d.$$typeof === vd || d.$$typeof === wd) return Z(a, b, null, d._currentValue);
        a = Object.prototype.toString.call(d);
        throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === a ? "object with keys {" + Object.keys(d).join(", ") + "}" : a) + "). If you meant to render a collection of children, use an array instead.");
    }
    "string" === typeof d ? (c = b.blockedSegment, c.lastPushedText = Qa(b.blockedSegment.chunks, d, a.responseState, c.lastPushedText)) : "number" === typeof d && (c = b.blockedSegment, c.lastPushedText = Qa(b.blockedSegment.chunks, "" + d, a.responseState, c.lastPushedText));
}
function We(a, b, c) {
    for(var d = c.length, e = 0; e < d; e++){
        var g = b.treeContext;
        b.treeContext = Wd(g, d, e);
        try {
            Ue(a, b, c[e]);
        } finally{
            b.treeContext = g;
        }
    }
}
function Ue(a, b, c) {
    var d = b.blockedSegment, e = d.children.length, g = d.chunks.length, f = b.blockedSegment.formatContext, m = b.legacyContext, k = b.context;
    try {
        return Z(a, b, null, c);
    } catch (n) {
        if (te(), d.children.length = e, d.chunks.length = g, c = n === ae ? ee() : n, "object" === typeof c && null !== c && "function" === typeof c.then) d = ue(), e = b.blockedSegment, g = Oe(a, e.chunks.length, null, e.formatContext, e.lastPushedText, !0), e.children.push(g), e.lastPushedText = !1, a = Ne(a, d, b.node, b.blockedBoundary, g, b.abortSet, b.legacyContext, b.context, b.treeContext).ping, c.then(a, a), b.blockedSegment.formatContext = f, b.legacyContext = m, b.context = k, Sd(k);
        else throw b.blockedSegment.formatContext = f, b.legacyContext = m, b.context = k, Sd(k), c;
    }
}
function Xe(a) {
    var b = a.blockedBoundary;
    a = a.blockedSegment;
    a.status = 3;
    Ye(this, b, a);
}
function Ze(a, b, c) {
    var d = a.blockedBoundary;
    a.blockedSegment.status = 3;
    null === d ? (b.allPendingTasks--, 1 !== b.status && 2 !== b.status && (Pe(b, c), Qe(b, c))) : (d.pendingTasks--, d.forceClientRender || (d.forceClientRender = !0, d.errorDigest = b.onError(c), d.parentFlushed && b.clientRenderedBoundaries.push(d)), d.fallbackAbortableTasks.forEach(function(e) {
        return Ze(e, b, c);
    }), d.fallbackAbortableTasks.clear(), b.allPendingTasks--, 0 === b.allPendingTasks && (a = b.onAllReady, a()));
}
function Ve(a, b) {
    if (0 === b.chunks.length && 1 === b.children.length && null === b.children[0].boundary) {
        var c = b.children[0];
        c.id = b.id;
        c.parentFlushed = !0;
        1 === c.status && Ve(a, c);
    } else a.completedSegments.push(b);
}
function Ye(a, b, c) {
    if (null === b) {
        if (c.parentFlushed) {
            if (null !== a.completedRootSegment) throw Error("There can only be one root segment. This is a bug in React.");
            a.completedRootSegment = c;
        }
        a.pendingRootTasks--;
        0 === a.pendingRootTasks && (a.onShellError = Je, b = a.onShellReady, b());
    } else b.pendingTasks--, b.forceClientRender || (0 === b.pendingTasks ? (c.parentFlushed && 1 === c.status && Ve(b, c), b.parentFlushed && a.completedBoundaries.push(b), b.fallbackAbortableTasks.forEach(Xe, a), b.fallbackAbortableTasks.clear()) : c.parentFlushed && 1 === c.status && (Ve(b, c), 1 === b.completedSegments.length && b.parentFlushed && a.partialBoundaries.push(b)));
    a.allPendingTasks--;
    0 === a.allPendingTasks && (a = a.onAllReady, a());
}
function Me(a) {
    if (2 !== a.status) {
        var b = Md, c = Ge.current;
        Ge.current = Ee;
        var d = He.current;
        He.current = Fe;
        var e = Ke;
        Ke = a;
        var g = De;
        De = a.responseState;
        try {
            var f = a.pingedTasks, m;
            for(m = 0; m < f.length; m++){
                var k = f[m];
                var n = a, t = k.blockedBoundary;
                n.resources.boundaryResources = t ? t.resources : null;
                var p = k.blockedSegment;
                if (0 === p.status) {
                    Sd(k.context);
                    var x = p.children.length, u = p.chunks.length;
                    try {
                        var v = k.thenableState;
                        k.thenableState = null;
                        Z(n, k, v, k.node);
                        p.lastPushedText && p.textEmbedded && p.chunks.push(G);
                        k.abortSet.delete(k);
                        p.status = 1;
                        Ye(n, k.blockedBoundary, p);
                    } catch (L) {
                        te();
                        p.children.length = x;
                        p.chunks.length = u;
                        var D = L === ae ? ee() : L;
                        if ("object" === typeof D && null !== D && "function" === typeof D.then) {
                            var r = k.ping;
                            D.then(r, r);
                            k.thenableState = ue();
                        } else {
                            k.abortSet.delete(k);
                            p.status = 4;
                            var F = n, O = k.blockedBoundary, la = D, xa = Pe(F, la);
                            null === O ? Qe(F, la) : (O.pendingTasks--, O.forceClientRender || (O.forceClientRender = !0, O.errorDigest = xa, O.parentFlushed && F.clientRenderedBoundaries.push(O)));
                            F.allPendingTasks--;
                            if (0 === F.allPendingTasks) {
                                var S = F.onAllReady;
                                S();
                            }
                        }
                    } finally{
                        n.resources.boundaryResources = null;
                    }
                }
            }
            f.splice(0, m);
            null !== a.destination && $e(a, a.destination);
        } catch (L) {
            Pe(a, L), Qe(a, L);
        } finally{
            De = g, Ge.current = c, He.current = d, c === Ee && Sd(b), Ke = e;
        }
    }
}
function af(a, b, c) {
    c.parentFlushed = !0;
    switch(c.status){
        case 0:
            var d = c.id = a.nextSegmentId++;
            c.lastPushedText = !1;
            c.textEmbedded = !1;
            a = a.responseState;
            q(b, ub);
            q(b, a.placeholderPrefix);
            a = d.toString(16);
            q(b, a);
            return y(b, vb);
        case 1:
            c.status = 2;
            var e = !0;
            d = c.chunks;
            var g = 0;
            c = c.children;
            for(var f = 0; f < c.length; f++){
                for(e = c[f]; g < e.index; g++)q(b, d[g]);
                e = bf(a, b, e);
            }
            for(; g < d.length - 1; g++)q(b, d[g]);
            g < d.length && (e = y(b, d[g]));
            return e;
        default:
            throw Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
    }
}
function bf(a, b, c) {
    var d = c.boundary;
    if (null === d) return af(a, b, c);
    d.parentFlushed = !0;
    if (d.forceClientRender) d = d.errorDigest, y(b, zb), q(b, Cb), d && (q(b, Eb), q(b, C(d)), q(b, Db)), y(b, Fb), af(a, b, c);
    else if (0 < d.pendingTasks) {
        d.rootSegmentID = a.nextSegmentId++;
        0 < d.completedSegments.length && a.partialBoundaries.push(d);
        var e = a.responseState;
        var g = e.nextSuspenseID++;
        e = z(e.boundaryPrefix + g.toString(16));
        d = d.id = e;
        Gb(b, a.responseState, d);
        af(a, b, c);
    } else if (d.byteSize > a.progressiveChunkSize) d.rootSegmentID = a.nextSegmentId++, a.completedBoundaries.push(d), Gb(b, a.responseState, d.id), af(a, b, c);
    else {
        (c = a.resources.boundaryResources) && d.resources.forEach(nd, c);
        y(b, wb);
        c = d.completedSegments;
        if (1 !== c.length) throw Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
        bf(a, b, c[0]);
    }
    return y(b, Bb);
}
function cf(a, b, c) {
    bc(b, a.responseState, c.formatContext, c.id);
    bf(a, b, c);
    return cc(b, c.formatContext);
}
function df(a, b, c) {
    a.resources.boundaryResources = c.resources;
    for(var d = c.completedSegments, e = 0; e < d.length; e++)ef(a, b, c, d[e]);
    d.length = 0;
    Tc(b, c.resources, a.responseState);
    a = a.responseState;
    d = c.id;
    e = c.rootSegmentID;
    c = c.resources;
    var g = a.stylesToHoist;
    a.stylesToHoist = !1;
    var f = 0 === a.streamingFormat;
    f ? (q(b, a.startInlineScript), g ? 0 === (a.instructions & 2) ? (a.instructions |= 10, q(b, 2048 < lc.length ? lc.slice() : lc)) : 0 === (a.instructions & 8) ? (a.instructions |= 8, q(b, mc)) : q(b, nc) : 0 === (a.instructions & 2) ? (a.instructions |= 2, q(b, jc)) : q(b, kc)) : g ? q(b, tc) : q(b, sc);
    if (null === d) throw Error("An ID must have been assigned before we can complete the boundary.");
    e = e.toString(16);
    q(b, d);
    f ? q(b, oc) : q(b, uc);
    q(b, a.segmentPrefix);
    q(b, e);
    g ? f ? (q(b, pc), jd(b, c)) : (q(b, vc), kd(b, c)) : f && q(b, qc);
    d = f ? y(b, rc) : y(b, Ea);
    return tb(b, a) && d;
}
function ef(a, b, c, d) {
    if (2 === d.status) return !0;
    var e = d.id;
    if (-1 === e) {
        if (-1 === (d.id = c.rootSegmentID)) throw Error("A root segment ID must have been assigned by now. This is a bug in React.");
        return cf(a, b, d);
    }
    cf(a, b, d);
    a = a.responseState;
    (c = 0 === a.streamingFormat) ? (q(b, a.startInlineScript), 0 === (a.instructions & 1) ? (a.instructions |= 1, q(b, dc)) : q(b, ec)) : q(b, hc);
    q(b, a.segmentPrefix);
    e = e.toString(16);
    q(b, e);
    c ? q(b, fc) : q(b, ic);
    q(b, a.placeholderPrefix);
    q(b, e);
    b = c ? y(b, gc) : y(b, Ea);
    return b;
}
function $e(a, b) {
    h = new Uint8Array(2048);
    l = 0;
    fa = !0;
    try {
        var c, d = a.completedRootSegment;
        if (null !== d) if (0 === a.pendingRootTasks) {
            var e = a.resources, g = a.responseState;
            if (0 !== a.allPendingTasks && g.externalRuntimeScript) {
                var f = g.externalRuntimeScript, m = f.chunks, k = "[script]" + f.src, n = e.scriptsMap.get(k);
                n || (n = {
                    type: "script",
                    chunks: m,
                    state: 0,
                    props: null
                }, e.scriptsMap.set(k, n), e.scripts.add(n));
            }
            var t = g.htmlChunks, p = g.headChunks;
            f = 0;
            if (t) {
                for(f = 0; f < t.length; f++)q(b, t[f]);
                if (p) for(f = 0; f < p.length; f++)q(b, p[f]);
                else q(b, T("head")), q(b, P);
            } else if (p) for(f = 0; f < p.length; f++)q(b, p[f]);
            var x = g.charsetChunks;
            for(f = 0; f < x.length; f++)q(b, x[f]);
            x.length = 0;
            e.preconnects.forEach(Uc, b);
            e.preconnects.clear();
            var u = g.preconnectChunks;
            for(f = 0; f < u.length; f++)q(b, u[f]);
            u.length = 0;
            e.fontPreloads.forEach(Uc, b);
            e.fontPreloads.clear();
            e.precedences.forEach(cd, b);
            e.scripts.forEach(Uc, b);
            e.scripts.clear();
            e.explicitStylesheetPreloads.forEach(Uc, b);
            e.explicitStylesheetPreloads.clear();
            e.explicitScriptPreloads.forEach(Uc, b);
            e.explicitScriptPreloads.clear();
            e.explicitOtherPreloads.forEach(Uc, b);
            e.explicitOtherPreloads.clear();
            var v = g.preloadChunks;
            for(f = 0; f < v.length; f++)q(b, v[f]);
            v.length = 0;
            var D = g.hoistableChunks;
            for(f = 0; f < D.length; f++)q(b, D[f]);
            D.length = 0;
            t && null === p && (q(b, U), q(b, "head"), q(b, V));
            bf(a, b, d);
            a.completedRootSegment = null;
            tb(b, a.responseState);
        } else return;
        else if (0 < a.pendingRootTasks) return;
        var r = a.resources, F = a.responseState;
        d = 0;
        r.preconnects.forEach(Vc, b);
        r.preconnects.clear();
        var O = F.preconnectChunks;
        for(d = 0; d < O.length; d++)q(b, O[d]);
        O.length = 0;
        r.fontPreloads.forEach(Vc, b);
        r.fontPreloads.clear();
        r.precedences.forEach(ed, b);
        r.scripts.forEach(Vc, b);
        r.scripts.clear();
        r.explicitStylesheetPreloads.forEach(Vc, b);
        r.explicitStylesheetPreloads.clear();
        r.explicitScriptPreloads.forEach(Vc, b);
        r.explicitScriptPreloads.clear();
        r.explicitOtherPreloads.forEach(Vc, b);
        r.explicitOtherPreloads.clear();
        var la = F.preloadChunks;
        for(d = 0; d < la.length; d++)q(b, la[d]);
        la.length = 0;
        var xa = F.hoistableChunks;
        for(d = 0; d < xa.length; d++)q(b, xa[d]);
        xa.length = 0;
        var S = a.clientRenderedBoundaries;
        for(c = 0; c < S.length; c++){
            var L = S[c];
            r = b;
            var N = a.responseState, Hc = L.id, Ab = L.errorDigest, Wa = L.errorMessage, ya = L.errorComponentStack, ma = 0 === N.streamingFormat;
            ma ? (q(r, N.startInlineScript), 0 === (N.instructions & 4) ? (N.instructions |= 4, q(r, wc)) : q(r, xc)) : q(r, Bc);
            if (null === Hc) throw Error("An ID must have been assigned before we can complete the boundary.");
            q(r, Hc);
            ma && q(r, yc);
            if (Ab || Wa || ya) ma ? (q(r, zc), q(r, Gc(Ab || ""))) : (q(r, Cc), q(r, C(Ab || "")));
            if (Wa || ya) ma ? (q(r, zc), q(r, Gc(Wa || ""))) : (q(r, Dc), q(r, C(Wa || "")));
            ya && (ma ? (q(r, zc), q(r, Gc(ya))) : (q(r, Ec), q(r, C(ya))));
            if (ma ? !y(r, Ac) : !y(r, Ea)) {
                a.destination = null;
                c++;
                S.splice(0, c);
                return;
            }
        }
        S.splice(0, c);
        var Xa = a.completedBoundaries;
        for(c = 0; c < Xa.length; c++)if (!df(a, b, Xa[c])) {
            a.destination = null;
            c++;
            Xa.splice(0, c);
            return;
        }
        Xa.splice(0, c);
        ia(b);
        h = new Uint8Array(2048);
        l = 0;
        fa = !0;
        var Ya = a.partialBoundaries;
        for(c = 0; c < Ya.length; c++){
            var Za = Ya[c];
            a: {
                S = a;
                L = b;
                S.resources.boundaryResources = Za.resources;
                var $a = Za.completedSegments;
                for(N = 0; N < $a.length; N++)if (!ef(S, L, Za, $a[N])) {
                    N++;
                    $a.splice(0, N);
                    var Ic = !1;
                    break a;
                }
                $a.splice(0, N);
                Ic = Tc(L, Za.resources, S.responseState);
            }
            if (!Ic) {
                a.destination = null;
                c++;
                Ya.splice(0, c);
                return;
            }
        }
        Ya.splice(0, c);
        var ab = a.completedBoundaries;
        for(c = 0; c < ab.length; c++)if (!df(a, b, ab[c])) {
            a.destination = null;
            c++;
            ab.splice(0, c);
            return;
        }
        ab.splice(0, c);
    } finally{
        0 === a.allPendingTasks && 0 === a.pingedTasks.length && 0 === a.clientRenderedBoundaries.length && 0 === a.completedBoundaries.length ? (a.flushScheduled = !1, a = a.responseState, a.hasBody && (q(b, U), q(b, "body"), q(b, V)), a.htmlChunks && (q(b, U), q(b, "html"), q(b, V)), ia(b), ea(b), b.end()) : (ia(b), ea(b));
    }
}
function ff(a) {
    a.flushScheduled = null !== a.destination;
    setImmediate(function() {
        return od.run(a, Me, a);
    });
}
function md(a) {
    if (!1 === a.flushScheduled && 0 === a.pingedTasks.length && null !== a.destination) {
        var b = a.destination;
        a.flushScheduled = !0;
        setImmediate(function() {
            return $e(a, b);
        });
    }
}
function gf(a, b) {
    if (1 === a.status) a.status = 2, b.destroy(a.fatalError);
    else if (2 !== a.status && null === a.destination) {
        a.destination = b;
        try {
            $e(a, b);
        } catch (c) {
            Pe(a, c), Qe(a, c);
        }
    }
}
function hf(a, b) {
    try {
        var c = a.abortableTasks;
        if (0 < c.size) {
            var d = void 0 === b ? Error("The render was aborted by the server without a reason.") : b;
            c.forEach(function(e) {
                return Ze(e, a, d);
            });
            c.clear();
        }
        null !== a.destination && $e(a, a.destination);
    } catch (e) {
        Pe(a, e), Qe(a, e);
    }
}
function jf(a, b) {
    return function() {
        return gf(b, a);
    };
}
function kf(a, b) {
    return function() {
        return hf(a, Error(b));
    };
}
function lf(a, b) {
    var c = {
        preloadsMap: new Map,
        preconnectsMap: new Map,
        stylesMap: new Map,
        scriptsMap: new Map,
        preconnects: new Set,
        fontPreloads: new Set,
        precedences: new Map,
        stylePrecedences: new Map,
        scripts: new Set,
        explicitStylesheetPreloads: new Set,
        explicitScriptPreloads: new Set,
        explicitOtherPreloads: new Set,
        boundaryResources: null
    }, d = b ? b.identifierPrefix : void 0;
    var e = b ? b.nonce : void 0;
    var g = b ? b.bootstrapScriptContent : void 0, f = b ? b.bootstrapScripts : void 0, m = b ? b.bootstrapModules : void 0, k = b ? b.unstable_externalRuntimeSrc : void 0;
    d = void 0 === d ? "" : d;
    var n = void 0 === e ? Fa : z('<script nonce="' + C(e) + '">'), t = [], p = null, x = 0;
    void 0 !== g && t.push(n, ("" + g).replace(Na, Oa), Ga);
    void 0 !== k && (x = 1, "string" === typeof k ? (p = {
        src: k,
        chunks: []
    }, mb(p.chunks, {
        src: k,
        async: !0,
        integrity: void 0,
        nonce: e
    })) : (p = {
        src: k.src,
        chunks: []
    }, mb(p.chunks, {
        src: k.src,
        async: !0,
        integrity: k.integrity,
        nonce: e
    })));
    if (void 0 !== f) for(g = 0; g < f.length; g++){
        var u = f[g];
        k = "string" === typeof u ? u : u.src;
        var v = "string" === typeof u ? void 0 : u.integrity;
        u = "string" === typeof u || null == u.crossOrigin ? void 0 : "use-credentials" === u.crossOrigin ? "use-credentials" : "";
        var D = {
            rel: "preload",
            href: k,
            as: "script",
            nonce: e,
            integrity: v,
            crossOrigin: u
        }, r = {
            type: "preload",
            chunks: [],
            state: 0,
            props: D
        };
        c.preloadsMap.set("[script]" + k, r);
        c.explicitScriptPreloads.add(r);
        R(r.chunks, D);
        t.push(Ha, C(k));
        e && t.push(Ja, C(e));
        v && t.push(Ka, C(v));
        "string" === typeof u && t.push(La, C(u));
        t.push(Ma);
    }
    if (void 0 !== m) for(f = 0; f < m.length; f++)v = m[f], g = "string" === typeof v ? v : v.src, k = "string" === typeof v ? void 0 : v.integrity, v = "string" === typeof v || null == v.crossOrigin ? void 0 : "use-credentials" === v.crossOrigin ? "use-credentials" : "", u = {
        rel: "modulepreload",
        href: g,
        nonce: e,
        integrity: k,
        crossOrigin: v
    }, D = {
        type: "preload",
        chunks: [],
        state: 0,
        props: u
    }, c.preloadsMap.set("[script]" + g, D), c.explicitScriptPreloads.add(D), R(D.chunks, u), t.push(Ia, C(g)), e && t.push(Ja, C(e)), k && t.push(Ka, C(k)), "string" === typeof v && t.push(La, C(v)), t.push(Ma);
    e = {
        bootstrapChunks: t,
        placeholderPrefix: z(d + "P:"),
        segmentPrefix: z(d + "S:"),
        boundaryPrefix: d + "B:",
        idPrefix: d,
        nextSuspenseID: 0,
        streamingFormat: x,
        startInlineScript: n,
        instructions: 0,
        externalRuntimeScript: p,
        htmlChunks: null,
        headChunks: null,
        hasBody: !1,
        charsetChunks: [],
        preconnectChunks: [],
        preloadChunks: [],
        hoistableChunks: [],
        stylesToHoist: !1,
        nonce: e
    };
    m = b ? b.namespaceURI : void 0;
    m = E("http://www.w3.org/2000/svg" === m ? 3 : "http://www.w3.org/1998/Math/MathML" === m ? 4 : 0, null, !1);
    n = b ? b.progressiveChunkSize : void 0;
    t = b ? b.onError : void 0;
    p = b ? b.onAllReady : void 0;
    x = b ? b.onShellReady : void 0;
    f = b ? b.onShellError : void 0;
    wa.current = Da;
    b = [];
    d = new Set;
    c = {
        destination: null,
        flushScheduled: !1,
        responseState: e,
        progressiveChunkSize: void 0 === n ? 12800 : n,
        status: 0,
        fatalError: null,
        nextSegmentId: 0,
        allPendingTasks: 0,
        pendingRootTasks: 0,
        resources: c,
        completedRootSegment: null,
        abortableTasks: d,
        pingedTasks: b,
        clientRenderedBoundaries: [],
        completedBoundaries: [],
        partialBoundaries: [],
        onError: void 0 === t ? Ie : t,
        onAllReady: void 0 === p ? Je : p,
        onShellReady: void 0 === x ? Je : x,
        onShellError: void 0 === f ? Je : f,
        onFatalError: Je
    };
    e = Oe(c, 0, null, m, !1, !1);
    e.parentFlushed = !0;
    a = Ne(c, null, a, null, e, d, Kd, null, Vd);
    b.push(a);
    return c;
}
exports.renderToPipeableStream = function(a, b) {
    var c = lf(a, b), d = !1;
    ff(c);
    return {
        pipe: function(e) {
            if (d) throw Error("React currently only supports piping to one writable stream.");
            d = !0;
            gf(c, e);
            e.on("drain", jf(e, c));
            e.on("error", kf(c, "The destination stream errored while writing data."));
            e.on("close", kf(c, "The destination stream closed early."));
            return e;
        },
        abort: function(e) {
            hf(c, e);
        }
    };
};
exports.version = "18.3.0-canary-7118f5dd7-20230705";


/***/ }),

/***/ 8765:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


module.exports = __webpack_require__(9036);


/***/ }),

/***/ 9036:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var l, s;
if (true) {
    l = __webpack_require__(2619);
    s = __webpack_require__(8706);
} else {}
exports.version = l.version;
exports.renderToString = l.renderToString;
exports.renderToStaticMarkup = l.renderToStaticMarkup;
exports.renderToNodeStream = l.renderToNodeStream;
exports.renderToStaticNodeStream = l.renderToStaticNodeStream;
exports.renderToPipeableStream = s.renderToPipeableStream;


/***/ }),

/***/ 1556:
/***/ ((__unused_webpack_module, exports) => {

/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 
var l = Symbol.for("react.element"), n = Symbol.for("react.portal"), p = Symbol.for("react.fragment"), q = Symbol.for("react.strict_mode"), r = Symbol.for("react.profiler"), t = Symbol.for("react.provider"), u = Symbol.for("react.context"), v = Symbol.for("react.server_context"), w = Symbol.for("react.forward_ref"), x = Symbol.for("react.suspense"), y = Symbol.for("react.memo"), z = Symbol.for("react.lazy"), A = Symbol.for("react.default_value"), B = Symbol.iterator;
function C(a) {
    if (null === a || "object" !== typeof a) return null;
    a = B && a[B] || a["@@iterator"];
    return "function" === typeof a ? a : null;
}
var D = {
    isMounted: function() {
        return !1;
    },
    enqueueForceUpdate: function() {},
    enqueueReplaceState: function() {},
    enqueueSetState: function() {}
}, E = Object.assign, F = {};
function G(a, b, c) {
    this.props = a;
    this.context = b;
    this.refs = F;
    this.updater = c || D;
}
G.prototype.isReactComponent = {};
G.prototype.setState = function(a, b) {
    if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
    this.updater.enqueueSetState(this, a, b, "setState");
};
G.prototype.forceUpdate = function(a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};
function H() {}
H.prototype = G.prototype;
function I(a, b, c) {
    this.props = a;
    this.context = b;
    this.refs = F;
    this.updater = c || D;
}
var J = I.prototype = new H;
J.constructor = I;
E(J, G.prototype);
J.isPureReactComponent = !0;
var K = Array.isArray, L = Object.prototype.hasOwnProperty, M = {
    current: null
}, N = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
};
function O(a, b, c) {
    var d, e = {}, f = null, g = null;
    if (null != b) for(d in void 0 !== b.ref && (g = b.ref), void 0 !== b.key && (f = "" + b.key), b)L.call(b, d) && !N.hasOwnProperty(d) && (e[d] = b[d]);
    var h = arguments.length - 2;
    if (1 === h) e.children = c;
    else if (1 < h) {
        for(var k = Array(h), m = 0; m < h; m++)k[m] = arguments[m + 2];
        e.children = k;
    }
    if (a && a.defaultProps) for(d in h = a.defaultProps, h)void 0 === e[d] && (e[d] = h[d]);
    return {
        $$typeof: l,
        type: a,
        key: f,
        ref: g,
        props: e,
        _owner: M.current
    };
}
function aa(a, b) {
    return {
        $$typeof: l,
        type: a.type,
        key: b,
        ref: a.ref,
        props: a.props,
        _owner: a._owner
    };
}
function P(a) {
    return "object" === typeof a && null !== a && a.$$typeof === l;
}
function escape(a) {
    var b = {
        "=": "=0",
        ":": "=2"
    };
    return "$" + a.replace(/[=:]/g, function(c) {
        return b[c];
    });
}
var Q = /\/+/g;
function R(a, b) {
    return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
}
function S(a, b, c, d, e) {
    var f = typeof a;
    if ("undefined" === f || "boolean" === f) a = null;
    var g = !1;
    if (null === a) g = !0;
    else switch(f){
        case "string":
        case "number":
            g = !0;
            break;
        case "object":
            switch(a.$$typeof){
                case l:
                case n:
                    g = !0;
            }
    }
    if (g) return g = a, e = e(g), a = "" === d ? "." + R(g, 0) : d, K(e) ? (c = "", null != a && (c = a.replace(Q, "$&/") + "/"), S(e, b, c, "", function(m) {
        return m;
    })) : null != e && (P(e) && (e = aa(e, c + (!e.key || g && g.key === e.key ? "" : ("" + e.key).replace(Q, "$&/") + "/") + a)), b.push(e)), 1;
    g = 0;
    d = "" === d ? "." : d + ":";
    if (K(a)) for(var h = 0; h < a.length; h++){
        f = a[h];
        var k = d + R(f, h);
        g += S(f, b, c, k, e);
    }
    else if (k = C(a), "function" === typeof k) for(a = k.call(a), h = 0; !(f = a.next()).done;)f = f.value, k = d + R(f, h++), g += S(f, b, c, k, e);
    else if ("object" === f) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
    return g;
}
function T(a, b, c) {
    if (null == a) return a;
    var d = [], e = 0;
    S(a, d, "", "", function(f) {
        return b.call(c, f, e++);
    });
    return d;
}
function ba(a) {
    if (-1 === a._status) {
        var b = a._result;
        b = b();
        b.then(function(c) {
            if (0 === a._status || -1 === a._status) a._status = 1, a._result = c;
        }, function(c) {
            if (0 === a._status || -1 === a._status) a._status = 2, a._result = c;
        });
        -1 === a._status && (a._status = 0, a._result = b);
    }
    if (1 === a._status) return a._result.default;
    throw a._result;
}
var U = {
    current: null
};
function ca() {
    return new WeakMap;
}
function V() {
    return {
        s: 0,
        v: void 0,
        o: null,
        p: null
    };
}
var W = {
    current: null
}, X = {
    transition: null
}, Y = {
    ReactCurrentDispatcher: W,
    ReactCurrentCache: U,
    ReactCurrentBatchConfig: X,
    ReactCurrentOwner: M,
    ContextRegistry: {}
}, Z = Y.ContextRegistry;
exports.Children = {
    map: T,
    forEach: function(a, b, c) {
        T(a, function() {
            b.apply(this, arguments);
        }, c);
    },
    count: function(a) {
        var b = 0;
        T(a, function() {
            b++;
        });
        return b;
    },
    toArray: function(a) {
        return T(a, function(b) {
            return b;
        }) || [];
    },
    only: function(a) {
        if (!P(a)) throw Error("React.Children.only expected to receive a single React element child.");
        return a;
    }
};
exports.Component = G;
exports.Fragment = p;
exports.Profiler = r;
exports.PureComponent = I;
exports.StrictMode = q;
exports.Suspense = x;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Y;
exports.cache = function(a) {
    return function() {
        var b = U.current;
        if (!b) return a.apply(null, arguments);
        var c = b.getCacheForType(ca);
        b = c.get(a);
        void 0 === b && (b = V(), c.set(a, b));
        c = 0;
        for(var d = arguments.length; c < d; c++){
            var e = arguments[c];
            if ("function" === typeof e || "object" === typeof e && null !== e) {
                var f = b.o;
                null === f && (b.o = f = new WeakMap);
                b = f.get(e);
                void 0 === b && (b = V(), f.set(e, b));
            } else f = b.p, null === f && (b.p = f = new Map), b = f.get(e), void 0 === b && (b = V(), f.set(e, b));
        }
        if (1 === b.s) return b.v;
        if (2 === b.s) throw b.v;
        try {
            var g = a.apply(null, arguments);
            c = b;
            c.s = 1;
            return c.v = g;
        } catch (h) {
            throw g = b, g.s = 2, g.v = h, h;
        }
    };
};
exports.cloneElement = function(a, b, c) {
    if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
    var d = E({}, a.props), e = a.key, f = a.ref, g = a._owner;
    if (null != b) {
        void 0 !== b.ref && (f = b.ref, g = M.current);
        void 0 !== b.key && (e = "" + b.key);
        if (a.type && a.type.defaultProps) var h = a.type.defaultProps;
        for(k in b)L.call(b, k) && !N.hasOwnProperty(k) && (d[k] = void 0 === b[k] && void 0 !== h ? h[k] : b[k]);
    }
    var k = arguments.length - 2;
    if (1 === k) d.children = c;
    else if (1 < k) {
        h = Array(k);
        for(var m = 0; m < k; m++)h[m] = arguments[m + 2];
        d.children = h;
    }
    return {
        $$typeof: l,
        type: a.type,
        key: e,
        ref: f,
        props: d,
        _owner: g
    };
};
exports.createContext = function(a) {
    a = {
        $$typeof: u,
        _currentValue: a,
        _currentValue2: a,
        _threadCount: 0,
        Provider: null,
        Consumer: null,
        _defaultValue: null,
        _globalName: null
    };
    a.Provider = {
        $$typeof: t,
        _context: a
    };
    return a.Consumer = a;
};
exports.createElement = O;
exports.createFactory = function(a) {
    var b = O.bind(null, a);
    b.type = a;
    return b;
};
exports.createRef = function() {
    return {
        current: null
    };
};
exports.createServerContext = function(a, b) {
    var c = !0;
    if (!Z[a]) {
        c = !1;
        var d = {
            $$typeof: v,
            _currentValue: b,
            _currentValue2: b,
            _defaultValue: b,
            _threadCount: 0,
            Provider: null,
            Consumer: null,
            _globalName: a
        };
        d.Provider = {
            $$typeof: t,
            _context: d
        };
        Z[a] = d;
    }
    d = Z[a];
    if (d._defaultValue === A) d._defaultValue = b, d._currentValue === A && (d._currentValue = b), d._currentValue2 === A && (d._currentValue2 = b);
    else if (c) throw Error("ServerContext: " + a + " already defined");
    return d;
};
exports.forwardRef = function(a) {
    return {
        $$typeof: w,
        render: a
    };
};
exports.isValidElement = P;
exports.lazy = function(a) {
    return {
        $$typeof: z,
        _payload: {
            _status: -1,
            _result: a
        },
        _init: ba
    };
};
exports.memo = function(a, b) {
    return {
        $$typeof: y,
        type: a,
        compare: void 0 === b ? null : b
    };
};
exports.startTransition = function(a) {
    var b = X.transition;
    X.transition = {};
    try {
        a();
    } finally{
        X.transition = b;
    }
};
exports.unstable_act = function() {
    throw Error("act(...) is not supported in production builds of React.");
};
exports.unstable_useCacheRefresh = function() {
    return W.current.useCacheRefresh();
};
exports.use = function(a) {
    return W.current.use(a);
};
exports.useCallback = function(a, b) {
    return W.current.useCallback(a, b);
};
exports.useContext = function(a) {
    return W.current.useContext(a);
};
exports.useDebugValue = function() {};
exports.useDeferredValue = function(a) {
    return W.current.useDeferredValue(a);
};
exports.useEffect = function(a, b) {
    return W.current.useEffect(a, b);
};
exports.useId = function() {
    return W.current.useId();
};
exports.useImperativeHandle = function(a, b, c) {
    return W.current.useImperativeHandle(a, b, c);
};
exports.useInsertionEffect = function(a, b) {
    return W.current.useInsertionEffect(a, b);
};
exports.useLayoutEffect = function(a, b) {
    return W.current.useLayoutEffect(a, b);
};
exports.useMemo = function(a, b) {
    return W.current.useMemo(a, b);
};
exports.useReducer = function(a, b, c) {
    return W.current.useReducer(a, b, c);
};
exports.useRef = function(a) {
    return W.current.useRef(a);
};
exports.useState = function(a) {
    return W.current.useState(a);
};
exports.useSyncExternalStore = function(a, b, c) {
    return W.current.useSyncExternalStore(a, b, c);
};
exports.useTransition = function() {
    return W.current.useTransition();
};
exports.version = "18.3.0-canary-7118f5dd7-20230705";


/***/ }),

/***/ 9066:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


if (true) {
    module.exports = __webpack_require__(1556);
} else {}


/***/ }),

/***/ 2023:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __webpack_unused_export__;
// This file is for modularized imports for next/server to get fully-treeshaking.

__webpack_unused_export__ = ({
    value: true
});
Object.defineProperty(exports, "Z", ({
    enumerable: true,
    get: function() {
        return _response.NextResponse;
    }
}));
const _response = __webpack_require__(8438); //# sourceMappingURL=next-response.js.map


/***/ }),

/***/ 8438:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "NextResponse", ({
    enumerable: true,
    get: function() {
        return NextResponse;
    }
}));
const _nexturl = __webpack_require__(5683);
const _utils = __webpack_require__(3708);
const _cookies = __webpack_require__(2634);
const INTERNALS = Symbol("internal response");
const REDIRECTS = new Set([
    301,
    302,
    303,
    307,
    308
]);
function handleMiddlewareField(init, headers) {
    var _init_request;
    if (init == null ? void 0 : (_init_request = init.request) == null ? void 0 : _init_request.headers) {
        if (!(init.request.headers instanceof Headers)) {
            throw new Error("request.headers must be an instance of Headers");
        }
        const keys = [];
        for (const [key, value] of init.request.headers){
            headers.set("x-middleware-request-" + key, value);
            keys.push(key);
        }
        headers.set("x-middleware-override-headers", keys.join(","));
    }
}
class NextResponse extends Response {
    constructor(body, init = {}){
        super(body, init);
        this[INTERNALS] = {
            cookies: new _cookies.ResponseCookies(this.headers),
            url: init.url ? new _nexturl.NextURL(init.url, {
                headers: (0, _utils.toNodeOutgoingHttpHeaders)(this.headers),
                nextConfig: init.nextConfig
            }) : undefined
        };
    }
    [Symbol.for("edge-runtime.inspect.custom")]() {
        return {
            cookies: this.cookies,
            url: this.url,
            // rest of props come from Response
            body: this.body,
            bodyUsed: this.bodyUsed,
            headers: Object.fromEntries(this.headers),
            ok: this.ok,
            redirected: this.redirected,
            status: this.status,
            statusText: this.statusText,
            type: this.type
        };
    }
    get cookies() {
        return this[INTERNALS].cookies;
    }
    static json(body, init) {
        // @ts-expect-error This is not in lib/dom right now, and we can't augment it.
        const response = Response.json(body, init);
        return new NextResponse(response.body, response);
    }
    static redirect(url, init) {
        const status = typeof init === "number" ? init : (init == null ? void 0 : init.status) ?? 307;
        if (!REDIRECTS.has(status)) {
            throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
        }
        const initObj = typeof init === "object" ? init : {};
        const headers = new Headers(initObj == null ? void 0 : initObj.headers);
        headers.set("Location", (0, _utils.validateURL)(url));
        return new NextResponse(null, {
            ...initObj,
            headers,
            status
        });
    }
    static rewrite(destination, init) {
        const headers = new Headers(init == null ? void 0 : init.headers);
        headers.set("x-middleware-rewrite", (0, _utils.validateURL)(destination));
        handleMiddlewareField(init, headers);
        return new NextResponse(null, {
            ...init,
            headers
        });
    }
    static next(init) {
        const headers = new Headers(init == null ? void 0 : init.headers);
        headers.set("x-middleware-next", "1");
        handleMiddlewareField(init, headers);
        return new NextResponse(null, {
            ...init,
            headers
        });
    }
} //# sourceMappingURL=response.js.map


/***/ }),

/***/ 3708:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
0 && (0);
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    fromNodeOutgoingHttpHeaders: function() {
        return fromNodeOutgoingHttpHeaders;
    },
    splitCookiesString: function() {
        return splitCookiesString;
    },
    toNodeOutgoingHttpHeaders: function() {
        return toNodeOutgoingHttpHeaders;
    },
    validateURL: function() {
        return validateURL;
    }
});
function fromNodeOutgoingHttpHeaders(nodeHeaders) {
    const headers = new Headers();
    for (let [key, value] of Object.entries(nodeHeaders)){
        const values = Array.isArray(value) ? value : [
            value
        ];
        for (let v of values){
            if (typeof v === "undefined") continue;
            if (typeof v === "number") {
                v = v.toString();
            }
            headers.append(key, v);
        }
    }
    return headers;
}
function splitCookiesString(cookiesString) {
    var cookiesStrings = [];
    var pos = 0;
    var start;
    var ch;
    var lastComma;
    var nextStart;
    var cookiesSeparatorFound;
    function skipWhitespace() {
        while(pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos))){
            pos += 1;
        }
        return pos < cookiesString.length;
    }
    function notSpecialChar() {
        ch = cookiesString.charAt(pos);
        return ch !== "=" && ch !== ";" && ch !== ",";
    }
    while(pos < cookiesString.length){
        start = pos;
        cookiesSeparatorFound = false;
        while(skipWhitespace()){
            ch = cookiesString.charAt(pos);
            if (ch === ",") {
                // ',' is a cookie separator if we have later first '=', not ';' or ','
                lastComma = pos;
                pos += 1;
                skipWhitespace();
                nextStart = pos;
                while(pos < cookiesString.length && notSpecialChar()){
                    pos += 1;
                }
                // currently special character
                if (pos < cookiesString.length && cookiesString.charAt(pos) === "=") {
                    // we found cookies separator
                    cookiesSeparatorFound = true;
                    // pos is inside the next cookie, so back up and return it.
                    pos = nextStart;
                    cookiesStrings.push(cookiesString.substring(start, lastComma));
                    start = pos;
                } else {
                    // in param ',' or param separator ';',
                    // we continue from that comma
                    pos = lastComma + 1;
                }
            } else {
                pos += 1;
            }
        }
        if (!cookiesSeparatorFound || pos >= cookiesString.length) {
            cookiesStrings.push(cookiesString.substring(start, cookiesString.length));
        }
    }
    return cookiesStrings;
}
function toNodeOutgoingHttpHeaders(headers) {
    const nodeHeaders = {};
    const cookies = [];
    if (headers) {
        for (const [key, value] of headers.entries()){
            if (key.toLowerCase() === "set-cookie") {
                // We may have gotten a comma joined string of cookies, or multiple
                // set-cookie headers. We need to merge them into one header array
                // to represent all the cookies.
                cookies.push(...splitCookiesString(value));
                nodeHeaders[key] = cookies.length === 1 ? cookies[0] : cookies;
            } else {
                nodeHeaders[key] = value;
            }
        }
    }
    return nodeHeaders;
}
function validateURL(url) {
    try {
        return String(new URL(String(url)));
    } catch (error) {
        throw new Error(`URL is malformed "${String(url)}". Please use only absolute URLs - https://nextjs.org/docs/messages/middleware-relative-urls`, {
            cause: error
        });
    }
} //# sourceMappingURL=utils.js.map


/***/ }),

/***/ 7006:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * pretty <https://github.com/jonschlinkert/pretty>
 *
 * Copyright (c) 2013-2015, 2017, Jon Schlinkert.
 * Released under the MIT License.
 */ 
var beautify = __webpack_require__(8276);
var condense = __webpack_require__(3382);
var extend = __webpack_require__(4683);
var defaults = {
    unformatted: [
        "code",
        "pre",
        "em",
        "strong",
        "span"
    ],
    indent_inner_html: true,
    indent_char: " ",
    indent_size: 2,
    sep: "\n"
};
module.exports = function pretty(str, options) {
    var opts = extend({}, defaults, options);
    str = beautify.html(str, opts);
    if (opts.ocd === true) {
        if (opts.newlines) opts.sep = opts.newlines;
        return ocd(str, opts);
    }
    return str;
};
function ocd(str, options) {
    // Normalize and condense all newlines
    return condense(str, options)// Remove empty whitespace the top of a file.
    .replace(/^\s+/g, "")// Remove extra whitespace from eof
    .replace(/\s+$/g, "\n")// Add a space above each comment
    .replace(/(\s*<!--)/g, "\n$1")// Bring closing comments up to the same line as closing tag.
    .replace(/>(\s*)(?=<!--\s*\/)/g, "> ");
}


/***/ }),

/***/ 5031:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var parseUrl = (__webpack_require__(7310).parse);
var DEFAULT_PORTS = {
    ftp: 21,
    gopher: 70,
    http: 80,
    https: 443,
    ws: 80,
    wss: 443
};
var stringEndsWith = String.prototype.endsWith || function(s) {
    return s.length <= this.length && this.indexOf(s, this.length - s.length) !== -1;
};
/**
 * @param {string|object} url - The URL, or the result from url.parse.
 * @return {string} The URL of the proxy that should handle the request to the
 *  given URL. If no proxy is set, this will be an empty string.
 */ function getProxyForUrl(url) {
    var parsedUrl = typeof url === "string" ? parseUrl(url) : url || {};
    var proto = parsedUrl.protocol;
    var hostname = parsedUrl.host;
    var port = parsedUrl.port;
    if (typeof hostname !== "string" || !hostname || typeof proto !== "string") {
        return ""; // Don't proxy URLs without a valid scheme or host.
    }
    proto = proto.split(":", 1)[0];
    // Stripping ports in this way instead of using parsedUrl.hostname to make
    // sure that the brackets around IPv6 addresses are kept.
    hostname = hostname.replace(/:\d*$/, "");
    port = parseInt(port) || DEFAULT_PORTS[proto] || 0;
    if (!shouldProxy(hostname, port)) {
        return ""; // Don't proxy URLs that match NO_PROXY.
    }
    var proxy = getEnv("npm_config_" + proto + "_proxy") || getEnv(proto + "_proxy") || getEnv("npm_config_proxy") || getEnv("all_proxy");
    if (proxy && proxy.indexOf("://") === -1) {
        // Missing scheme in proxy, default to the requested URL's scheme.
        proxy = proto + "://" + proxy;
    }
    return proxy;
}
/**
 * Determines whether a given URL should be proxied.
 *
 * @param {string} hostname - The host name of the URL.
 * @param {number} port - The effective port of the URL.
 * @returns {boolean} Whether the given URL should be proxied.
 * @private
 */ function shouldProxy(hostname, port) {
    var NO_PROXY = (getEnv("npm_config_no_proxy") || getEnv("no_proxy")).toLowerCase();
    if (!NO_PROXY) {
        return true; // Always proxy if NO_PROXY is not set.
    }
    if (NO_PROXY === "*") {
        return false; // Never proxy if wildcard is set.
    }
    return NO_PROXY.split(/[,\s]/).every(function(proxy) {
        if (!proxy) {
            return true; // Skip zero-length hosts.
        }
        var parsedProxy = proxy.match(/^(.+):(\d+)$/);
        var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
        var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
        if (parsedProxyPort && parsedProxyPort !== port) {
            return true; // Skip if ports don't match.
        }
        if (!/^[.*]/.test(parsedProxyHostname)) {
            // No wildcards, so stop proxying if there is an exact match.
            return hostname !== parsedProxyHostname;
        }
        if (parsedProxyHostname.charAt(0) === "*") {
            // Remove leading wildcard.
            parsedProxyHostname = parsedProxyHostname.slice(1);
        }
        // Stop proxying if the hostname ends with the no_proxy host.
        return !stringEndsWith.call(hostname, parsedProxyHostname);
    });
}
/**
 * Get the value for an environment variable.
 *
 * @param {string} key - The name of the environment variable.
 * @return {string} The value of the environment variable.
 * @private
 */ function getEnv(key) {
    return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || "";
}
exports.getProxyForUrl = getProxyForUrl;


/***/ }),

/***/ 1223:
/***/ ((__unused_webpack_module, exports) => {


var __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.ApiKeys = void 0;
class ApiKeys {
    constructor(resend){
        this.resend = resend;
    }
    create(payload, options = {}) {
        return __awaiter(this, void 0, void 0, function*() {
            const data = yield this.resend.post("/api-keys", payload, options);
            return data;
        });
    }
    list() {
        return __awaiter(this, void 0, void 0, function*() {
            const { data } = yield this.resend.get("/api-keys");
            return data;
        });
    }
    remove(id) {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.resend.delete(`/api-keys/${id}`);
        });
    }
}
exports.ApiKeys = ApiKeys;


/***/ }),

/***/ 9361:
/***/ ((__unused_webpack_module, exports) => {


var __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Domains = void 0;
class Domains {
    constructor(resend){
        this.resend = resend;
    }
    create(payload, options = {}) {
        return __awaiter(this, void 0, void 0, function*() {
            const data = yield this.resend.post("/domains", payload, options);
            return data;
        });
    }
    list() {
        return __awaiter(this, void 0, void 0, function*() {
            const { data } = yield this.resend.get("/domains");
            return data;
        });
    }
    get(id) {
        return __awaiter(this, void 0, void 0, function*() {
            const data = yield this.resend.get(`/domains/${id}`);
            return data;
        });
    }
    remove(id) {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.resend.delete(`/domains/${id}`);
        });
    }
    verify(id) {
        return __awaiter(this, void 0, void 0, function*() {
            yield this.resend.post(`/domains/${id}/verify`);
        });
    }
}
exports.Domains = Domains;


/***/ }),

/***/ 9093:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Emails = void 0;
const render_1 = __webpack_require__(5120);
class Emails {
    constructor(resend){
        this.resend = resend;
    }
    send(payload, options = {}) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.create(payload, options);
        });
    }
    create(payload, options = {}) {
        return __awaiter(this, void 0, void 0, function*() {
            if (payload.react) {
                payload.html = (0, render_1.render)(payload.react);
                delete payload.react;
            }
            const data = yield this.resend.post("/emails", payload, options);
            return data;
        });
    }
    get(id) {
        return __awaiter(this, void 0, void 0, function*() {
            const data = yield this.resend.get(`/emails/${id}`);
            return data;
        });
    }
}
exports.Emails = Emails;


/***/ }),

/***/ 3612:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __webpack_unused_export__;

__webpack_unused_export__ = ({
    value: true
});
exports.R = void 0;
var resend_1 = __webpack_require__(9508);
Object.defineProperty(exports, "R", ({
    enumerable: true,
    get: function() {
        return resend_1.Resend;
    }
}));


/***/ }),

/***/ 9508:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (void 0) && (void 0).__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
exports.Resend = void 0;
const axios_1 = __importDefault(__webpack_require__(9664));
const render_1 = __webpack_require__(5120);
const package_json_1 = __webpack_require__(6854);
const api_keys_1 = __webpack_require__(1223);
const domains_1 = __webpack_require__(9361);
const emails_1 = __webpack_require__(9093);
class Resend {
    constructor(key){
        this.key = key;
        this.apiKeys = new api_keys_1.ApiKeys(this);
        this.domains = new domains_1.Domains(this);
        this.emails = new emails_1.Emails(this);
        if (!key) {
            this.key = process.env.RESEND_API_KEY;
            if (!this.key) {
                throw new Error('Missing API key. Pass it to the constructor `new Resend("re_123")`');
            }
        }
        this.baseUrl = process.env.RESEND_BASE_URL || "https://api.resend.com";
        this.headers = {
            Authorization: `Bearer ${this.key}`,
            "User-Agent": `node:${package_json_1.version}`,
            "Content-Type": "application/json"
        };
        this.request = axios_1.default.create({
            baseURL: this.baseUrl,
            headers: this.headers,
            maxContentLength: Infinity,
            maxBodyLength: Infinity
        });
        this.request.interceptors.response.use((response)=>{
            if (response.data) {
                return response.data;
            }
            return response;
        }, (error)=>{
            var _a, _b, _c;
            if ((_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) {
                return Promise.reject(error.response.data.error);
            }
            if ((_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.data) {
                return Promise.reject(error.response.data);
            }
            return Promise.reject(error);
        });
    }
    post(path, entity, options) {
        return __awaiter(this, void 0, void 0, function*() {
            const requestHeaders = {};
            try {
                return yield this.request.post(path, entity, {
                    params: options === null || options === void 0 ? void 0 : options.query,
                    headers: requestHeaders
                });
            } catch (error) {
                throw error;
            }
        });
    }
    get(path, options = {}) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                return yield this.request.get(path, {
                    params: options.query
                });
            } catch (error) {
                throw error;
            }
        });
    }
    put(path, entity, options = {}) {
        return __awaiter(this, void 0, void 0, function*() {
            const requestHeaders = {};
            try {
                return yield this.request.put(path, entity, {
                    params: options.query,
                    headers: requestHeaders
                });
            } catch (error) {
                throw error;
            }
        });
    }
    delete(path, query) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                return yield this.request.delete(path, {
                    params: query
                });
            } catch (error) {
                throw error;
            }
        });
    }
    sendEmail(data) {
        return __awaiter(this, void 0, void 0, function*() {
            try {
                const path = `${this.baseUrl}/email`;
                if (data.react) {
                    data.html = (0, render_1.render)(data.react);
                    delete data.react;
                }
                const response = yield this.post(path, {
                    from: data.from,
                    to: data.to,
                    bcc: data.bcc,
                    cc: data.cc,
                    reply_to: data.reply_to,
                    subject: data.subject,
                    text: data.text,
                    html: data.html,
                    attachments: data.attachments,
                    tags: data.tags
                });
                return response;
            } catch (error) {
                throw error;
            }
        });
    }
}
exports.Resend = Resend;


/***/ }),

/***/ 1416:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


const os = __webpack_require__(2037);
const tty = __webpack_require__(6224);
const hasFlag = __webpack_require__(2773);
const { env } = process;
let forceColor;
if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
    forceColor = 0;
} else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
    forceColor = 1;
}
if ("FORCE_COLOR" in env) {
    if (env.FORCE_COLOR === "true") {
        forceColor = 1;
    } else if (env.FORCE_COLOR === "false") {
        forceColor = 0;
    } else {
        forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
    }
}
function translateLevel(level) {
    if (level === 0) {
        return false;
    }
    return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
    };
}
function supportsColor(haveStream, streamIsTTY) {
    if (forceColor === 0) {
        return 0;
    }
    if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
    }
    if (hasFlag("color=256")) {
        return 2;
    }
    if (haveStream && !streamIsTTY && forceColor === undefined) {
        return 0;
    }
    const min = forceColor || 0;
    if (env.TERM === "dumb") {
        return min;
    }
    if (process.platform === "win32") {
        // Windows 10 build 10586 is the first Windows release that supports 256 colors.
        // Windows 10 build 14931 is the first release that supports 16m/TrueColor.
        const osRelease = os.release().split(".");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
            return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
    }
    if ("CI" in env) {
        if ([
            "TRAVIS",
            "CIRCLECI",
            "APPVEYOR",
            "GITLAB_CI",
            "GITHUB_ACTIONS",
            "BUILDKITE"
        ].some((sign)=>sign in env) || env.CI_NAME === "codeship") {
            return 1;
        }
        return min;
    }
    if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    }
    if (env.COLORTERM === "truecolor") {
        return 3;
    }
    if ("TERM_PROGRAM" in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch(env.TERM_PROGRAM){
            case "iTerm.app":
                return version >= 3 ? 3 : 2;
            case "Apple_Terminal":
                return 2;
        }
    }
    if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
    }
    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
    }
    if ("COLORTERM" in env) {
        return 1;
    }
    return min;
}
function getSupportLevel(stream) {
    const level = supportsColor(stream, stream && stream.isTTY);
    return translateLevel(level);
}
module.exports = {
    supportsColor: getSupportLevel,
    stdout: translateLevel(supportsColor(true, tty.isatty(1))),
    stderr: translateLevel(supportsColor(true, tty.isatty(2)))
};


/***/ }),

/***/ 6580:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var domhandler = __webpack_require__(3673);
var selderee = __webpack_require__(8273);
function hp2Builder(nodes) {
    return new selderee.Picker(handleArray(nodes));
}
function handleArray(nodes) {
    const matchers = nodes.map(handleNode);
    return (el, ...tail)=>matchers.flatMap((m)=>m(el, ...tail));
}
function handleNode(node) {
    switch(node.type){
        case "terminal":
            {
                const result = [
                    node.valueContainer
                ];
                return (el, ...tail)=>result;
            }
        case "tagName":
            return handleTagName(node);
        case "attrValue":
            return handleAttrValueName(node);
        case "attrPresence":
            return handleAttrPresenceName(node);
        case "pushElement":
            return handlePushElementNode(node);
        case "popElement":
            return handlePopElementNode(node);
    }
}
function handleTagName(node) {
    const variants = {};
    for (const variant of node.variants){
        variants[variant.value] = handleArray(variant.cont);
    }
    return (el, ...tail)=>{
        const continuation = variants[el.name];
        return continuation ? continuation(el, ...tail) : [];
    };
}
function handleAttrPresenceName(node) {
    const attrName = node.name;
    const continuation = handleArray(node.cont);
    return (el, ...tail)=>Object.prototype.hasOwnProperty.call(el.attribs, attrName) ? continuation(el, ...tail) : [];
}
function handleAttrValueName(node) {
    const callbacks = [];
    for (const matcher of node.matchers){
        const predicate = matcher.predicate;
        const continuation = handleArray(matcher.cont);
        callbacks.push((attr, el, ...tail)=>predicate(attr) ? continuation(el, ...tail) : []);
    }
    const attrName = node.name;
    return (el, ...tail)=>{
        const attr = el.attribs[attrName];
        return attr || attr === "" ? callbacks.flatMap((cb)=>cb(attr, el, ...tail)) : [];
    };
}
function handlePushElementNode(node) {
    const continuation = handleArray(node.cont);
    const leftElementGetter = node.combinator === "+" ? getPrecedingElement : getParentElement;
    return (el, ...tail)=>{
        const next = leftElementGetter(el);
        if (next === null) {
            return [];
        }
        return continuation(next, el, ...tail);
    };
}
const getPrecedingElement = (el)=>{
    const prev = el.prev;
    if (prev === null) {
        return null;
    }
    return domhandler.isTag(prev) ? prev : getPrecedingElement(prev);
};
const getParentElement = (el)=>{
    const parent = el.parent;
    return parent && domhandler.isTag(parent) ? parent : null;
};
function handlePopElementNode(node) {
    const continuation = handleArray(node.cont);
    return (el, next, ...tail)=>continuation(next, ...tail);
}
exports.hp2Builder = hp2Builder;


/***/ }),

/***/ 9664:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Axios v1.4.0 Copyright (c) 2023 Matt Zabriskie and contributors

const FormData$1 = __webpack_require__(1549);
const url = __webpack_require__(7310);
const proxyFromEnv = __webpack_require__(5031);
const http = __webpack_require__(3685);
const https = __webpack_require__(5687);
const util = __webpack_require__(3837);
const followRedirects = __webpack_require__(1191);
const zlib = __webpack_require__(9796);
const stream = __webpack_require__(2781);
const EventEmitter = __webpack_require__(2361);
function _interopDefaultLegacy(e) {
    return e && typeof e === "object" && "default" in e ? e : {
        "default": e
    };
}
const FormData__default = /*#__PURE__*/ _interopDefaultLegacy(FormData$1);
const url__default = /*#__PURE__*/ _interopDefaultLegacy(url);
const http__default = /*#__PURE__*/ _interopDefaultLegacy(http);
const https__default = /*#__PURE__*/ _interopDefaultLegacy(https);
const util__default = /*#__PURE__*/ _interopDefaultLegacy(util);
const followRedirects__default = /*#__PURE__*/ _interopDefaultLegacy(followRedirects);
const zlib__default = /*#__PURE__*/ _interopDefaultLegacy(zlib);
const stream__default = /*#__PURE__*/ _interopDefaultLegacy(stream);
const EventEmitter__default = /*#__PURE__*/ _interopDefaultLegacy(EventEmitter);
function bind(fn, thisArg) {
    return function wrap() {
        return fn.apply(thisArg, arguments);
    };
}
// utils is a library of generic helper functions non-specific to axios
const { toString } = Object.prototype;
const { getPrototypeOf } = Object;
const kindOf = ((cache)=>(thing)=>{
        const str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(Object.create(null));
const kindOfTest = (type)=>{
    type = type.toLowerCase();
    return (thing)=>kindOf(thing) === type;
};
const typeOfTest = (type)=>(thing)=>typeof thing === type;
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */ const { isArray } = Array;
/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */ const isUndefined = typeOfTest("undefined");
/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */ function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */ const isArrayBuffer = kindOfTest("ArrayBuffer");
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */ function isArrayBufferView(val) {
    let result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
    } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
    }
    return result;
}
/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */ const isString = typeOfTest("string");
/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */ const isFunction = typeOfTest("function");
/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */ const isNumber = typeOfTest("number");
/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */ const isObject = (thing)=>thing !== null && typeof thing === "object";
/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */ const isBoolean = (thing)=>thing === true || thing === false;
/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */ const isPlainObject = (val)=>{
    if (kindOf(val) !== "object") {
        return false;
    }
    const prototype = getPrototypeOf(val);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */ const isDate = kindOfTest("Date");
/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */ const isFile = kindOfTest("File");
/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */ const isBlob = kindOfTest("Blob");
/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */ const isFileList = kindOfTest("FileList");
/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */ const isStream = (val)=>isObject(val) && isFunction(val.pipe);
/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */ const isFormData = (thing)=>{
    let kind;
    return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
    kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
};
/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */ const isURLSearchParams = kindOfTest("URLSearchParams");
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */ const trim = (str)=>str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */ function forEach(obj, fn, { allOwnKeys = false } = {}) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === "undefined") {
        return;
    }
    let i;
    let l;
    // Force an array if not already something iterable
    if (typeof obj !== "object") {
        /*eslint no-param-reassign:0*/ obj = [
            obj
        ];
    }
    if (isArray(obj)) {
        // Iterate over array values
        for(i = 0, l = obj.length; i < l; i++){
            fn.call(null, obj[i], i, obj);
        }
    } else {
        // Iterate over object keys
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for(i = 0; i < len; i++){
            key = keys[i];
            fn.call(null, obj[key], key, obj);
        }
    }
}
function findKey(obj, key) {
    key = key.toLowerCase();
    const keys = Object.keys(obj);
    let i = keys.length;
    let _key;
    while(i-- > 0){
        _key = keys[i];
        if (key === _key.toLowerCase()) {
            return _key;
        }
    }
    return null;
}
const _global = (()=>{
    /*eslint no-undef:0*/ if (typeof globalThis !== "undefined") return globalThis;
    return typeof self !== "undefined" ? self :  false ? 0 : global;
})();
const isContextDefined = (context)=>!isUndefined(context) && context !== _global;
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */ function merge() {
    const { caseless } = isContextDefined(this) && this || {};
    const result = {};
    const assignValue = (val, key)=>{
        const targetKey = caseless && findKey(result, key) || key;
        if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
            result[targetKey] = merge(result[targetKey], val);
        } else if (isPlainObject(val)) {
            result[targetKey] = merge({}, val);
        } else if (isArray(val)) {
            result[targetKey] = val.slice();
        } else {
            result[targetKey] = val;
        }
    };
    for(let i = 0, l = arguments.length; i < l; i++){
        arguments[i] && forEach(arguments[i], assignValue);
    }
    return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */ const extend = (a, b, thisArg, { allOwnKeys } = {})=>{
    forEach(b, (val, key)=>{
        if (thisArg && isFunction(val)) {
            a[key] = bind(val, thisArg);
        } else {
            a[key] = val;
        }
    }, {
        allOwnKeys
    });
    return a;
};
/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */ const stripBOM = (content)=>{
    if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
    }
    return content;
};
/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */ const inherits = (constructor, superConstructor, props, descriptors)=>{
    constructor.prototype = Object.create(superConstructor.prototype, descriptors);
    constructor.prototype.constructor = constructor;
    Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
    });
    props && Object.assign(constructor.prototype, props);
};
/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */ const toFlatObject = (sourceObj, destObj, filter, propFilter)=>{
    let props;
    let i;
    let prop;
    const merged = {};
    destObj = destObj || {};
    // eslint-disable-next-line no-eq-null,eqeqeq
    if (sourceObj == null) return destObj;
    do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while(i-- > 0){
            prop = props[i];
            if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
                destObj[prop] = sourceObj[prop];
                merged[prop] = true;
            }
        }
        sourceObj = filter !== false && getPrototypeOf(sourceObj);
    }while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
    return destObj;
};
/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */ const endsWith = (str, searchString, position)=>{
    str = String(str);
    if (position === undefined || position > str.length) {
        position = str.length;
    }
    position -= searchString.length;
    const lastIndex = str.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
};
/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */ const toArray = (thing)=>{
    if (!thing) return null;
    if (isArray(thing)) return thing;
    let i = thing.length;
    if (!isNumber(i)) return null;
    const arr = new Array(i);
    while(i-- > 0){
        arr[i] = thing[i];
    }
    return arr;
};
/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */ // eslint-disable-next-line func-names
const isTypedArray = ((TypedArray)=>{
    // eslint-disable-next-line func-names
    return (thing)=>{
        return TypedArray && thing instanceof TypedArray;
    };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */ const forEachEntry = (obj, fn)=>{
    const generator = obj && obj[Symbol.iterator];
    const iterator = generator.call(obj);
    let result;
    while((result = iterator.next()) && !result.done){
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
    }
};
/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */ const matchAll = (regExp, str)=>{
    let matches;
    const arr = [];
    while((matches = regExp.exec(str)) !== null){
        arr.push(matches);
    }
    return arr;
};
/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */ const isHTMLForm = kindOfTest("HTMLFormElement");
const toCamelCase = (str)=>{
    return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g, function replacer(m, p1, p2) {
        return p1.toUpperCase() + p2;
    });
};
/* Creating a function that will check if an object has a property. */ const hasOwnProperty = (({ hasOwnProperty })=>(obj, prop)=>hasOwnProperty.call(obj, prop))(Object.prototype);
/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */ const isRegExp = kindOfTest("RegExp");
const reduceDescriptors = (obj, reducer)=>{
    const descriptors = Object.getOwnPropertyDescriptors(obj);
    const reducedDescriptors = {};
    forEach(descriptors, (descriptor, name)=>{
        if (reducer(descriptor, name, obj) !== false) {
            reducedDescriptors[name] = descriptor;
        }
    });
    Object.defineProperties(obj, reducedDescriptors);
};
/**
 * Makes all methods read-only
 * @param {Object} obj
 */ const freezeMethods = (obj)=>{
    reduceDescriptors(obj, (descriptor, name)=>{
        // skip restricted props in strict mode
        if (isFunction(obj) && [
            "arguments",
            "caller",
            "callee"
        ].indexOf(name) !== -1) {
            return false;
        }
        const value = obj[name];
        if (!isFunction(value)) return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
            descriptor.writable = false;
            return;
        }
        if (!descriptor.set) {
            descriptor.set = ()=>{
                throw Error("Can not rewrite read-only method '" + name + "'");
            };
        }
    });
};
const toObjectSet = (arrayOrString, delimiter)=>{
    const obj = {};
    const define = (arr)=>{
        arr.forEach((value)=>{
            obj[value] = true;
        });
    };
    isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
    return obj;
};
const noop = ()=>{};
const toFiniteNumber = (value, defaultValue)=>{
    value = +value;
    return Number.isFinite(value) ? value : defaultValue;
};
const ALPHA = "abcdefghijklmnopqrstuvwxyz";
const DIGIT = "0123456789";
const ALPHABET = {
    DIGIT,
    ALPHA,
    ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT)=>{
    let str = "";
    const { length } = alphabet;
    while(size--){
        str += alphabet[Math.random() * length | 0];
    }
    return str;
};
/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */ function isSpecCompliantForm(thing) {
    return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
}
const toJSONObject = (obj)=>{
    const stack = new Array(10);
    const visit = (source, i)=>{
        if (isObject(source)) {
            if (stack.indexOf(source) >= 0) {
                return;
            }
            if (!("toJSON" in source)) {
                stack[i] = source;
                const target = isArray(source) ? [] : {};
                forEach(source, (value, key)=>{
                    const reducedValue = visit(value, i + 1);
                    !isUndefined(reducedValue) && (target[key] = reducedValue);
                });
                stack[i] = undefined;
                return target;
            }
        }
        return source;
    };
    return visit(obj, 0);
};
const isAsyncFn = kindOfTest("AsyncFunction");
const isThenable = (thing)=>thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
const utils = {
    isArray,
    isArrayBuffer,
    isBuffer,
    isFormData,
    isArrayBufferView,
    isString,
    isNumber,
    isBoolean,
    isObject,
    isPlainObject,
    isUndefined,
    isDate,
    isFile,
    isBlob,
    isRegExp,
    isFunction,
    isStream,
    isURLSearchParams,
    isTypedArray,
    isFileList,
    forEach,
    merge,
    extend,
    trim,
    stripBOM,
    inherits,
    toFlatObject,
    kindOf,
    kindOfTest,
    endsWith,
    toArray,
    forEachEntry,
    matchAll,
    isHTMLForm,
    hasOwnProperty,
    hasOwnProp: hasOwnProperty,
    reduceDescriptors,
    freezeMethods,
    toObjectSet,
    toCamelCase,
    noop,
    toFiniteNumber,
    findKey,
    global: _global,
    isContextDefined,
    ALPHABET,
    generateString,
    isSpecCompliantForm,
    toJSONObject,
    isAsyncFn,
    isThenable
};
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */ function AxiosError(message, code, config, request, response) {
    Error.call(this);
    if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
    } else {
        this.stack = new Error().stack;
    }
    this.message = message;
    this.name = "AxiosError";
    code && (this.code = code);
    config && (this.config = config);
    request && (this.request = request);
    response && (this.response = response);
}
utils.inherits(AxiosError, Error, {
    toJSON: function toJSON() {
        return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: utils.toJSONObject(this.config),
            code: this.code,
            status: this.response && this.response.status ? this.response.status : null
        };
    }
});
const prototype$1 = AxiosError.prototype;
const descriptors = {};
[
    "ERR_BAD_OPTION_VALUE",
    "ERR_BAD_OPTION",
    "ECONNABORTED",
    "ETIMEDOUT",
    "ERR_NETWORK",
    "ERR_FR_TOO_MANY_REDIRECTS",
    "ERR_DEPRECATED",
    "ERR_BAD_RESPONSE",
    "ERR_BAD_REQUEST",
    "ERR_CANCELED",
    "ERR_NOT_SUPPORT",
    "ERR_INVALID_URL"
].forEach((code)=>{
    descriptors[code] = {
        value: code
    };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype$1, "isAxiosError", {
    value: true
});
// eslint-disable-next-line func-names
AxiosError.from = (error, code, config, request, response, customProps)=>{
    const axiosError = Object.create(prototype$1);
    utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
    }, (prop)=>{
        return prop !== "isAxiosError";
    });
    AxiosError.call(axiosError, error.message, code, config, request, response);
    axiosError.cause = error;
    axiosError.name = error.name;
    customProps && Object.assign(axiosError, customProps);
    return axiosError;
};
/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */ function isVisitable(thing) {
    return utils.isPlainObject(thing) || utils.isArray(thing);
}
/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */ function removeBrackets(key) {
    return utils.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */ function renderKey(path, key, dots) {
    if (!path) return key;
    return path.concat(key).map(function each(token, i) {
        // eslint-disable-next-line no-param-reassign
        token = removeBrackets(token);
        return !dots && i ? "[" + token + "]" : token;
    }).join(dots ? "." : "");
}
/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */ function isFlatArray(arr) {
    return utils.isArray(arr) && !arr.some(isVisitable);
}
const predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {
    return /^is[A-Z]/.test(prop);
});
/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/ /**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */ function toFormData(obj, formData, options) {
    if (!utils.isObject(obj)) {
        throw new TypeError("target must be an object");
    }
    // eslint-disable-next-line no-param-reassign
    formData = formData || new (FormData__default["default"] || FormData)();
    // eslint-disable-next-line no-param-reassign
    options = utils.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
    }, false, function defined(option, source) {
        // eslint-disable-next-line no-eq-null,eqeqeq
        return !utils.isUndefined(source[option]);
    });
    const metaTokens = options.metaTokens;
    // eslint-disable-next-line no-use-before-define
    const visitor = options.visitor || defaultVisitor;
    const dots = options.dots;
    const indexes = options.indexes;
    const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
    const useBlob = _Blob && utils.isSpecCompliantForm(formData);
    if (!utils.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
    }
    function convertValue(value) {
        if (value === null) return "";
        if (utils.isDate(value)) {
            return value.toISOString();
        }
        if (!useBlob && utils.isBlob(value)) {
            throw new AxiosError("Blob is not supported. Use a Buffer instead.");
        }
        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
            return useBlob && typeof Blob === "function" ? new Blob([
                value
            ]) : Buffer.from(value);
        }
        return value;
    }
    /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */ function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
            if (utils.endsWith(key, "{}")) {
                // eslint-disable-next-line no-param-reassign
                key = metaTokens ? key : key.slice(0, -2);
                // eslint-disable-next-line no-param-reassign
                value = JSON.stringify(value);
            } else if (utils.isArray(value) && isFlatArray(value) || (utils.isFileList(value) || utils.endsWith(key, "[]")) && (arr = utils.toArray(value))) {
                // eslint-disable-next-line no-param-reassign
                key = removeBrackets(key);
                arr.forEach(function each(el, index) {
                    !(utils.isUndefined(el) || el === null) && formData.append(// eslint-disable-next-line no-nested-ternary
                    indexes === true ? renderKey([
                        key
                    ], index, dots) : indexes === null ? key : key + "[]", convertValue(el));
                });
                return false;
            }
        }
        if (isVisitable(value)) {
            return true;
        }
        formData.append(renderKey(path, key, dots), convertValue(value));
        return false;
    }
    const stack = [];
    const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
    });
    function build(value, path) {
        if (utils.isUndefined(value)) return;
        if (stack.indexOf(value) !== -1) {
            throw Error("Circular reference detected in " + path.join("."));
        }
        stack.push(value);
        utils.forEach(value, function each(el, key) {
            const result = !(utils.isUndefined(el) || el === null) && visitor.call(formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers);
            if (result === true) {
                build(el, path ? path.concat(key) : [
                    key
                ]);
            }
        });
        stack.pop();
    }
    if (!utils.isObject(obj)) {
        throw new TypeError("data must be an object");
    }
    build(obj);
    return formData;
}
/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */ function encode$1(str) {
    const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\x00"
    };
    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
    });
}
/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */ function AxiosURLSearchParams(params, options) {
    this._pairs = [];
    params && toFormData(params, this, options);
}
const prototype = AxiosURLSearchParams.prototype;
prototype.append = function append(name, value) {
    this._pairs.push([
        name,
        value
    ]);
};
prototype.toString = function toString(encoder) {
    const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
    } : encode$1;
    return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
    }, "").join("&");
};
/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */ function encode(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?object} options
 *
 * @returns {string} The formatted url
 */ function buildURL(url, params, options) {
    /*eslint no-param-reassign:0*/ if (!params) {
        return url;
    }
    const _encode = options && options.encode || encode;
    const serializeFn = options && options.serialize;
    let serializedParams;
    if (serializeFn) {
        serializedParams = serializeFn(params, options);
    } else {
        serializedParams = utils.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
    }
    if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
            url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
}
class InterceptorManager {
    constructor(){
        this.handlers = [];
    }
    /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */ use(fulfilled, rejected, options) {
        this.handlers.push({
            fulfilled,
            rejected,
            synchronous: options ? options.synchronous : false,
            runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
    }
    /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */ eject(id) {
        if (this.handlers[id]) {
            this.handlers[id] = null;
        }
    }
    /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */ clear() {
        if (this.handlers) {
            this.handlers = [];
        }
    }
    /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */ forEach(fn) {
        utils.forEach(this.handlers, function forEachHandler(h) {
            if (h !== null) {
                fn(h);
            }
        });
    }
}
const InterceptorManager$1 = InterceptorManager;
const transitionalDefaults = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
};
const URLSearchParams = url__default["default"].URLSearchParams;
const platform = {
    isNode: true,
    classes: {
        URLSearchParams,
        FormData: FormData__default["default"],
        Blob: typeof Blob !== "undefined" && Blob || null
    },
    protocols: [
        "http",
        "https",
        "file",
        "data"
    ]
};
function toURLEncodedForm(data, options) {
    return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
            if (utils.isBuffer(value)) {
                this.append(key, value.toString("base64"));
                return false;
            }
            return helpers.defaultVisitor.apply(this, arguments);
        }
    }, options));
}
/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */ function parsePropPath(name) {
    // foo[x][y][z]
    // foo.x.y.z
    // foo-x-y-z
    // foo x y z
    return utils.matchAll(/\w+|\[(\w*)]/g, name).map((match)=>{
        return match[0] === "[]" ? "" : match[1] || match[0];
    });
}
/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */ function arrayToObject(arr) {
    const obj = {};
    const keys = Object.keys(arr);
    let i;
    const len = keys.length;
    let key;
    for(i = 0; i < len; i++){
        key = keys[i];
        obj[key] = arr[key];
    }
    return obj;
}
/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */ function formDataToJSON(formData) {
    function buildPath(path, value, target, index) {
        let name = path[index++];
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path.length;
        name = !name && utils.isArray(target) ? target.length : name;
        if (isLast) {
            if (utils.hasOwnProp(target, name)) {
                target[name] = [
                    target[name],
                    value
                ];
            } else {
                target[name] = value;
            }
            return !isNumericKey;
        }
        if (!target[name] || !utils.isObject(target[name])) {
            target[name] = [];
        }
        const result = buildPath(path, value, target[name], index);
        if (result && utils.isArray(target[name])) {
            target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
    }
    if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {
        const obj = {};
        utils.forEachEntry(formData, (name, value)=>{
            buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
    }
    return null;
}
const DEFAULT_CONTENT_TYPE = {
    "Content-Type": undefined
};
/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */ function stringifySafely(rawValue, parser, encoder) {
    if (utils.isString(rawValue)) {
        try {
            (parser || JSON.parse)(rawValue);
            return utils.trim(rawValue);
        } catch (e) {
            if (e.name !== "SyntaxError") {
                throw e;
            }
        }
    }
    return (encoder || JSON.stringify)(rawValue);
}
const defaults = {
    transitional: transitionalDefaults,
    adapter: [
        "xhr",
        "http"
    ],
    transformRequest: [
        function transformRequest(data, headers) {
            const contentType = headers.getContentType() || "";
            const hasJSONContentType = contentType.indexOf("application/json") > -1;
            const isObjectPayload = utils.isObject(data);
            if (isObjectPayload && utils.isHTMLForm(data)) {
                data = new FormData(data);
            }
            const isFormData = utils.isFormData(data);
            if (isFormData) {
                if (!hasJSONContentType) {
                    return data;
                }
                return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
            }
            if (utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
                return data;
            }
            if (utils.isArrayBufferView(data)) {
                return data.buffer;
            }
            if (utils.isURLSearchParams(data)) {
                headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
                return data.toString();
            }
            let isFileList;
            if (isObjectPayload) {
                if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
                    return toURLEncodedForm(data, this.formSerializer).toString();
                }
                if ((isFileList = utils.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
                    const _FormData = this.env && this.env.FormData;
                    return toFormData(isFileList ? {
                        "files[]": data
                    } : data, _FormData && new _FormData(), this.formSerializer);
                }
            }
            if (isObjectPayload || hasJSONContentType) {
                headers.setContentType("application/json", false);
                return stringifySafely(data);
            }
            return data;
        }
    ],
    transformResponse: [
        function transformResponse(data) {
            const transitional = this.transitional || defaults.transitional;
            const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
            const JSONRequested = this.responseType === "json";
            if (data && utils.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
                const silentJSONParsing = transitional && transitional.silentJSONParsing;
                const strictJSONParsing = !silentJSONParsing && JSONRequested;
                try {
                    return JSON.parse(data);
                } catch (e) {
                    if (strictJSONParsing) {
                        if (e.name === "SyntaxError") {
                            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
                        }
                        throw e;
                    }
                }
            }
            return data;
        }
    ],
    /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */ timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
    },
    validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
    },
    headers: {
        common: {
            "Accept": "application/json, text/plain, */*"
        }
    }
};
utils.forEach([
    "delete",
    "get",
    "head"
], function forEachMethodNoData(method) {
    defaults.headers[method] = {};
});
utils.forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
const defaults$1 = defaults;
// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const ignoreDuplicateOf = utils.toObjectSet([
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
]);
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */ const parseHeaders = (rawHeaders)=>{
    const parsed = {};
    let key;
    let val;
    let i;
    rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
            return;
        }
        if (key === "set-cookie") {
            if (parsed[key]) {
                parsed[key].push(val);
            } else {
                parsed[key] = [
                    val
                ];
            }
        } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
    });
    return parsed;
};
const $internals = Symbol("internals");
function normalizeHeader(header) {
    return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
    if (value === false || value == null) {
        return value;
    }
    return utils.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
    const tokens = Object.create(null);
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
    let match;
    while(match = tokensRE.exec(str)){
        tokens[match[1]] = match[2];
    }
    return tokens;
}
const isValidHeaderName = (str)=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
    if (utils.isFunction(filter)) {
        return filter.call(this, value, header);
    }
    if (isHeaderNameFilter) {
        value = header;
    }
    if (!utils.isString(value)) return;
    if (utils.isString(filter)) {
        return value.indexOf(filter) !== -1;
    }
    if (utils.isRegExp(filter)) {
        return filter.test(value);
    }
}
function formatHeader(header) {
    return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str)=>{
        return char.toUpperCase() + str;
    });
}
function buildAccessors(obj, header) {
    const accessorName = utils.toCamelCase(" " + header);
    [
        "get",
        "set",
        "has"
    ].forEach((methodName)=>{
        Object.defineProperty(obj, methodName + accessorName, {
            value: function(arg1, arg2, arg3) {
                return this[methodName].call(this, header, arg1, arg2, arg3);
            },
            configurable: true
        });
    });
}
class AxiosHeaders {
    constructor(headers){
        headers && this.set(headers);
    }
    set(header, valueOrRewrite, rewrite) {
        const self1 = this;
        function setHeader(_value, _header, _rewrite) {
            const lHeader = normalizeHeader(_header);
            if (!lHeader) {
                throw new Error("header name must be a non-empty string");
            }
            const key = utils.findKey(self1, lHeader);
            if (!key || self1[key] === undefined || _rewrite === true || _rewrite === undefined && self1[key] !== false) {
                self1[key || _header] = normalizeValue(_value);
            }
        }
        const setHeaders = (headers, _rewrite)=>utils.forEach(headers, (_value, _header)=>setHeader(_value, _header, _rewrite));
        if (utils.isPlainObject(header) || header instanceof this.constructor) {
            setHeaders(header, valueOrRewrite);
        } else if (utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
            setHeaders(parseHeaders(header), valueOrRewrite);
        } else {
            header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
    }
    get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
            const key = utils.findKey(this, header);
            if (key) {
                const value = this[key];
                if (!parser) {
                    return value;
                }
                if (parser === true) {
                    return parseTokens(value);
                }
                if (utils.isFunction(parser)) {
                    return parser.call(this, value, key);
                }
                if (utils.isRegExp(parser)) {
                    return parser.exec(value);
                }
                throw new TypeError("parser must be boolean|regexp|function");
            }
        }
    }
    has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
            const key = utils.findKey(this, header);
            return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
    }
    delete(header, matcher) {
        const self1 = this;
        let deleted = false;
        function deleteHeader(_header) {
            _header = normalizeHeader(_header);
            if (_header) {
                const key = utils.findKey(self1, _header);
                if (key && (!matcher || matchHeaderValue(self1, self1[key], key, matcher))) {
                    delete self1[key];
                    deleted = true;
                }
            }
        }
        if (utils.isArray(header)) {
            header.forEach(deleteHeader);
        } else {
            deleteHeader(header);
        }
        return deleted;
    }
    clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while(i--){
            const key = keys[i];
            if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
                delete this[key];
                deleted = true;
            }
        }
        return deleted;
    }
    normalize(format) {
        const self1 = this;
        const headers = {};
        utils.forEach(this, (value, header)=>{
            const key = utils.findKey(headers, header);
            if (key) {
                self1[key] = normalizeValue(value);
                delete self1[header];
                return;
            }
            const normalized = format ? formatHeader(header) : String(header).trim();
            if (normalized !== header) {
                delete self1[header];
            }
            self1[normalized] = normalizeValue(value);
            headers[normalized] = true;
        });
        return this;
    }
    concat(...targets) {
        return this.constructor.concat(this, ...targets);
    }
    toJSON(asStrings) {
        const obj = Object.create(null);
        utils.forEach(this, (value, header)=>{
            value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(", ") : value);
        });
        return obj;
    }
    [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
    }
    toString() {
        return Object.entries(this.toJSON()).map(([header, value])=>header + ": " + value).join("\n");
    }
    get [Symbol.toStringTag]() {
        return "AxiosHeaders";
    }
    static from(thing) {
        return thing instanceof this ? thing : new this(thing);
    }
    static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target)=>computed.set(target));
        return computed;
    }
    static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
            accessors: {}
        };
        const accessors = internals.accessors;
        const prototype = this.prototype;
        function defineAccessor(_header) {
            const lHeader = normalizeHeader(_header);
            if (!accessors[lHeader]) {
                buildAccessors(prototype, _header);
                accessors[lHeader] = true;
            }
        }
        utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
    }
}
AxiosHeaders.accessor([
    "Content-Type",
    "Content-Length",
    "Accept",
    "Accept-Encoding",
    "User-Agent",
    "Authorization"
]);
utils.freezeMethods(AxiosHeaders.prototype);
utils.freezeMethods(AxiosHeaders);
const AxiosHeaders$1 = AxiosHeaders;
/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */ function transformData(fns, response) {
    const config = this || defaults$1;
    const context = response || config;
    const headers = AxiosHeaders$1.from(context.headers);
    let data = context.data;
    utils.forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
    });
    headers.normalize();
    return data;
}
function isCancel(value) {
    return !!(value && value.__CANCEL__);
}
/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */ function CanceledError(message, config, request) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config, request);
    this.name = "CanceledError";
}
utils.inherits(CanceledError, AxiosError, {
    __CANCEL__: true
});
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */ function settle(resolve, reject, response) {
    const validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
    } else {
        reject(new AxiosError("Request failed with status code " + response.status, [
            AxiosError.ERR_BAD_REQUEST,
            AxiosError.ERR_BAD_RESPONSE
        ][Math.floor(response.status / 100) - 4], response.config, response.request, response));
    }
}
/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */ function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}
/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */ function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}
/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */ function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
}
const VERSION = "1.4.0";
function parseProtocol(url) {
    const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
    return match && match[1] || "";
}
const DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;
/**
 * Parse data uri to a Buffer or Blob
 *
 * @param {String} uri
 * @param {?Boolean} asBlob
 * @param {?Object} options
 * @param {?Function} options.Blob
 *
 * @returns {Buffer|Blob}
 */ function fromDataURI(uri, asBlob, options) {
    const _Blob = options && options.Blob || platform.classes.Blob;
    const protocol = parseProtocol(uri);
    if (asBlob === undefined && _Blob) {
        asBlob = true;
    }
    if (protocol === "data") {
        uri = protocol.length ? uri.slice(protocol.length + 1) : uri;
        const match = DATA_URL_PATTERN.exec(uri);
        if (!match) {
            throw new AxiosError("Invalid URL", AxiosError.ERR_INVALID_URL);
        }
        const mime = match[1];
        const isBase64 = match[2];
        const body = match[3];
        const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? "base64" : "utf8");
        if (asBlob) {
            if (!_Blob) {
                throw new AxiosError("Blob is not supported", AxiosError.ERR_NOT_SUPPORT);
            }
            return new _Blob([
                buffer
            ], {
                type: mime
            });
        }
        return buffer;
    }
    throw new AxiosError("Unsupported protocol " + protocol, AxiosError.ERR_NOT_SUPPORT);
}
/**
 * Throttle decorator
 * @param {Function} fn
 * @param {Number} freq
 * @return {Function}
 */ function throttle(fn, freq) {
    let timestamp = 0;
    const threshold = 1000 / freq;
    let timer = null;
    return function throttled(force, args) {
        const now = Date.now();
        if (force || now - timestamp > threshold) {
            if (timer) {
                clearTimeout(timer);
                timer = null;
            }
            timestamp = now;
            return fn.apply(null, args);
        }
        if (!timer) {
            timer = setTimeout(()=>{
                timer = null;
                timestamp = Date.now();
                return fn.apply(null, args);
            }, threshold - (now - timestamp));
        }
    };
}
/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */ function speedometer(samplesCount, min) {
    samplesCount = samplesCount || 10;
    const bytes = new Array(samplesCount);
    const timestamps = new Array(samplesCount);
    let head = 0;
    let tail = 0;
    let firstSampleTS;
    min = min !== undefined ? min : 1000;
    return function push(chunkLength) {
        const now = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
            firstSampleTS = now;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now;
        let i = tail;
        let bytesCount = 0;
        while(i !== head){
            bytesCount += bytes[i++];
            i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
            tail = (tail + 1) % samplesCount;
        }
        if (now - firstSampleTS < min) {
            return;
        }
        const passed = startedAt && now - startedAt;
        return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
    };
}
const kInternals = Symbol("internals");
class AxiosTransformStream extends stream__default["default"].Transform {
    constructor(options){
        options = utils.toFlatObject(options, {
            maxRate: 0,
            chunkSize: 64 * 1024,
            minChunkSize: 100,
            timeWindow: 500,
            ticksRate: 2,
            samplesCount: 15
        }, null, (prop, source)=>{
            return !utils.isUndefined(source[prop]);
        });
        super({
            readableHighWaterMark: options.chunkSize
        });
        const self1 = this;
        const internals = this[kInternals] = {
            length: options.length,
            timeWindow: options.timeWindow,
            ticksRate: options.ticksRate,
            chunkSize: options.chunkSize,
            maxRate: options.maxRate,
            minChunkSize: options.minChunkSize,
            bytesSeen: 0,
            isCaptured: false,
            notifiedBytesLoaded: 0,
            ts: Date.now(),
            bytes: 0,
            onReadCallback: null
        };
        const _speedometer = speedometer(internals.ticksRate * options.samplesCount, internals.timeWindow);
        this.on("newListener", (event)=>{
            if (event === "progress") {
                if (!internals.isCaptured) {
                    internals.isCaptured = true;
                }
            }
        });
        let bytesNotified = 0;
        internals.updateProgress = throttle(function throttledHandler() {
            const totalBytes = internals.length;
            const bytesTransferred = internals.bytesSeen;
            const progressBytes = bytesTransferred - bytesNotified;
            if (!progressBytes || self1.destroyed) return;
            const rate = _speedometer(progressBytes);
            bytesNotified = bytesTransferred;
            process.nextTick(()=>{
                self1.emit("progress", {
                    "loaded": bytesTransferred,
                    "total": totalBytes,
                    "progress": totalBytes ? bytesTransferred / totalBytes : undefined,
                    "bytes": progressBytes,
                    "rate": rate ? rate : undefined,
                    "estimated": rate && totalBytes && bytesTransferred <= totalBytes ? (totalBytes - bytesTransferred) / rate : undefined
                });
            });
        }, internals.ticksRate);
        const onFinish = ()=>{
            internals.updateProgress(true);
        };
        this.once("end", onFinish);
        this.once("error", onFinish);
    }
    _read(size) {
        const internals = this[kInternals];
        if (internals.onReadCallback) {
            internals.onReadCallback();
        }
        return super._read(size);
    }
    _transform(chunk, encoding, callback) {
        const self1 = this;
        const internals = this[kInternals];
        const maxRate = internals.maxRate;
        const readableHighWaterMark = this.readableHighWaterMark;
        const timeWindow = internals.timeWindow;
        const divider = 1000 / timeWindow;
        const bytesThreshold = maxRate / divider;
        const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;
        function pushChunk(_chunk, _callback) {
            const bytes = Buffer.byteLength(_chunk);
            internals.bytesSeen += bytes;
            internals.bytes += bytes;
            if (internals.isCaptured) {
                internals.updateProgress();
            }
            if (self1.push(_chunk)) {
                process.nextTick(_callback);
            } else {
                internals.onReadCallback = ()=>{
                    internals.onReadCallback = null;
                    process.nextTick(_callback);
                };
            }
        }
        const transformChunk = (_chunk, _callback)=>{
            const chunkSize = Buffer.byteLength(_chunk);
            let chunkRemainder = null;
            let maxChunkSize = readableHighWaterMark;
            let bytesLeft;
            let passed = 0;
            if (maxRate) {
                const now = Date.now();
                if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {
                    internals.ts = now;
                    bytesLeft = bytesThreshold - internals.bytes;
                    internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
                    passed = 0;
                }
                bytesLeft = bytesThreshold - internals.bytes;
            }
            if (maxRate) {
                if (bytesLeft <= 0) {
                    // next time window
                    return setTimeout(()=>{
                        _callback(null, _chunk);
                    }, timeWindow - passed);
                }
                if (bytesLeft < maxChunkSize) {
                    maxChunkSize = bytesLeft;
                }
            }
            if (maxChunkSize && chunkSize > maxChunkSize && chunkSize - maxChunkSize > minChunkSize) {
                chunkRemainder = _chunk.subarray(maxChunkSize);
                _chunk = _chunk.subarray(0, maxChunkSize);
            }
            pushChunk(_chunk, chunkRemainder ? ()=>{
                process.nextTick(_callback, null, chunkRemainder);
            } : _callback);
        };
        transformChunk(chunk, function transformNextChunk(err, _chunk) {
            if (err) {
                return callback(err);
            }
            if (_chunk) {
                transformChunk(_chunk, transformNextChunk);
            } else {
                callback(null);
            }
        });
    }
    setLength(length) {
        this[kInternals].length = +length;
        return this;
    }
}
const AxiosTransformStream$1 = AxiosTransformStream;
const { asyncIterator } = Symbol;
const readBlob = async function*(blob) {
    if (blob.stream) {
        yield* blob.stream();
    } else if (blob.arrayBuffer) {
        yield await blob.arrayBuffer();
    } else if (blob[asyncIterator]) {
        yield* blob[asyncIterator]();
    } else {
        yield blob;
    }
};
const readBlob$1 = readBlob;
const BOUNDARY_ALPHABET = utils.ALPHABET.ALPHA_DIGIT + "-_";
const textEncoder = new util.TextEncoder();
const CRLF = "\r\n";
const CRLF_BYTES = textEncoder.encode(CRLF);
const CRLF_BYTES_COUNT = 2;
class FormDataPart {
    constructor(name, value){
        const { escapeName } = this.constructor;
        const isStringValue = utils.isString(value);
        let headers = `Content-Disposition: form-data; name="${escapeName(name)}"${!isStringValue && value.name ? `; filename="${escapeName(value.name)}"` : ""}${CRLF}`;
        if (isStringValue) {
            value = textEncoder.encode(String(value).replace(/\r?\n|\r\n?/g, CRLF));
        } else {
            headers += `Content-Type: ${value.type || "application/octet-stream"}${CRLF}`;
        }
        this.headers = textEncoder.encode(headers + CRLF);
        this.contentLength = isStringValue ? value.byteLength : value.size;
        this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;
        this.name = name;
        this.value = value;
    }
    async *encode() {
        yield this.headers;
        const { value } = this;
        if (utils.isTypedArray(value)) {
            yield value;
        } else {
            yield* readBlob$1(value);
        }
        yield CRLF_BYTES;
    }
    static escapeName(name) {
        return String(name).replace(/[\r\n"]/g, (match)=>({
                "\r": "%0D",
                "\n": "%0A",
                '"': "%22"
            })[match]);
    }
}
const formDataToStream = (form, headersHandler, options)=>{
    const { tag = "form-data-boundary", size = 25, boundary = tag + "-" + utils.generateString(size, BOUNDARY_ALPHABET) } = options || {};
    if (!utils.isFormData(form)) {
        throw TypeError("FormData instance required");
    }
    if (boundary.length < 1 || boundary.length > 70) {
        throw Error("boundary must be 10-70 characters long");
    }
    const boundaryBytes = textEncoder.encode("--" + boundary + CRLF);
    const footerBytes = textEncoder.encode("--" + boundary + "--" + CRLF + CRLF);
    let contentLength = footerBytes.byteLength;
    const parts = Array.from(form.entries()).map(([name, value])=>{
        const part = new FormDataPart(name, value);
        contentLength += part.size;
        return part;
    });
    contentLength += boundaryBytes.byteLength * parts.length;
    contentLength = utils.toFiniteNumber(contentLength);
    const computedHeaders = {
        "Content-Type": `multipart/form-data; boundary=${boundary}`
    };
    if (Number.isFinite(contentLength)) {
        computedHeaders["Content-Length"] = contentLength;
    }
    headersHandler && headersHandler(computedHeaders);
    return stream.Readable.from(async function*() {
        for (const part of parts){
            yield boundaryBytes;
            yield* part.encode();
        }
        yield footerBytes;
    }());
};
const formDataToStream$1 = formDataToStream;
class ZlibHeaderTransformStream extends stream__default["default"].Transform {
    __transform(chunk, encoding, callback) {
        this.push(chunk);
        callback();
    }
    _transform(chunk, encoding, callback) {
        if (chunk.length !== 0) {
            this._transform = this.__transform;
            // Add Default Compression headers if no zlib headers are present
            if (chunk[0] !== 120) {
                const header = Buffer.alloc(2);
                header[0] = 120; // Hex: 78
                header[1] = 156; // Hex: 9C 
                this.push(header, encoding);
            }
        }
        this.__transform(chunk, encoding, callback);
    }
}
const ZlibHeaderTransformStream$1 = ZlibHeaderTransformStream;
const callbackify = (fn, reducer)=>{
    return utils.isAsyncFn(fn) ? function(...args) {
        const cb = args.pop();
        fn.apply(this, args).then((value)=>{
            try {
                reducer ? cb(null, ...reducer(value)) : cb(null, value);
            } catch (err) {
                cb(err);
            }
        }, cb);
    } : fn;
};
const callbackify$1 = callbackify;
const zlibOptions = {
    flush: zlib__default["default"].constants.Z_SYNC_FLUSH,
    finishFlush: zlib__default["default"].constants.Z_SYNC_FLUSH
};
const brotliOptions = {
    flush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH,
    finishFlush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH
};
const isBrotliSupported = utils.isFunction(zlib__default["default"].createBrotliDecompress);
const { http: httpFollow, https: httpsFollow } = followRedirects__default["default"];
const isHttps = /https:?/;
const supportedProtocols = platform.protocols.map((protocol)=>{
    return protocol + ":";
});
/**
 * If the proxy or config beforeRedirects functions are defined, call them with the options
 * object.
 *
 * @param {Object<string, any>} options - The options object that was passed to the request.
 *
 * @returns {Object<string, any>}
 */ function dispatchBeforeRedirect(options) {
    if (options.beforeRedirects.proxy) {
        options.beforeRedirects.proxy(options);
    }
    if (options.beforeRedirects.config) {
        options.beforeRedirects.config(options);
    }
}
/**
 * If the proxy or config afterRedirects functions are defined, call them with the options
 *
 * @param {http.ClientRequestArgs} options
 * @param {AxiosProxyConfig} configProxy configuration from Axios options object
 * @param {string} location
 *
 * @returns {http.ClientRequestArgs}
 */ function setProxy(options, configProxy, location) {
    let proxy = configProxy;
    if (!proxy && proxy !== false) {
        const proxyUrl = proxyFromEnv.getProxyForUrl(location);
        if (proxyUrl) {
            proxy = new URL(proxyUrl);
        }
    }
    if (proxy) {
        // Basic proxy authorization
        if (proxy.username) {
            proxy.auth = (proxy.username || "") + ":" + (proxy.password || "");
        }
        if (proxy.auth) {
            // Support proxy auth object form
            if (proxy.auth.username || proxy.auth.password) {
                proxy.auth = (proxy.auth.username || "") + ":" + (proxy.auth.password || "");
            }
            const base64 = Buffer.from(proxy.auth, "utf8").toString("base64");
            options.headers["Proxy-Authorization"] = "Basic " + base64;
        }
        options.headers.host = options.hostname + (options.port ? ":" + options.port : "");
        const proxyHost = proxy.hostname || proxy.host;
        options.hostname = proxyHost;
        // Replace 'host' since options is not a URL object
        options.host = proxyHost;
        options.port = proxy.port;
        options.path = location;
        if (proxy.protocol) {
            options.protocol = proxy.protocol.includes(":") ? proxy.protocol : `${proxy.protocol}:`;
        }
    }
    options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {
        // Configure proxy for redirected request, passing the original config proxy to apply
        // the exact same logic as if the redirected request was performed by axios directly.
        setProxy(redirectOptions, configProxy, redirectOptions.href);
    };
}
const isHttpAdapterSupported = typeof process !== "undefined" && utils.kindOf(process) === "process";
// temporary hotfix
const wrapAsync = (asyncExecutor)=>{
    return new Promise((resolve, reject)=>{
        let onDone;
        let isDone;
        const done = (value, isRejected)=>{
            if (isDone) return;
            isDone = true;
            onDone && onDone(value, isRejected);
        };
        const _resolve = (value)=>{
            done(value);
            resolve(value);
        };
        const _reject = (reason)=>{
            done(reason, true);
            reject(reason);
        };
        asyncExecutor(_resolve, _reject, (onDoneHandler)=>onDone = onDoneHandler).catch(_reject);
    });
};
/*eslint consistent-return:0*/ const httpAdapter = isHttpAdapterSupported && function httpAdapter(config) {
    return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {
        let { data, lookup, family } = config;
        const { responseType, responseEncoding } = config;
        const method = config.method.toUpperCase();
        let isDone;
        let rejected = false;
        let req;
        if (lookup && utils.isAsyncFn(lookup)) {
            lookup = callbackify$1(lookup, (entry)=>{
                if (utils.isString(entry)) {
                    entry = [
                        entry,
                        entry.indexOf(".") < 0 ? 6 : 4
                    ];
                } else if (!utils.isArray(entry)) {
                    throw new TypeError("lookup async function must return an array [ip: string, family: number]]");
                }
                return entry;
            });
        }
        // temporary internal emitter until the AxiosRequest class will be implemented
        const emitter = new EventEmitter__default["default"]();
        const onFinished = ()=>{
            if (config.cancelToken) {
                config.cancelToken.unsubscribe(abort);
            }
            if (config.signal) {
                config.signal.removeEventListener("abort", abort);
            }
            emitter.removeAllListeners();
        };
        onDone((value, isRejected)=>{
            isDone = true;
            if (isRejected) {
                rejected = true;
                onFinished();
            }
        });
        function abort(reason) {
            emitter.emit("abort", !reason || reason.type ? new CanceledError(null, config, req) : reason);
        }
        emitter.once("abort", reject);
        if (config.cancelToken || config.signal) {
            config.cancelToken && config.cancelToken.subscribe(abort);
            if (config.signal) {
                config.signal.aborted ? abort() : config.signal.addEventListener("abort", abort);
            }
        }
        // Parse url
        const fullPath = buildFullPath(config.baseURL, config.url);
        const parsed = new URL(fullPath, "http://localhost");
        const protocol = parsed.protocol || supportedProtocols[0];
        if (protocol === "data:") {
            let convertedData;
            if (method !== "GET") {
                return settle(resolve, reject, {
                    status: 405,
                    statusText: "method not allowed",
                    headers: {},
                    config
                });
            }
            try {
                convertedData = fromDataURI(config.url, responseType === "blob", {
                    Blob: config.env && config.env.Blob
                });
            } catch (err) {
                throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);
            }
            if (responseType === "text") {
                convertedData = convertedData.toString(responseEncoding);
                if (!responseEncoding || responseEncoding === "utf8") {
                    convertedData = utils.stripBOM(convertedData);
                }
            } else if (responseType === "stream") {
                convertedData = stream__default["default"].Readable.from(convertedData);
            }
            return settle(resolve, reject, {
                data: convertedData,
                status: 200,
                statusText: "OK",
                headers: new AxiosHeaders$1(),
                config
            });
        }
        if (supportedProtocols.indexOf(protocol) === -1) {
            return reject(new AxiosError("Unsupported protocol " + protocol, AxiosError.ERR_BAD_REQUEST, config));
        }
        const headers = AxiosHeaders$1.from(config.headers).normalize();
        // Set User-Agent (required by some servers)
        // See https://github.com/axios/axios/issues/69
        // User-Agent is specified; handle case where no UA header is desired
        // Only set header if it hasn't been set in config
        headers.set("User-Agent", "axios/" + VERSION, false);
        const onDownloadProgress = config.onDownloadProgress;
        const onUploadProgress = config.onUploadProgress;
        const maxRate = config.maxRate;
        let maxUploadRate = undefined;
        let maxDownloadRate = undefined;
        // support for spec compliant FormData objects
        if (utils.isSpecCompliantForm(data)) {
            const userBoundary = headers.getContentType(/boundary=([-_\w\d]{10,70})/i);
            data = formDataToStream$1(data, (formHeaders)=>{
                headers.set(formHeaders);
            }, {
                tag: `axios-${VERSION}-boundary`,
                boundary: userBoundary && userBoundary[1] || undefined
            });
        // support for https://www.npmjs.com/package/form-data api
        } else if (utils.isFormData(data) && utils.isFunction(data.getHeaders)) {
            headers.set(data.getHeaders());
            if (!headers.hasContentLength()) {
                try {
                    const knownLength = await util__default["default"].promisify(data.getLength).call(data);
                    Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);
                /*eslint no-empty:0*/ } catch (e) {}
            }
        } else if (utils.isBlob(data)) {
            data.size && headers.setContentType(data.type || "application/octet-stream");
            headers.setContentLength(data.size || 0);
            data = stream__default["default"].Readable.from(readBlob$1(data));
        } else if (data && !utils.isStream(data)) {
            if (Buffer.isBuffer(data)) ;
            else if (utils.isArrayBuffer(data)) {
                data = Buffer.from(new Uint8Array(data));
            } else if (utils.isString(data)) {
                data = Buffer.from(data, "utf-8");
            } else {
                return reject(new AxiosError("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream", AxiosError.ERR_BAD_REQUEST, config));
            }
            // Add Content-Length header if data exists
            headers.setContentLength(data.length, false);
            if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
                return reject(new AxiosError("Request body larger than maxBodyLength limit", AxiosError.ERR_BAD_REQUEST, config));
            }
        }
        const contentLength = utils.toFiniteNumber(headers.getContentLength());
        if (utils.isArray(maxRate)) {
            maxUploadRate = maxRate[0];
            maxDownloadRate = maxRate[1];
        } else {
            maxUploadRate = maxDownloadRate = maxRate;
        }
        if (data && (onUploadProgress || maxUploadRate)) {
            if (!utils.isStream(data)) {
                data = stream__default["default"].Readable.from(data, {
                    objectMode: false
                });
            }
            data = stream__default["default"].pipeline([
                data,
                new AxiosTransformStream$1({
                    length: contentLength,
                    maxRate: utils.toFiniteNumber(maxUploadRate)
                })
            ], utils.noop);
            onUploadProgress && data.on("progress", (progress)=>{
                onUploadProgress(Object.assign(progress, {
                    upload: true
                }));
            });
        }
        // HTTP basic authentication
        let auth = undefined;
        if (config.auth) {
            const username = config.auth.username || "";
            const password = config.auth.password || "";
            auth = username + ":" + password;
        }
        if (!auth && parsed.username) {
            const urlUsername = parsed.username;
            const urlPassword = parsed.password;
            auth = urlUsername + ":" + urlPassword;
        }
        auth && headers.delete("authorization");
        let path;
        try {
            path = buildURL(parsed.pathname + parsed.search, config.params, config.paramsSerializer).replace(/^\?/, "");
        } catch (err) {
            const customErr = new Error(err.message);
            customErr.config = config;
            customErr.url = config.url;
            customErr.exists = true;
            return reject(customErr);
        }
        headers.set("Accept-Encoding", "gzip, compress, deflate" + (isBrotliSupported ? ", br" : ""), false);
        const options = {
            path,
            method: method,
            headers: headers.toJSON(),
            agents: {
                http: config.httpAgent,
                https: config.httpsAgent
            },
            auth,
            protocol,
            family,
            lookup,
            beforeRedirect: dispatchBeforeRedirect,
            beforeRedirects: {}
        };
        if (config.socketPath) {
            options.socketPath = config.socketPath;
        } else {
            options.hostname = parsed.hostname;
            options.port = parsed.port;
            setProxy(options, config.proxy, protocol + "//" + parsed.hostname + (parsed.port ? ":" + parsed.port : "") + options.path);
        }
        let transport;
        const isHttpsRequest = isHttps.test(options.protocol);
        options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
        if (config.transport) {
            transport = config.transport;
        } else if (config.maxRedirects === 0) {
            transport = isHttpsRequest ? https__default["default"] : http__default["default"];
        } else {
            if (config.maxRedirects) {
                options.maxRedirects = config.maxRedirects;
            }
            if (config.beforeRedirect) {
                options.beforeRedirects.config = config.beforeRedirect;
            }
            transport = isHttpsRequest ? httpsFollow : httpFollow;
        }
        if (config.maxBodyLength > -1) {
            options.maxBodyLength = config.maxBodyLength;
        } else {
            // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited
            options.maxBodyLength = Infinity;
        }
        if (config.insecureHTTPParser) {
            options.insecureHTTPParser = config.insecureHTTPParser;
        }
        // Create the request
        req = transport.request(options, function handleResponse(res) {
            if (req.destroyed) return;
            const streams = [
                res
            ];
            const responseLength = +res.headers["content-length"];
            if (onDownloadProgress) {
                const transformStream = new AxiosTransformStream$1({
                    length: utils.toFiniteNumber(responseLength),
                    maxRate: utils.toFiniteNumber(maxDownloadRate)
                });
                onDownloadProgress && transformStream.on("progress", (progress)=>{
                    onDownloadProgress(Object.assign(progress, {
                        download: true
                    }));
                });
                streams.push(transformStream);
            }
            // decompress the response body transparently if required
            let responseStream = res;
            // return the last request in case of redirects
            const lastRequest = res.req || req;
            // if decompress disabled we should not decompress
            if (config.decompress !== false && res.headers["content-encoding"]) {
                // if no content, but headers still say that it is encoded,
                // remove the header not confuse downstream operations
                if (method === "HEAD" || res.statusCode === 204) {
                    delete res.headers["content-encoding"];
                }
                switch(res.headers["content-encoding"]){
                    /*eslint default-case:0*/ case "gzip":
                    case "x-gzip":
                    case "compress":
                    case "x-compress":
                        // add the unzipper to the body stream processing pipeline
                        streams.push(zlib__default["default"].createUnzip(zlibOptions));
                        // remove the content-encoding in order to not confuse downstream operations
                        delete res.headers["content-encoding"];
                        break;
                    case "deflate":
                        streams.push(new ZlibHeaderTransformStream$1());
                        // add the unzipper to the body stream processing pipeline
                        streams.push(zlib__default["default"].createUnzip(zlibOptions));
                        // remove the content-encoding in order to not confuse downstream operations
                        delete res.headers["content-encoding"];
                        break;
                    case "br":
                        if (isBrotliSupported) {
                            streams.push(zlib__default["default"].createBrotliDecompress(brotliOptions));
                            delete res.headers["content-encoding"];
                        }
                }
            }
            responseStream = streams.length > 1 ? stream__default["default"].pipeline(streams, utils.noop) : streams[0];
            const offListeners = stream__default["default"].finished(responseStream, ()=>{
                offListeners();
                onFinished();
            });
            const response = {
                status: res.statusCode,
                statusText: res.statusMessage,
                headers: new AxiosHeaders$1(res.headers),
                config,
                request: lastRequest
            };
            if (responseType === "stream") {
                response.data = responseStream;
                settle(resolve, reject, response);
            } else {
                const responseBuffer = [];
                let totalResponseBytes = 0;
                responseStream.on("data", function handleStreamData(chunk) {
                    responseBuffer.push(chunk);
                    totalResponseBytes += chunk.length;
                    // make sure the content length is not over the maxContentLength if specified
                    if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
                        // stream.destroy() emit aborted event before calling reject() on Node.js v16
                        rejected = true;
                        responseStream.destroy();
                        reject(new AxiosError("maxContentLength size of " + config.maxContentLength + " exceeded", AxiosError.ERR_BAD_RESPONSE, config, lastRequest));
                    }
                });
                responseStream.on("aborted", function handlerStreamAborted() {
                    if (rejected) {
                        return;
                    }
                    const err = new AxiosError("maxContentLength size of " + config.maxContentLength + " exceeded", AxiosError.ERR_BAD_RESPONSE, config, lastRequest);
                    responseStream.destroy(err);
                    reject(err);
                });
                responseStream.on("error", function handleStreamError(err) {
                    if (req.destroyed) return;
                    reject(AxiosError.from(err, null, config, lastRequest));
                });
                responseStream.on("end", function handleStreamEnd() {
                    try {
                        let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
                        if (responseType !== "arraybuffer") {
                            responseData = responseData.toString(responseEncoding);
                            if (!responseEncoding || responseEncoding === "utf8") {
                                responseData = utils.stripBOM(responseData);
                            }
                        }
                        response.data = responseData;
                    } catch (err) {
                        reject(AxiosError.from(err, null, config, response.request, response));
                    }
                    settle(resolve, reject, response);
                });
            }
            emitter.once("abort", (err)=>{
                if (!responseStream.destroyed) {
                    responseStream.emit("error", err);
                    responseStream.destroy();
                }
            });
        });
        emitter.once("abort", (err)=>{
            reject(err);
            req.destroy(err);
        });
        // Handle errors
        req.on("error", function handleRequestError(err) {
            // @todo remove
            // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;
            reject(AxiosError.from(err, null, config, req));
        });
        // set tcp keep alive to prevent drop connection by peer
        req.on("socket", function handleRequestSocket(socket) {
            // default interval of sending ack packet is 1 minute
            socket.setKeepAlive(true, 1000 * 60);
        });
        // Handle request timeout
        if (config.timeout) {
            // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.
            const timeout = parseInt(config.timeout, 10);
            if (isNaN(timeout)) {
                reject(new AxiosError("error trying to parse `config.timeout` to int", AxiosError.ERR_BAD_OPTION_VALUE, config, req));
                return;
            }
            // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
            // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
            // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
            // And then these socket which be hang up will devouring CPU little by little.
            // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.
            req.setTimeout(timeout, function handleRequestTimeout() {
                if (isDone) return;
                let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
                const transitional = config.transitional || transitionalDefaults;
                if (config.timeoutErrorMessage) {
                    timeoutErrorMessage = config.timeoutErrorMessage;
                }
                reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, req));
                abort();
            });
        }
        // Send the request
        if (utils.isStream(data)) {
            let ended = false;
            let errored = false;
            data.on("end", ()=>{
                ended = true;
            });
            data.once("error", (err)=>{
                errored = true;
                req.destroy(err);
            });
            data.on("close", ()=>{
                if (!ended && !errored) {
                    abort(new CanceledError("Request stream has been aborted", config, req));
                }
            });
            data.pipe(req);
        } else {
            req.end(data);
        }
    });
};
const cookies = platform.isStandardBrowserEnv ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
    return {
        write: function write(name, value, expires, path, domain, secure) {
            const cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
                cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
                cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
                cookie.push("domain=" + domain);
            }
            if (secure === true) {
                cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
        },
        read: function read(name) {
            const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
            this.write(name, "", Date.now() - 86400000);
        }
    };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return {
        write: function write() {},
        read: function read() {
            return null;
        },
        remove: function remove() {}
    };
}();
const isURLSameOrigin = platform.isStandardBrowserEnv ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement("a");
    let originURL;
    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */ function resolveURL(url) {
        let href = url;
        if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
    }
    originURL = resolveURL(window.location.href);
    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */ return function isURLSameOrigin(requestURL) {
        const parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
        return true;
    };
}();
function progressEventReducer(listener, isDownloadStream) {
    let bytesNotified = 0;
    const _speedometer = speedometer(50, 250);
    return (e)=>{
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : undefined;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
            loaded,
            total,
            progress: total ? loaded / total : undefined,
            bytes: progressBytes,
            rate: rate ? rate : undefined,
            estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
            event: e
        };
        data[isDownloadStream ? "download" : "upload"] = true;
        listener(data);
    };
}
const isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
const xhrAdapter = isXHRAdapterSupported && function(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
        let requestData = config.data;
        const requestHeaders = AxiosHeaders$1.from(config.headers).normalize();
        const responseType = config.responseType;
        let onCanceled;
        function done() {
            if (config.cancelToken) {
                config.cancelToken.unsubscribe(onCanceled);
            }
            if (config.signal) {
                config.signal.removeEventListener("abort", onCanceled);
            }
        }
        if (utils.isFormData(requestData)) {
            if (platform.isStandardBrowserEnv || platform.isStandardBrowserWebWorkerEnv) {
                requestHeaders.setContentType(false); // Let the browser set it
            } else {
                requestHeaders.setContentType("multipart/form-data;", false); // mobile/desktop app frameworks
            }
        }
        let request = new XMLHttpRequest();
        // HTTP basic authentication
        if (config.auth) {
            const username = config.auth.username || "";
            const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
            requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
        }
        const fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        // Set the request timeout in MS
        request.timeout = config.timeout;
        function onloadend() {
            if (!request) {
                return;
            }
            // Prepare the response
            const responseHeaders = AxiosHeaders$1.from("getAllResponseHeaders" in request && request.getAllResponseHeaders());
            const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
            const response = {
                data: responseData,
                status: request.status,
                statusText: request.statusText,
                headers: responseHeaders,
                config,
                request
            };
            settle(function _resolve(value) {
                resolve(value);
                done();
            }, function _reject(err) {
                reject(err);
                done();
            }, response);
            // Clean up request
            request = null;
        }
        if ("onloadend" in request) {
            // Use onloadend if available
            request.onloadend = onloadend;
        } else {
            // Listen for ready state to emulate onloadend
            request.onreadystatechange = function handleLoad() {
                if (!request || request.readyState !== 4) {
                    return;
                }
                // The request errored out and we didn't get a response, this will be
                // handled by onerror instead
                // With one exception: request that using file: protocol, most browsers
                // will return status as 0 even though it's a successful request
                if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
                    return;
                }
                // readystate handler is calling before onerror or ontimeout handlers,
                // so we should call onloadend on the next 'tick'
                setTimeout(onloadend);
            };
        }
        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
            if (!request) {
                return;
            }
            reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
            // Clean up request
            request = null;
        };
        // Handle low level network errors
        request.onerror = function handleError() {
            // Real errors are hidden from us by the browser
            // onerror should only fire if it's a network error
            reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request));
            // Clean up request
            request = null;
        };
        // Handle timeout
        request.ontimeout = function handleTimeout() {
            let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
            const transitional = config.transitional || transitionalDefaults;
            if (config.timeoutErrorMessage) {
                timeoutErrorMessage = config.timeoutErrorMessage;
            }
            reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, request));
            // Clean up request
            request = null;
        };
        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (platform.isStandardBrowserEnv) {
            // Add xsrf header
            const xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName && cookies.read(config.xsrfCookieName);
            if (xsrfValue) {
                requestHeaders.set(config.xsrfHeaderName, xsrfValue);
            }
        }
        // Remove Content-Type if data is undefined
        requestData === undefined && requestHeaders.setContentType(null);
        // Add headers to the request
        if ("setRequestHeader" in request) {
            utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
                request.setRequestHeader(key, val);
            });
        }
        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) {
            request.withCredentials = !!config.withCredentials;
        }
        // Add responseType to request if needed
        if (responseType && responseType !== "json") {
            request.responseType = config.responseType;
        }
        // Handle progress if needed
        if (typeof config.onDownloadProgress === "function") {
            request.addEventListener("progress", progressEventReducer(config.onDownloadProgress, true));
        }
        // Not all browsers support upload events
        if (typeof config.onUploadProgress === "function" && request.upload) {
            request.upload.addEventListener("progress", progressEventReducer(config.onUploadProgress));
        }
        if (config.cancelToken || config.signal) {
            // Handle cancellation
            // eslint-disable-next-line func-names
            onCanceled = (cancel)=>{
                if (!request) {
                    return;
                }
                reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
                request.abort();
                request = null;
            };
            config.cancelToken && config.cancelToken.subscribe(onCanceled);
            if (config.signal) {
                config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
            }
        }
        const protocol = parseProtocol(fullPath);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
            reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
            return;
        }
        // Send the request
        request.send(requestData || null);
    });
};
const knownAdapters = {
    http: httpAdapter,
    xhr: xhrAdapter
};
utils.forEach(knownAdapters, (fn, value)=>{
    if (fn) {
        try {
            Object.defineProperty(fn, "name", {
                value
            });
        } catch (e) {
        // eslint-disable-next-line no-empty
        }
        Object.defineProperty(fn, "adapterName", {
            value
        });
    }
});
const adapters = {
    getAdapter: (adapters)=>{
        adapters = utils.isArray(adapters) ? adapters : [
            adapters
        ];
        const { length } = adapters;
        let nameOrAdapter;
        let adapter;
        for(let i = 0; i < length; i++){
            nameOrAdapter = adapters[i];
            if (adapter = utils.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) {
                break;
            }
        }
        if (!adapter) {
            if (adapter === false) {
                throw new AxiosError(`Adapter ${nameOrAdapter} is not supported by the environment`, "ERR_NOT_SUPPORT");
            }
            throw new Error(utils.hasOwnProp(knownAdapters, nameOrAdapter) ? `Adapter '${nameOrAdapter}' is not available in the build` : `Unknown adapter '${nameOrAdapter}'`);
        }
        if (!utils.isFunction(adapter)) {
            throw new TypeError("adapter is not a function");
        }
        return adapter;
    },
    adapters: knownAdapters
};
/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */ function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
    }
    if (config.signal && config.signal.aborted) {
        throw new CanceledError(null, config);
    }
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */ function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    config.headers = AxiosHeaders$1.from(config.headers);
    // Transform request data
    config.data = transformData.call(config, config.transformRequest);
    if ([
        "post",
        "put",
        "patch"
    ].indexOf(config.method) !== -1) {
        config.headers.setContentType("application/x-www-form-urlencoded", false);
    }
    const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
    return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        // Transform response data
        response.data = transformData.call(config, config.transformResponse, response);
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
    }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
            throwIfCancellationRequested(config);
            // Transform response data
            if (reason && reason.response) {
                reason.response.data = transformData.call(config, config.transformResponse, reason.response);
                reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
            }
        }
        return Promise.reject(reason);
    });
}
const headersToObject = (thing)=>thing instanceof AxiosHeaders$1 ? thing.toJSON() : thing;
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */ function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    const config = {};
    function getMergedValue(target, source, caseless) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
            return utils.merge.call({
                caseless
            }, target, source);
        } else if (utils.isPlainObject(source)) {
            return utils.merge({}, source);
        } else if (utils.isArray(source)) {
            return source.slice();
        }
        return source;
    }
    // eslint-disable-next-line consistent-return
    function mergeDeepProperties(a, b, caseless) {
        if (!utils.isUndefined(b)) {
            return getMergedValue(a, b, caseless);
        } else if (!utils.isUndefined(a)) {
            return getMergedValue(undefined, a, caseless);
        }
    }
    // eslint-disable-next-line consistent-return
    function valueFromConfig2(a, b) {
        if (!utils.isUndefined(b)) {
            return getMergedValue(undefined, b);
        }
    }
    // eslint-disable-next-line consistent-return
    function defaultToConfig2(a, b) {
        if (!utils.isUndefined(b)) {
            return getMergedValue(undefined, b);
        } else if (!utils.isUndefined(a)) {
            return getMergedValue(undefined, a);
        }
    }
    // eslint-disable-next-line consistent-return
    function mergeDirectKeys(a, b, prop) {
        if (prop in config2) {
            return getMergedValue(a, b);
        } else if (prop in config1) {
            return getMergedValue(undefined, a);
        }
    }
    const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b)=>mergeDeepProperties(headersToObject(a), headersToObject(b), true)
    };
    utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge(config1[prop], config2[prop], prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
}
const validators$1 = {};
// eslint-disable-next-line func-names
[
    "object",
    "boolean",
    "number",
    "function",
    "string",
    "symbol"
].forEach((type, i)=>{
    validators$1[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
    };
});
const deprecatedWarnings = {};
/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */ validators$1.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    // eslint-disable-next-line func-names
    return (value, opt, opts)=>{
        if (validator === false) {
            throw new AxiosError(formatMessage(opt, " has been removed" + (version ? " in " + version : "")), AxiosError.ERR_DEPRECATED);
        }
        if (version && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true;
            // eslint-disable-next-line no-console
            console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
        }
        return validator ? validator(value, opt, opts) : true;
    };
};
/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */ function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
    }
    const keys = Object.keys(options);
    let i = keys.length;
    while(i-- > 0){
        const opt = keys[i];
        const validator = schema[opt];
        if (validator) {
            const value = options[opt];
            const result = value === undefined || validator(value, opt, options);
            if (result !== true) {
                throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
            }
            continue;
        }
        if (allowUnknown !== true) {
            throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
    }
}
const validator = {
    assertOptions,
    validators: validators$1
};
const validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */ class Axios {
    constructor(instanceConfig){
        this.defaults = instanceConfig;
        this.interceptors = {
            request: new InterceptorManager$1(),
            response: new InterceptorManager$1()
        };
    }
    /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */ request(configOrUrl, config) {
        /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API
        if (typeof configOrUrl === "string") {
            config = config || {};
            config.url = configOrUrl;
        } else {
            config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional, paramsSerializer, headers } = config;
        if (transitional !== undefined) {
            validator.assertOptions(transitional, {
                silentJSONParsing: validators.transitional(validators.boolean),
                forcedJSONParsing: validators.transitional(validators.boolean),
                clarifyTimeoutError: validators.transitional(validators.boolean)
            }, false);
        }
        if (paramsSerializer != null) {
            if (utils.isFunction(paramsSerializer)) {
                config.paramsSerializer = {
                    serialize: paramsSerializer
                };
            } else {
                validator.assertOptions(paramsSerializer, {
                    encode: validators.function,
                    serialize: validators.function
                }, true);
            }
        }
        // Set config.method
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders;
        // Flatten headers
        contextHeaders = headers && utils.merge(headers.common, headers[config.method]);
        contextHeaders && utils.forEach([
            "delete",
            "get",
            "head",
            "post",
            "put",
            "patch",
            "common"
        ], (method)=>{
            delete headers[method];
        });
        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        // filter out skipped interceptors
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
            if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
                return;
            }
            synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
            requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
            responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
            const chain = [
                dispatchRequest.bind(this),
                undefined
            ];
            chain.unshift.apply(chain, requestInterceptorChain);
            chain.push.apply(chain, responseInterceptorChain);
            len = chain.length;
            promise = Promise.resolve(config);
            while(i < len){
                promise = promise.then(chain[i++], chain[i++]);
            }
            return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while(i < len){
            const onFulfilled = requestInterceptorChain[i++];
            const onRejected = requestInterceptorChain[i++];
            try {
                newConfig = onFulfilled(newConfig);
            } catch (error) {
                onRejected.call(this, error);
                break;
            }
        }
        try {
            promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
            return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while(i < len){
            promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
    }
    getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url);
        return buildURL(fullPath, config.params, config.paramsSerializer);
    }
}
// Provide aliases for supported request methods
utils.forEach([
    "delete",
    "get",
    "head",
    "options"
], function forEachMethodNoData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
            method,
            url,
            data: (config || {}).data
        }));
    };
});
utils.forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    /*eslint func-names:0*/ function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
            return this.request(mergeConfig(config || {}, {
                method,
                headers: isForm ? {
                    "Content-Type": "multipart/form-data"
                } : {},
                url,
                data
            }));
        };
    }
    Axios.prototype[method] = generateHTTPMethod();
    Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
const Axios$1 = Axios;
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */ class CancelToken {
    constructor(executor){
        if (typeof executor !== "function") {
            throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
            resolvePromise = resolve;
        });
        const token = this;
        // eslint-disable-next-line func-names
        this.promise.then((cancel)=>{
            if (!token._listeners) return;
            let i = token._listeners.length;
            while(i-- > 0){
                token._listeners[i](cancel);
            }
            token._listeners = null;
        });
        // eslint-disable-next-line func-names
        this.promise.then = (onfulfilled)=>{
            let _resolve;
            // eslint-disable-next-line func-names
            const promise = new Promise((resolve)=>{
                token.subscribe(resolve);
                _resolve = resolve;
            }).then(onfulfilled);
            promise.cancel = function reject() {
                token.unsubscribe(_resolve);
            };
            return promise;
        };
        executor(function cancel(message, config, request) {
            if (token.reason) {
                // Cancellation has already been requested
                return;
            }
            token.reason = new CanceledError(message, config, request);
            resolvePromise(token.reason);
        });
    }
    /**
   * Throws a `CanceledError` if cancellation has been requested.
   */ throwIfRequested() {
        if (this.reason) {
            throw this.reason;
        }
    }
    /**
   * Subscribe to the cancel signal
   */ subscribe(listener) {
        if (this.reason) {
            listener(this.reason);
            return;
        }
        if (this._listeners) {
            this._listeners.push(listener);
        } else {
            this._listeners = [
                listener
            ];
        }
    }
    /**
   * Unsubscribe from the cancel signal
   */ unsubscribe(listener) {
        if (!this._listeners) {
            return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
            this._listeners.splice(index, 1);
        }
    }
    /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */ static source() {
        let cancel;
        const token = new CancelToken(function executor(c) {
            cancel = c;
        });
        return {
            token,
            cancel
        };
    }
}
const CancelToken$1 = CancelToken;
/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */ function spread(callback) {
    return function wrap(arr) {
        return callback.apply(null, arr);
    };
}
/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */ function isAxiosError(payload) {
    return utils.isObject(payload) && payload.isAxiosError === true;
}
const HttpStatusCode = {
    Continue: 100,
    SwitchingProtocols: 101,
    Processing: 102,
    EarlyHints: 103,
    Ok: 200,
    Created: 201,
    Accepted: 202,
    NonAuthoritativeInformation: 203,
    NoContent: 204,
    ResetContent: 205,
    PartialContent: 206,
    MultiStatus: 207,
    AlreadyReported: 208,
    ImUsed: 226,
    MultipleChoices: 300,
    MovedPermanently: 301,
    Found: 302,
    SeeOther: 303,
    NotModified: 304,
    UseProxy: 305,
    Unused: 306,
    TemporaryRedirect: 307,
    PermanentRedirect: 308,
    BadRequest: 400,
    Unauthorized: 401,
    PaymentRequired: 402,
    Forbidden: 403,
    NotFound: 404,
    MethodNotAllowed: 405,
    NotAcceptable: 406,
    ProxyAuthenticationRequired: 407,
    RequestTimeout: 408,
    Conflict: 409,
    Gone: 410,
    LengthRequired: 411,
    PreconditionFailed: 412,
    PayloadTooLarge: 413,
    UriTooLong: 414,
    UnsupportedMediaType: 415,
    RangeNotSatisfiable: 416,
    ExpectationFailed: 417,
    ImATeapot: 418,
    MisdirectedRequest: 421,
    UnprocessableEntity: 422,
    Locked: 423,
    FailedDependency: 424,
    TooEarly: 425,
    UpgradeRequired: 426,
    PreconditionRequired: 428,
    TooManyRequests: 429,
    RequestHeaderFieldsTooLarge: 431,
    UnavailableForLegalReasons: 451,
    InternalServerError: 500,
    NotImplemented: 501,
    BadGateway: 502,
    ServiceUnavailable: 503,
    GatewayTimeout: 504,
    HttpVersionNotSupported: 505,
    VariantAlsoNegotiates: 506,
    InsufficientStorage: 507,
    LoopDetected: 508,
    NotExtended: 510,
    NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value])=>{
    HttpStatusCode[value] = key;
});
const HttpStatusCode$1 = HttpStatusCode;
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */ function createInstance(defaultConfig) {
    const context = new Axios$1(defaultConfig);
    const instance = bind(Axios$1.prototype.request, context);
    // Copy axios.prototype to instance
    utils.extend(instance, Axios$1.prototype, context, {
        allOwnKeys: true
    });
    // Copy context to instance
    utils.extend(instance, context, null, {
        allOwnKeys: true
    });
    // Factory for creating new instances
    instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
    return instance;
}
// Create the default instance to be exported
const axios = createInstance(defaults$1);
// Expose Axios class to allow class inheritance
axios.Axios = Axios$1;
// Expose Cancel & CancelToken
axios.CanceledError = CanceledError;
axios.CancelToken = CancelToken$1;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData;
// Expose AxiosError class
axios.AxiosError = AxiosError;
// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;
// Expose all/spread
axios.all = function all(promises) {
    return Promise.all(promises);
};
axios.spread = spread;
// Expose isAxiosError
axios.isAxiosError = isAxiosError;
// Expose mergeConfig
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders$1;
axios.formToJSON = (thing)=>formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.HttpStatusCode = HttpStatusCode$1;
axios.default = axios;
module.exports = axios; //# sourceMappingURL=axios.cjs.map


/***/ }),

/***/ 5173:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var pluginHtmlparser2 = __webpack_require__(6580);
var htmlparser2 = __webpack_require__(2326);
var selderee = __webpack_require__(8273);
var merge = __webpack_require__(7388);
var domSerializer = __webpack_require__(8408);
function _interopDefaultLegacy(e) {
    return e && typeof e === "object" && "default" in e ? e : {
        "default": e
    };
}
var merge__default = /*#__PURE__*/ _interopDefaultLegacy(merge);
/**
 * Make a recursive function that will only run to a given depth
 * and switches to an alternative function at that depth. \
 * No limitation if `n` is `undefined` (Just wraps `f` in that case).
 *
 * @param   { number | undefined } n   Allowed depth of recursion. `undefined` for no limitation.
 * @param   { Function }           f   Function that accepts recursive callback as the first argument.
 * @param   { Function }           [g] Function to run instead, when maximum depth was reached. Do nothing by default.
 * @returns { Function }
 */ function limitedDepthRecursive(n, f, g = ()=>undefined) {
    if (n === undefined) {
        const f1 = function(...args) {
            return f(f1, ...args);
        };
        return f1;
    }
    if (n >= 0) {
        return function(...args) {
            return f(limitedDepthRecursive(n - 1, f, g), ...args);
        };
    }
    return g;
}
/**
 * Return the same string or a substring with
 * the given character occurrences removed from each side.
 *
 * @param   { string } str  A string to trim.
 * @param   { string } char A character to be trimmed.
 * @returns { string }
 */ function trimCharacter(str, char) {
    let start = 0;
    let end = str.length;
    while(start < end && str[start] === char){
        ++start;
    }
    while(end > start && str[end - 1] === char){
        --end;
    }
    return start > 0 || end < str.length ? str.substring(start, end) : str;
}
/**
 * Return the same string or a substring with
 * the given character occurrences removed from the end only.
 *
 * @param   { string } str  A string to trim.
 * @param   { string } char A character to be trimmed.
 * @returns { string }
 */ function trimCharacterEnd(str, char) {
    let end = str.length;
    while(end > 0 && str[end - 1] === char){
        --end;
    }
    return end < str.length ? str.substring(0, end) : str;
}
/**
 * Return a new string will all characters replaced with unicode escape sequences.
 * This extreme kind of escaping can used to be safely compose regular expressions.
 *
 * @param { string } str A string to escape.
 * @returns { string } A string of unicode escape sequences.
 */ function unicodeEscape(str) {
    return str.replace(/[\s\S]/g, (c)=>"\\u" + c.charCodeAt().toString(16).padStart(4, "0"));
}
/**
 * Deduplicate an array by a given key callback.
 * Item properties are merged recursively and with the preference for last defined values.
 * Of items with the same key, merged item takes the place of the last item,
 * others are omitted.
 *
 * @param { any[] } items An array to deduplicate.
 * @param { (x: any) => string } getKey Callback to get a value that distinguishes unique items.
 * @returns { any[] }
 */ function mergeDuplicatesPreferLast(items, getKey) {
    const map = new Map();
    for(let i = items.length; i-- > 0;){
        const item = items[i];
        const key = getKey(item);
        map.set(key, map.has(key) ? merge__default["default"](item, map.get(key), {
            arrayMerge: overwriteMerge$1
        }) : item);
    }
    return [
        ...map.values()
    ].reverse();
}
const overwriteMerge$1 = (acc, src, options)=>[
        ...src
    ];
/**
 * Get a nested property from an object.
 *
 * @param   { object }   obj  The object to query for the value.
 * @param   { string[] } path The path to the property.
 * @returns { any }
 */ function get(obj, path) {
    for (const key of path){
        if (!obj) {
            return undefined;
        }
        obj = obj[key];
    }
    return obj;
}
/**
 * Convert a number into alphabetic sequence representation (Sequence without zeroes).
 *
 * For example: `a, ..., z, aa, ..., zz, aaa, ...`.
 *
 * @param   { number } num              Number to convert. Must be >= 1.
 * @param   { string } [baseChar = 'a'] Character for 1 in the sequence.
 * @param   { number } [base = 26]      Number of characters in the sequence.
 * @returns { string }
 */ function numberToLetterSequence(num, baseChar = "a", base = 26) {
    const digits = [];
    do {
        num -= 1;
        digits.push(num % base);
        num = num / base >> 0; // quick `floor`
    }while (num > 0);
    const baseCode = baseChar.charCodeAt(0);
    return digits.reverse().map((n)=>String.fromCharCode(baseCode + n)).join("");
}
const I = [
    "I",
    "X",
    "C",
    "M"
];
const V = [
    "V",
    "L",
    "D"
];
/**
 * Convert a number to it's Roman representation. No large numbers extension.
 *
 * @param   { number } num Number to convert. `0 < num <= 3999`.
 * @returns { string }
 */ function numberToRoman(num) {
    return [
        ...num + ""
    ].map((n)=>+n).reverse().map((v, i)=>v % 5 < 4 ? (v < 5 ? "" : V[i]) + I[i].repeat(v % 5) : I[i] + (v < 5 ? V[i] : I[i + 1])).reverse().join("");
}
/**
 * Helps to build text from words.
 */ class InlineTextBuilder {
    /**
   * Creates an instance of InlineTextBuilder.
   *
   * If `maxLineLength` is not provided then it is either `options.wordwrap` or unlimited.
   *
   * @param { Options } options           HtmlToText options.
   * @param { number }  [ maxLineLength ] This builder will try to wrap text to fit this line length.
   */ constructor(options, maxLineLength = undefined){
        /** @type { string[][] } */ this.lines = [];
        /** @type { string[] }   */ this.nextLineWords = [];
        this.maxLineLength = maxLineLength || options.wordwrap || Number.MAX_VALUE;
        this.nextLineAvailableChars = this.maxLineLength;
        this.wrapCharacters = get(options, [
            "longWordSplit",
            "wrapCharacters"
        ]) || [];
        this.forceWrapOnLimit = get(options, [
            "longWordSplit",
            "forceWrapOnLimit"
        ]) || false;
        this.stashedSpace = false;
        this.wordBreakOpportunity = false;
    }
    /**
   * Add a new word.
   *
   * @param { string } word A word to add.
   * @param { boolean } [noWrap] Don't wrap text even if the line is too long.
   */ pushWord(word, noWrap = false) {
        if (this.nextLineAvailableChars <= 0 && !noWrap) {
            this.startNewLine();
        }
        const isLineStart = this.nextLineWords.length === 0;
        const cost = word.length + (isLineStart ? 0 : 1);
        if (cost <= this.nextLineAvailableChars || noWrap) {
            this.nextLineWords.push(word);
            this.nextLineAvailableChars -= cost;
        } else {
            // The word is moved to a new line - prefer to wrap between words.
            const [first, ...rest] = this.splitLongWord(word);
            if (!isLineStart) {
                this.startNewLine();
            }
            this.nextLineWords.push(first);
            this.nextLineAvailableChars -= first.length;
            for (const part of rest){
                this.startNewLine();
                this.nextLineWords.push(part);
                this.nextLineAvailableChars -= part.length;
            }
        }
    }
    /**
   * Pop a word from the currently built line.
   * This doesn't affect completed lines.
   *
   * @returns { string }
   */ popWord() {
        const lastWord = this.nextLineWords.pop();
        if (lastWord !== undefined) {
            const isLineStart = this.nextLineWords.length === 0;
            const cost = lastWord.length + (isLineStart ? 0 : 1);
            this.nextLineAvailableChars += cost;
        }
        return lastWord;
    }
    /**
   * Concat a word to the last word already in the builder.
   * Adds a new word in case there are no words yet in the last line.
   *
   * @param { string } word A word to be concatenated.
   * @param { boolean } [noWrap] Don't wrap text even if the line is too long.
   */ concatWord(word, noWrap = false) {
        if (this.wordBreakOpportunity && word.length > this.nextLineAvailableChars) {
            this.pushWord(word, noWrap);
            this.wordBreakOpportunity = false;
        } else {
            const lastWord = this.popWord();
            this.pushWord(lastWord ? lastWord.concat(word) : word, noWrap);
        }
    }
    /**
   * Add current line (and more empty lines if provided argument > 1) to the list of complete lines and start a new one.
   *
   * @param { number } n Number of line breaks that will be added to the resulting string.
   */ startNewLine(n = 1) {
        this.lines.push(this.nextLineWords);
        if (n > 1) {
            this.lines.push(...Array.from({
                length: n - 1
            }, ()=>[]));
        }
        this.nextLineWords = [];
        this.nextLineAvailableChars = this.maxLineLength;
    }
    /**
   * No words in this builder.
   *
   * @returns { boolean }
   */ isEmpty() {
        return this.lines.length === 0 && this.nextLineWords.length === 0;
    }
    clear() {
        this.lines.length = 0;
        this.nextLineWords.length = 0;
        this.nextLineAvailableChars = this.maxLineLength;
    }
    /**
   * Join all lines of words inside the InlineTextBuilder into a complete string.
   *
   * @returns { string }
   */ toString() {
        return [
            ...this.lines,
            this.nextLineWords
        ].map((words)=>words.join(" ")).join("\n");
    }
    /**
   * Split a long word up to fit within the word wrap limit.
   * Use either a character to split looking back from the word wrap limit,
   * or truncate to the word wrap limit.
   *
   * @param   { string }   word Input word.
   * @returns { string[] }      Parts of the word.
   */ splitLongWord(word) {
        const parts = [];
        let idx = 0;
        while(word.length > this.maxLineLength){
            const firstLine = word.substring(0, this.maxLineLength);
            const remainingChars = word.substring(this.maxLineLength);
            const splitIndex = firstLine.lastIndexOf(this.wrapCharacters[idx]);
            if (splitIndex > -1) {
                word = firstLine.substring(splitIndex + 1) + remainingChars;
                parts.push(firstLine.substring(0, splitIndex + 1));
            } else {
                idx++;
                if (idx < this.wrapCharacters.length) {
                    word = firstLine + remainingChars;
                } else {
                    if (this.forceWrapOnLimit) {
                        parts.push(firstLine);
                        word = remainingChars;
                        if (word.length > this.maxLineLength) {
                            continue;
                        }
                    } else {
                        word = firstLine + remainingChars;
                    }
                    break;
                }
            }
        }
        parts.push(word); // Add remaining part to array
        return parts;
    }
}
/* eslint-disable max-classes-per-file */ class StackItem {
    constructor(next = null){
        this.next = next;
    }
    getRoot() {
        return this.next ? this.next : this;
    }
}
class BlockStackItem extends StackItem {
    constructor(options, next = null, leadingLineBreaks = 1, maxLineLength = undefined){
        super(next);
        this.leadingLineBreaks = leadingLineBreaks;
        this.inlineTextBuilder = new InlineTextBuilder(options, maxLineLength);
        this.rawText = "";
        this.stashedLineBreaks = 0;
        this.isPre = next && next.isPre;
        this.isNoWrap = next && next.isNoWrap;
    }
}
class ListStackItem extends BlockStackItem {
    constructor(options, next = null, { interRowLineBreaks = 1, leadingLineBreaks = 2, maxLineLength = undefined, maxPrefixLength = 0, prefixAlign = "left" } = {}){
        super(options, next, leadingLineBreaks, maxLineLength);
        this.maxPrefixLength = maxPrefixLength;
        this.prefixAlign = prefixAlign;
        this.interRowLineBreaks = interRowLineBreaks;
    }
}
class ListItemStackItem extends BlockStackItem {
    constructor(options, next = null, { leadingLineBreaks = 1, maxLineLength = undefined, prefix = "" } = {}){
        super(options, next, leadingLineBreaks, maxLineLength);
        this.prefix = prefix;
    }
}
class TableStackItem extends StackItem {
    constructor(next = null){
        super(next);
        this.rows = [];
        this.isPre = next && next.isPre;
        this.isNoWrap = next && next.isNoWrap;
    }
}
class TableRowStackItem extends StackItem {
    constructor(next = null){
        super(next);
        this.cells = [];
        this.isPre = next && next.isPre;
        this.isNoWrap = next && next.isNoWrap;
    }
}
class TableCellStackItem extends StackItem {
    constructor(options, next = null, maxColumnWidth = undefined){
        super(next);
        this.inlineTextBuilder = new InlineTextBuilder(options, maxColumnWidth);
        this.rawText = "";
        this.stashedLineBreaks = 0;
        this.isPre = next && next.isPre;
        this.isNoWrap = next && next.isNoWrap;
    }
}
class TransformerStackItem extends StackItem {
    constructor(next = null, transform){
        super(next);
        this.transform = transform;
    }
}
function charactersToCodes(str) {
    return [
        ...str
    ].map((c)=>"\\u" + c.charCodeAt(0).toString(16).padStart(4, "0")).join("");
}
/**
 * Helps to handle HTML whitespaces.
 *
 * @class WhitespaceProcessor
 */ class WhitespaceProcessor {
    /**
   * Creates an instance of WhitespaceProcessor.
   *
   * @param { Options } options    HtmlToText options.
   * @memberof WhitespaceProcessor
   */ constructor(options){
        this.whitespaceChars = options.preserveNewlines ? options.whitespaceCharacters.replace(/\n/g, "") : options.whitespaceCharacters;
        const whitespaceCodes = charactersToCodes(this.whitespaceChars);
        this.leadingWhitespaceRe = new RegExp(`^[${whitespaceCodes}]`);
        this.trailingWhitespaceRe = new RegExp(`[${whitespaceCodes}]$`);
        this.allWhitespaceOrEmptyRe = new RegExp(`^[${whitespaceCodes}]*$`);
        this.newlineOrNonWhitespaceRe = new RegExp(`(\\n|[^\\n${whitespaceCodes}])`, "g");
        this.newlineOrNonNewlineStringRe = new RegExp(`(\\n|[^\\n]+)`, "g");
        if (options.preserveNewlines) {
            const wordOrNewlineRe = new RegExp(`\\n|[^\\n${whitespaceCodes}]+`, "gm");
            /**
       * Shrink whitespaces and wrap text, add to the builder.
       *
       * @param { string }                  text              Input text.
       * @param { InlineTextBuilder }       inlineTextBuilder A builder to receive processed text.
       * @param { (str: string) => string } [ transform ]     A transform to be applied to words.
       * @param { boolean }                 [noWrap] Don't wrap text even if the line is too long.
       */ this.shrinkWrapAdd = function(text, inlineTextBuilder, transform = (str)=>str, noWrap = false) {
                if (!text) {
                    return;
                }
                const previouslyStashedSpace = inlineTextBuilder.stashedSpace;
                let anyMatch = false;
                let m = wordOrNewlineRe.exec(text);
                if (m) {
                    anyMatch = true;
                    if (m[0] === "\n") {
                        inlineTextBuilder.startNewLine();
                    } else if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {
                        inlineTextBuilder.pushWord(transform(m[0]), noWrap);
                    } else {
                        inlineTextBuilder.concatWord(transform(m[0]), noWrap);
                    }
                    while((m = wordOrNewlineRe.exec(text)) !== null){
                        if (m[0] === "\n") {
                            inlineTextBuilder.startNewLine();
                        } else {
                            inlineTextBuilder.pushWord(transform(m[0]), noWrap);
                        }
                    }
                }
                inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch || this.testTrailingWhitespace(text);
            // No need to stash a space in case last added item was a new line,
            // but that won't affect anything later anyway.
            };
        } else {
            const wordRe = new RegExp(`[^${whitespaceCodes}]+`, "g");
            this.shrinkWrapAdd = function(text, inlineTextBuilder, transform = (str)=>str, noWrap = false) {
                if (!text) {
                    return;
                }
                const previouslyStashedSpace = inlineTextBuilder.stashedSpace;
                let anyMatch = false;
                let m = wordRe.exec(text);
                if (m) {
                    anyMatch = true;
                    if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {
                        inlineTextBuilder.pushWord(transform(m[0]), noWrap);
                    } else {
                        inlineTextBuilder.concatWord(transform(m[0]), noWrap);
                    }
                    while((m = wordRe.exec(text)) !== null){
                        inlineTextBuilder.pushWord(transform(m[0]), noWrap);
                    }
                }
                inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch || this.testTrailingWhitespace(text);
            };
        }
    }
    /**
   * Add text with only minimal processing.
   * Everything between newlines considered a single word.
   * No whitespace is trimmed.
   * Not affected by preserveNewlines option - `\n` always starts a new line.
   *
   * `noWrap` argument is `true` by default - this won't start a new line
   * even if there is not enough space left in the current line.
   *
   * @param { string }            text              Input text.
   * @param { InlineTextBuilder } inlineTextBuilder A builder to receive processed text.
   * @param { boolean }           [noWrap] Don't wrap text even if the line is too long.
   */ addLiteral(text, inlineTextBuilder, noWrap = true) {
        if (!text) {
            return;
        }
        const previouslyStashedSpace = inlineTextBuilder.stashedSpace;
        let anyMatch = false;
        let m = this.newlineOrNonNewlineStringRe.exec(text);
        if (m) {
            anyMatch = true;
            if (m[0] === "\n") {
                inlineTextBuilder.startNewLine();
            } else if (previouslyStashedSpace) {
                inlineTextBuilder.pushWord(m[0], noWrap);
            } else {
                inlineTextBuilder.concatWord(m[0], noWrap);
            }
            while((m = this.newlineOrNonNewlineStringRe.exec(text)) !== null){
                if (m[0] === "\n") {
                    inlineTextBuilder.startNewLine();
                } else {
                    inlineTextBuilder.pushWord(m[0], noWrap);
                }
            }
        }
        inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch;
    }
    /**
   * Test whether the given text starts with HTML whitespace character.
   *
   * @param   { string }  text  The string to test.
   * @returns { boolean }
   */ testLeadingWhitespace(text) {
        return this.leadingWhitespaceRe.test(text);
    }
    /**
   * Test whether the given text ends with HTML whitespace character.
   *
   * @param   { string }  text  The string to test.
   * @returns { boolean }
   */ testTrailingWhitespace(text) {
        return this.trailingWhitespaceRe.test(text);
    }
    /**
   * Test whether the given text contains any non-whitespace characters.
   *
   * @param   { string }  text  The string to test.
   * @returns { boolean }
   */ testContainsWords(text) {
        return !this.allWhitespaceOrEmptyRe.test(text);
    }
    /**
   * Return the number of newlines if there are no words.
   *
   * If any word is found then return zero regardless of the actual number of newlines.
   *
   * @param   { string }  text  Input string.
   * @returns { number }
   */ countNewlinesNoWords(text) {
        this.newlineOrNonWhitespaceRe.lastIndex = 0;
        let counter = 0;
        let match;
        while((match = this.newlineOrNonWhitespaceRe.exec(text)) !== null){
            if (match[0] === "\n") {
                counter++;
            } else {
                return 0;
            }
        }
        return counter;
    }
}
/**
 * Helps to build text from inline and block elements.
 *
 * @class BlockTextBuilder
 */ class BlockTextBuilder {
    /**
   * Creates an instance of BlockTextBuilder.
   *
   * @param { Options } options HtmlToText options.
   * @param { import('selderee').Picker<DomNode, TagDefinition> } picker Selectors decision tree picker.
   * @param { any} [metadata] Optional metadata for HTML document, for use in formatters.
   */ constructor(options, picker, metadata = undefined){
        this.options = options;
        this.picker = picker;
        this.metadata = metadata;
        this.whitespaceProcessor = new WhitespaceProcessor(options);
        /** @type { StackItem } */ this._stackItem = new BlockStackItem(options);
        /** @type { TransformerStackItem } */ this._wordTransformer = undefined;
    }
    /**
   * Put a word-by-word transform function onto the transformations stack.
   *
   * Mainly used for uppercasing. Can be bypassed to add unformatted text such as URLs.
   *
   * Word transformations applied before wrapping.
   *
   * @param { (str: string) => string } wordTransform Word transformation function.
   */ pushWordTransform(wordTransform) {
        this._wordTransformer = new TransformerStackItem(this._wordTransformer, wordTransform);
    }
    /**
   * Remove a function from the word transformations stack.
   *
   * @returns { (str: string) => string } A function that was removed.
   */ popWordTransform() {
        if (!this._wordTransformer) {
            return undefined;
        }
        const transform = this._wordTransformer.transform;
        this._wordTransformer = this._wordTransformer.next;
        return transform;
    }
    /**
   * Ignore wordwrap option in followup inline additions and disable automatic wrapping.
   */ startNoWrap() {
        this._stackItem.isNoWrap = true;
    }
    /**
   * Return automatic wrapping to behavior defined by options.
   */ stopNoWrap() {
        this._stackItem.isNoWrap = false;
    }
    /** @returns { (str: string) => string } */ _getCombinedWordTransformer() {
        const wt = this._wordTransformer ? (str)=>applyTransformer(str, this._wordTransformer) : undefined;
        const ce = this.options.encodeCharacters;
        return wt ? ce ? (str)=>ce(wt(str)) : wt : ce;
    }
    _popStackItem() {
        const item = this._stackItem;
        this._stackItem = item.next;
        return item;
    }
    /**
   * Add a line break into currently built block.
   */ addLineBreak() {
        if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof ListItemStackItem || this._stackItem instanceof TableCellStackItem)) {
            return;
        }
        if (this._stackItem.isPre) {
            this._stackItem.rawText += "\n";
        } else {
            this._stackItem.inlineTextBuilder.startNewLine();
        }
    }
    /**
   * Allow to break line in case directly following text will not fit.
   */ addWordBreakOpportunity() {
        if (this._stackItem instanceof BlockStackItem || this._stackItem instanceof ListItemStackItem || this._stackItem instanceof TableCellStackItem) {
            this._stackItem.inlineTextBuilder.wordBreakOpportunity = true;
        }
    }
    /**
   * Add a node inline into the currently built block.
   *
   * @param { string } str
   * Text content of a node to add.
   *
   * @param { object } [param1]
   * Object holding the parameters of the operation.
   *
   * @param { boolean } [param1.noWordTransform]
   * Ignore word transformers if there are any.
   * Don't encode characters as well.
   * (Use this for things like URL addresses).
   */ addInline(str, { noWordTransform = false } = {}) {
        if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof ListItemStackItem || this._stackItem instanceof TableCellStackItem)) {
            return;
        }
        if (this._stackItem.isPre) {
            this._stackItem.rawText += str;
            return;
        }
        if (str.length === 0 || // empty string
        this._stackItem.stashedLineBreaks && // stashed linebreaks make whitespace irrelevant
        !this.whitespaceProcessor.testContainsWords(str) // no words to add
        ) {
            return;
        }
        if (this.options.preserveNewlines) {
            const newlinesNumber = this.whitespaceProcessor.countNewlinesNoWords(str);
            if (newlinesNumber > 0) {
                this._stackItem.inlineTextBuilder.startNewLine(newlinesNumber);
                // keep stashedLineBreaks unchanged
                return;
            }
        }
        if (this._stackItem.stashedLineBreaks) {
            this._stackItem.inlineTextBuilder.startNewLine(this._stackItem.stashedLineBreaks);
        }
        this.whitespaceProcessor.shrinkWrapAdd(str, this._stackItem.inlineTextBuilder, noWordTransform ? undefined : this._getCombinedWordTransformer(), this._stackItem.isNoWrap);
        this._stackItem.stashedLineBreaks = 0; // inline text doesn't introduce line breaks
    }
    /**
   * Add a string inline into the currently built block.
   *
   * Use this for markup elements that don't have to adhere
   * to text layout rules.
   *
   * @param { string } str Text to add.
   */ addLiteral(str) {
        if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof ListItemStackItem || this._stackItem instanceof TableCellStackItem)) {
            return;
        }
        if (str.length === 0) {
            return;
        }
        if (this._stackItem.isPre) {
            this._stackItem.rawText += str;
            return;
        }
        if (this._stackItem.stashedLineBreaks) {
            this._stackItem.inlineTextBuilder.startNewLine(this._stackItem.stashedLineBreaks);
        }
        this.whitespaceProcessor.addLiteral(str, this._stackItem.inlineTextBuilder, this._stackItem.isNoWrap);
        this._stackItem.stashedLineBreaks = 0;
    }
    /**
   * Start building a new block.
   *
   * @param { object } [param0]
   * Object holding the parameters of the block.
   *
   * @param { number } [param0.leadingLineBreaks]
   * This block should have at least this number of line breaks to separate it from any preceding block.
   *
   * @param { number }  [param0.reservedLineLength]
   * Reserve this number of characters on each line for block markup.
   *
   * @param { boolean } [param0.isPre]
   * Should HTML whitespace be preserved inside this block.
   */ openBlock({ leadingLineBreaks = 1, reservedLineLength = 0, isPre = false } = {}) {
        const maxLineLength = Math.max(20, this._stackItem.inlineTextBuilder.maxLineLength - reservedLineLength);
        this._stackItem = new BlockStackItem(this.options, this._stackItem, leadingLineBreaks, maxLineLength);
        if (isPre) {
            this._stackItem.isPre = true;
        }
    }
    /**
   * Finalize currently built block, add it's content to the parent block.
   *
   * @param { object } [param0]
   * Object holding the parameters of the block.
   *
   * @param { number } [param0.trailingLineBreaks]
   * This block should have at least this number of line breaks to separate it from any following block.
   *
   * @param { (str: string) => string } [param0.blockTransform]
   * A function to transform the block text before adding to the parent block.
   * This happens after word wrap and should be used in combination with reserved line length
   * in order to keep line lengths correct.
   * Used for whole block markup.
   */ closeBlock({ trailingLineBreaks = 1, blockTransform = undefined } = {}) {
        const block = this._popStackItem();
        const blockText = blockTransform ? blockTransform(getText(block)) : getText(block);
        addText(this._stackItem, blockText, block.leadingLineBreaks, Math.max(block.stashedLineBreaks, trailingLineBreaks));
    }
    /**
   * Start building a new list.
   *
   * @param { object } [param0]
   * Object holding the parameters of the list.
   *
   * @param { number } [param0.maxPrefixLength]
   * Length of the longest list item prefix.
   * If not supplied or too small then list items won't be aligned properly.
   *
   * @param { 'left' | 'right' } [param0.prefixAlign]
   * Specify how prefixes of different lengths have to be aligned
   * within a column.
   *
   * @param { number } [param0.interRowLineBreaks]
   * Minimum number of line breaks between list items.
   *
   * @param { number } [param0.leadingLineBreaks]
   * This list should have at least this number of line breaks to separate it from any preceding block.
   */ openList({ maxPrefixLength = 0, prefixAlign = "left", interRowLineBreaks = 1, leadingLineBreaks = 2 } = {}) {
        this._stackItem = new ListStackItem(this.options, this._stackItem, {
            interRowLineBreaks: interRowLineBreaks,
            leadingLineBreaks: leadingLineBreaks,
            maxLineLength: this._stackItem.inlineTextBuilder.maxLineLength,
            maxPrefixLength: maxPrefixLength,
            prefixAlign: prefixAlign
        });
    }
    /**
   * Start building a new list item.
   *
   * @param {object} param0
   * Object holding the parameters of the list item.
   *
   * @param { string } [param0.prefix]
   * Prefix for this list item (item number, bullet point, etc).
   */ openListItem({ prefix = "" } = {}) {
        if (!(this._stackItem instanceof ListStackItem)) {
            throw new Error("Can't add a list item to something that is not a list! Check the formatter.");
        }
        const list = this._stackItem;
        const prefixLength = Math.max(prefix.length, list.maxPrefixLength);
        const maxLineLength = Math.max(20, list.inlineTextBuilder.maxLineLength - prefixLength);
        this._stackItem = new ListItemStackItem(this.options, list, {
            prefix: prefix,
            maxLineLength: maxLineLength,
            leadingLineBreaks: list.interRowLineBreaks
        });
    }
    /**
   * Finalize currently built list item, add it's content to the parent list.
   */ closeListItem() {
        const listItem = this._popStackItem();
        const list = listItem.next;
        const prefixLength = Math.max(listItem.prefix.length, list.maxPrefixLength);
        const spacing = "\n" + " ".repeat(prefixLength);
        const prefix = list.prefixAlign === "right" ? listItem.prefix.padStart(prefixLength) : listItem.prefix.padEnd(prefixLength);
        const text = prefix + getText(listItem).replace(/\n/g, spacing);
        addText(list, text, listItem.leadingLineBreaks, Math.max(listItem.stashedLineBreaks, list.interRowLineBreaks));
    }
    /**
   * Finalize currently built list, add it's content to the parent block.
   *
   * @param { object } param0
   * Object holding the parameters of the list.
   *
   * @param { number } [param0.trailingLineBreaks]
   * This list should have at least this number of line breaks to separate it from any following block.
   */ closeList({ trailingLineBreaks = 2 } = {}) {
        const list = this._popStackItem();
        const text = getText(list);
        if (text) {
            addText(this._stackItem, text, list.leadingLineBreaks, trailingLineBreaks);
        }
    }
    /**
   * Start building a table.
   */ openTable() {
        this._stackItem = new TableStackItem(this._stackItem);
    }
    /**
   * Start building a table row.
   */ openTableRow() {
        if (!(this._stackItem instanceof TableStackItem)) {
            throw new Error("Can't add a table row to something that is not a table! Check the formatter.");
        }
        this._stackItem = new TableRowStackItem(this._stackItem);
    }
    /**
   * Start building a table cell.
   *
   * @param { object } [param0]
   * Object holding the parameters of the cell.
   *
   * @param { number } [param0.maxColumnWidth]
   * Wrap cell content to this width. Fall back to global wordwrap value if undefined.
   */ openTableCell({ maxColumnWidth = undefined } = {}) {
        if (!(this._stackItem instanceof TableRowStackItem)) {
            throw new Error("Can't add a table cell to something that is not a table row! Check the formatter.");
        }
        this._stackItem = new TableCellStackItem(this.options, this._stackItem, maxColumnWidth);
    }
    /**
   * Finalize currently built table cell and add it to parent table row's cells.
   *
   * @param { object } [param0]
   * Object holding the parameters of the cell.
   *
   * @param { number } [param0.colspan] How many columns this cell should occupy.
   * @param { number } [param0.rowspan] How many rows this cell should occupy.
   */ closeTableCell({ colspan = 1, rowspan = 1 } = {}) {
        const cell = this._popStackItem();
        const text = trimCharacter(getText(cell), "\n");
        cell.next.cells.push({
            colspan: colspan,
            rowspan: rowspan,
            text: text
        });
    }
    /**
   * Finalize currently built table row and add it to parent table's rows.
   */ closeTableRow() {
        const row = this._popStackItem();
        row.next.rows.push(row.cells);
    }
    /**
   * Finalize currently built table and add the rendered text to the parent block.
   *
   * @param { object } param0
   * Object holding the parameters of the table.
   *
   * @param { TablePrinter } param0.tableToString
   * A function to convert a table of stringified cells into a complete table.
   *
   * @param { number } [param0.leadingLineBreaks]
   * This table should have at least this number of line breaks to separate if from any preceding block.
   *
   * @param { number } [param0.trailingLineBreaks]
   * This table should have at least this number of line breaks to separate it from any following block.
   */ closeTable({ tableToString, leadingLineBreaks = 2, trailingLineBreaks = 2 }) {
        const table = this._popStackItem();
        const output = tableToString(table.rows);
        if (output) {
            addText(this._stackItem, output, leadingLineBreaks, trailingLineBreaks);
        }
    }
    /**
   * Return the rendered text content of this builder.
   *
   * @returns { string }
   */ toString() {
        return getText(this._stackItem.getRoot());
    // There should only be the root item if everything is closed properly.
    }
}
function getText(stackItem) {
    if (!(stackItem instanceof BlockStackItem || stackItem instanceof ListItemStackItem || stackItem instanceof TableCellStackItem)) {
        throw new Error("Only blocks, list items and table cells can be requested for text contents.");
    }
    return stackItem.inlineTextBuilder.isEmpty() ? stackItem.rawText : stackItem.rawText + stackItem.inlineTextBuilder.toString();
}
function addText(stackItem, text, leadingLineBreaks, trailingLineBreaks) {
    if (!(stackItem instanceof BlockStackItem || stackItem instanceof ListItemStackItem || stackItem instanceof TableCellStackItem)) {
        throw new Error("Only blocks, list items and table cells can contain text.");
    }
    const parentText = getText(stackItem);
    const lineBreaks = Math.max(stackItem.stashedLineBreaks, leadingLineBreaks);
    stackItem.inlineTextBuilder.clear();
    if (parentText) {
        stackItem.rawText = parentText + "\n".repeat(lineBreaks) + text;
    } else {
        stackItem.rawText = text;
        stackItem.leadingLineBreaks = lineBreaks;
    }
    stackItem.stashedLineBreaks = trailingLineBreaks;
}
/**
 * @param { string } str A string to transform.
 * @param { TransformerStackItem } transformer A transformer item (with possible continuation).
 * @returns { string }
 */ function applyTransformer(str, transformer) {
    return transformer ? applyTransformer(transformer.transform(str), transformer.next) : str;
}
/**
 * Compile selectors into a decision tree,
 * return a function intended for batch processing.
 *
 * @param   { Options } [options = {}]   HtmlToText options (defaults, formatters, user options merged, deduplicated).
 * @returns { (html: string, metadata?: any) => string } Pre-configured converter function.
 * @static
 */ function compile$1(options = {}) {
    const selectorsWithoutFormat = options.selectors.filter((s)=>!s.format);
    if (selectorsWithoutFormat.length) {
        throw new Error("Following selectors have no specified format: " + selectorsWithoutFormat.map((s)=>`\`${s.selector}\``).join(", "));
    }
    const picker = new selderee.DecisionTree(options.selectors.map((s)=>[
            s.selector,
            s
        ])).build(pluginHtmlparser2.hp2Builder);
    if (typeof options.encodeCharacters !== "function") {
        options.encodeCharacters = makeReplacerFromDict(options.encodeCharacters);
    }
    const baseSelectorsPicker = new selderee.DecisionTree(options.baseElements.selectors.map((s, i)=>[
            s,
            i + 1
        ])).build(pluginHtmlparser2.hp2Builder);
    function findBaseElements(dom) {
        return findBases(dom, options, baseSelectorsPicker);
    }
    const limitedWalk = limitedDepthRecursive(options.limits.maxDepth, recursiveWalk, function(dom, builder) {
        builder.addInline(options.limits.ellipsis || "");
    });
    return function(html, metadata = undefined) {
        return process(html, metadata, options, picker, findBaseElements, limitedWalk);
    };
}
/**
 * Convert given HTML according to preprocessed options.
 *
 * @param { string } html HTML content to convert.
 * @param { any } metadata Optional metadata for HTML document, for use in formatters.
 * @param { Options } options HtmlToText options (preprocessed).
 * @param { import('selderee').Picker<DomNode, TagDefinition> } picker
 * Tag definition picker for DOM nodes processing.
 * @param { (dom: DomNode[]) => DomNode[] } findBaseElements
 * Function to extract elements from HTML DOM
 * that will only be present in the output text.
 * @param { RecursiveCallback } walk Recursive callback.
 * @returns { string }
 */ function process(html, metadata, options, picker, findBaseElements, walk) {
    const maxInputLength = options.limits.maxInputLength;
    if (maxInputLength && html && html.length > maxInputLength) {
        console.warn(`Input length ${html.length} is above allowed limit of ${maxInputLength}. Truncating without ellipsis.`);
        html = html.substring(0, maxInputLength);
    }
    const document = htmlparser2.parseDocument(html, {
        decodeEntities: options.decodeEntities
    });
    const bases = findBaseElements(document.children);
    const builder = new BlockTextBuilder(options, picker, metadata);
    walk(bases, builder);
    return builder.toString();
}
function findBases(dom, options, baseSelectorsPicker) {
    const results = [];
    function recursiveWalk(walk, /** @type { DomNode[] } */ dom) {
        dom = dom.slice(0, options.limits.maxChildNodes);
        for (const elem of dom){
            if (elem.type !== "tag") {
                continue;
            }
            const pickedSelectorIndex = baseSelectorsPicker.pick1(elem);
            if (pickedSelectorIndex > 0) {
                results.push({
                    selectorIndex: pickedSelectorIndex,
                    element: elem
                });
            } else if (elem.children) {
                walk(elem.children);
            }
            if (results.length >= options.limits.maxBaseElements) {
                return;
            }
        }
    }
    const limitedWalk = limitedDepthRecursive(options.limits.maxDepth, recursiveWalk);
    limitedWalk(dom);
    if (options.baseElements.orderBy !== "occurrence") {
        results.sort((a, b)=>a.selectorIndex - b.selectorIndex);
    }
    return options.baseElements.returnDomByDefault && results.length === 0 ? dom : results.map((x)=>x.element);
}
/**
 * Function to walk through DOM nodes and accumulate their string representations.
 *
 * @param   { RecursiveCallback } walk    Recursive callback.
 * @param   { DomNode[] }         [dom]   Nodes array to process.
 * @param   { BlockTextBuilder }  builder Passed around to accumulate output text.
 * @private
 */ function recursiveWalk(walk, dom, builder) {
    if (!dom) {
        return;
    }
    const options = builder.options;
    const tooManyChildNodes = dom.length > options.limits.maxChildNodes;
    if (tooManyChildNodes) {
        dom = dom.slice(0, options.limits.maxChildNodes);
        dom.push({
            data: options.limits.ellipsis,
            type: "text"
        });
    }
    for (const elem of dom){
        switch(elem.type){
            case "text":
                {
                    builder.addInline(elem.data);
                    break;
                }
            case "tag":
                {
                    const tagDefinition = builder.picker.pick1(elem);
                    const format = options.formatters[tagDefinition.format];
                    format(elem, walk, builder, tagDefinition.options || {});
                    break;
                }
        }
    }
    return;
}
/**
 * @param { Object<string,string | false> } dict
 * A dictionary where keys are characters to replace
 * and values are replacement strings.
 *
 * First code point from dict keys is used.
 * Compound emojis with ZWJ are not supported (not until Node 16).
 *
 * @returns { ((str: string) => string) | undefined }
 */ function makeReplacerFromDict(dict) {
    if (!dict || Object.keys(dict).length === 0) {
        return undefined;
    }
    /** @type { [string, string][] } */ const entries = Object.entries(dict).filter(([, v])=>v !== false);
    const regex = new RegExp(entries.map(([c])=>`(${unicodeEscape([
            ...c
        ][0])})`).join("|"), "g");
    const values = entries.map(([, v])=>v);
    const replacer = (m, ...cgs)=>values[cgs.findIndex((cg)=>cg)];
    return (str)=>str.replace(regex, replacer);
}
/**
 * Dummy formatter that discards the input and does nothing.
 *
 * @type { FormatCallback }
 */ function formatSkip(elem, walk, builder, formatOptions) {
/* do nothing */ }
/**
 * Insert the given string literal inline instead of a tag.
 *
 * @type { FormatCallback }
 */ function formatInlineString(elem, walk, builder, formatOptions) {
    builder.addLiteral(formatOptions.string || "");
}
/**
 * Insert a block with the given string literal instead of a tag.
 *
 * @type { FormatCallback }
 */ function formatBlockString(elem, walk, builder, formatOptions) {
    builder.openBlock({
        leadingLineBreaks: formatOptions.leadingLineBreaks || 2
    });
    builder.addLiteral(formatOptions.string || "");
    builder.closeBlock({
        trailingLineBreaks: formatOptions.trailingLineBreaks || 2
    });
}
/**
 * Process an inline-level element.
 *
 * @type { FormatCallback }
 */ function formatInline(elem, walk, builder, formatOptions) {
    walk(elem.children, builder);
}
/**
 * Process a block-level container.
 *
 * @type { FormatCallback }
 */ function formatBlock$1(elem, walk, builder, formatOptions) {
    builder.openBlock({
        leadingLineBreaks: formatOptions.leadingLineBreaks || 2
    });
    walk(elem.children, builder);
    builder.closeBlock({
        trailingLineBreaks: formatOptions.trailingLineBreaks || 2
    });
}
function renderOpenTag(elem) {
    const attrs = elem.attribs && elem.attribs.length ? " " + Object.entries(elem.attribs).map(([k, v])=>v === "" ? k : `${k}=${v.replace(/"/g, "&quot;")}`).join(" ") : "";
    return `<${elem.name}${attrs}>`;
}
function renderCloseTag(elem) {
    return `</${elem.name}>`;
}
/**
 * Render an element as inline HTML tag, walk through it's children.
 *
 * @type { FormatCallback }
 */ function formatInlineTag(elem, walk, builder, formatOptions) {
    builder.startNoWrap();
    builder.addLiteral(renderOpenTag(elem));
    builder.stopNoWrap();
    walk(elem.children, builder);
    builder.startNoWrap();
    builder.addLiteral(renderCloseTag(elem));
    builder.stopNoWrap();
}
/**
 * Render an element as HTML block bag, walk through it's children.
 *
 * @type { FormatCallback }
 */ function formatBlockTag(elem, walk, builder, formatOptions) {
    builder.openBlock({
        leadingLineBreaks: formatOptions.leadingLineBreaks || 2
    });
    builder.startNoWrap();
    builder.addLiteral(renderOpenTag(elem));
    builder.stopNoWrap();
    walk(elem.children, builder);
    builder.startNoWrap();
    builder.addLiteral(renderCloseTag(elem));
    builder.stopNoWrap();
    builder.closeBlock({
        trailingLineBreaks: formatOptions.trailingLineBreaks || 2
    });
}
/**
 * Render an element with all it's children as inline HTML.
 *
 * @type { FormatCallback }
 */ function formatInlineHtml(elem, walk, builder, formatOptions) {
    builder.startNoWrap();
    builder.addLiteral(domSerializer.render(elem, {
        decodeEntities: builder.options.decodeEntities
    }));
    builder.stopNoWrap();
}
/**
 * Render an element with all it's children as HTML block.
 *
 * @type { FormatCallback }
 */ function formatBlockHtml(elem, walk, builder, formatOptions) {
    builder.openBlock({
        leadingLineBreaks: formatOptions.leadingLineBreaks || 2
    });
    builder.startNoWrap();
    builder.addLiteral(domSerializer.render(elem, {
        decodeEntities: builder.options.decodeEntities
    }));
    builder.stopNoWrap();
    builder.closeBlock({
        trailingLineBreaks: formatOptions.trailingLineBreaks || 2
    });
}
/**
 * Render inline element wrapped with given strings.
 *
 * @type { FormatCallback }
 */ function formatInlineSurround(elem, walk, builder, formatOptions) {
    builder.addLiteral(formatOptions.prefix || "");
    walk(elem.children, builder);
    builder.addLiteral(formatOptions.suffix || "");
}
var genericFormatters = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    block: formatBlock$1,
    blockHtml: formatBlockHtml,
    blockString: formatBlockString,
    blockTag: formatBlockTag,
    inline: formatInline,
    inlineHtml: formatInlineHtml,
    inlineString: formatInlineString,
    inlineSurround: formatInlineSurround,
    inlineTag: formatInlineTag,
    skip: formatSkip
});
function getRow(matrix, j) {
    if (!matrix[j]) {
        matrix[j] = [];
    }
    return matrix[j];
}
function findFirstVacantIndex(row, x = 0) {
    while(row[x]){
        x++;
    }
    return x;
}
function transposeInPlace(matrix, maxSize) {
    for(let i = 0; i < maxSize; i++){
        const rowI = getRow(matrix, i);
        for(let j = 0; j < i; j++){
            const rowJ = getRow(matrix, j);
            const temp = rowI[j];
            rowI[j] = rowJ[i];
            rowJ[i] = temp;
        }
    }
}
function putCellIntoLayout(cell, layout, baseRow, baseCol) {
    for(let r = 0; r < cell.rowspan; r++){
        const layoutRow = getRow(layout, baseRow + r);
        for(let c = 0; c < cell.colspan; c++){
            layoutRow[baseCol + c] = cell;
        }
    }
}
function updateOffset(offsets, base, span, value) {
    offsets[base + span] = Math.max(offsets[base + span] || 0, offsets[base] + value);
}
/**
 * Render a table into a string.
 * Cells can contain multiline text and span across multiple rows and columns.
 *
 * Modifies cells to add lines array.
 *
 * @param { TablePrinterCell[][] } tableRows Table to render.
 * @param { number } rowSpacing Number of spaces between columns.
 * @param { number } colSpacing Number of empty lines between rows.
 * @returns { string }
 */ function tableToString(tableRows, rowSpacing, colSpacing) {
    const layout = [];
    let colNumber = 0;
    const rowNumber = tableRows.length;
    const rowOffsets = [
        0
    ];
    // Fill the layout table and row offsets row-by-row.
    for(let j = 0; j < rowNumber; j++){
        const layoutRow = getRow(layout, j);
        const cells = tableRows[j];
        let x = 0;
        for(let i = 0; i < cells.length; i++){
            const cell = cells[i];
            x = findFirstVacantIndex(layoutRow, x);
            putCellIntoLayout(cell, layout, j, x);
            x += cell.colspan;
            cell.lines = cell.text.split("\n");
            const cellHeight = cell.lines.length;
            updateOffset(rowOffsets, j, cell.rowspan, cellHeight + rowSpacing);
        }
        colNumber = layoutRow.length > colNumber ? layoutRow.length : colNumber;
    }
    transposeInPlace(layout, rowNumber > colNumber ? rowNumber : colNumber);
    const outputLines = [];
    const colOffsets = [
        0
    ];
    // Fill column offsets and output lines column-by-column.
    for(let x = 0; x < colNumber; x++){
        let y = 0;
        let cell;
        while(y < rowNumber && (cell = layout[x][y])){
            if (!cell.rendered) {
                let cellWidth = 0;
                for(let j = 0; j < cell.lines.length; j++){
                    const line = cell.lines[j];
                    const lineOffset = rowOffsets[y] + j;
                    outputLines[lineOffset] = (outputLines[lineOffset] || "").padEnd(colOffsets[x]) + line;
                    cellWidth = line.length > cellWidth ? line.length : cellWidth;
                }
                updateOffset(colOffsets, x, cell.colspan, cellWidth + colSpacing);
                cell.rendered = true;
            }
            y += cell.rowspan;
        }
    }
    return outputLines.join("\n");
}
/**
 * Process a line-break.
 *
 * @type { FormatCallback }
 */ function formatLineBreak(elem, walk, builder, formatOptions) {
    builder.addLineBreak();
}
/**
 * Process a `wbr` tag (word break opportunity).
 *
 * @type { FormatCallback }
 */ function formatWbr(elem, walk, builder, formatOptions) {
    builder.addWordBreakOpportunity();
}
/**
 * Process a horizontal line.
 *
 * @type { FormatCallback }
 */ function formatHorizontalLine(elem, walk, builder, formatOptions) {
    builder.openBlock({
        leadingLineBreaks: formatOptions.leadingLineBreaks || 2
    });
    builder.addInline("-".repeat(formatOptions.length || builder.options.wordwrap || 40));
    builder.closeBlock({
        trailingLineBreaks: formatOptions.trailingLineBreaks || 2
    });
}
/**
 * Process a paragraph.
 *
 * @type { FormatCallback }
 */ function formatParagraph(elem, walk, builder, formatOptions) {
    builder.openBlock({
        leadingLineBreaks: formatOptions.leadingLineBreaks || 2
    });
    walk(elem.children, builder);
    builder.closeBlock({
        trailingLineBreaks: formatOptions.trailingLineBreaks || 2
    });
}
/**
 * Process a preformatted content.
 *
 * @type { FormatCallback }
 */ function formatPre(elem, walk, builder, formatOptions) {
    builder.openBlock({
        isPre: true,
        leadingLineBreaks: formatOptions.leadingLineBreaks || 2
    });
    walk(elem.children, builder);
    builder.closeBlock({
        trailingLineBreaks: formatOptions.trailingLineBreaks || 2
    });
}
/**
 * Process a heading.
 *
 * @type { FormatCallback }
 */ function formatHeading(elem, walk, builder, formatOptions) {
    builder.openBlock({
        leadingLineBreaks: formatOptions.leadingLineBreaks || 2
    });
    if (formatOptions.uppercase !== false) {
        builder.pushWordTransform((str)=>str.toUpperCase());
        walk(elem.children, builder);
        builder.popWordTransform();
    } else {
        walk(elem.children, builder);
    }
    builder.closeBlock({
        trailingLineBreaks: formatOptions.trailingLineBreaks || 2
    });
}
/**
 * Process a blockquote.
 *
 * @type { FormatCallback }
 */ function formatBlockquote(elem, walk, builder, formatOptions) {
    builder.openBlock({
        leadingLineBreaks: formatOptions.leadingLineBreaks || 2,
        reservedLineLength: 2
    });
    walk(elem.children, builder);
    builder.closeBlock({
        trailingLineBreaks: formatOptions.trailingLineBreaks || 2,
        blockTransform: (str)=>(formatOptions.trimEmptyLines !== false ? trimCharacter(str, "\n") : str).split("\n").map((line)=>"> " + line).join("\n")
    });
}
function withBrackets(str, brackets) {
    if (!brackets) {
        return str;
    }
    const lbr = typeof brackets[0] === "string" ? brackets[0] : "[";
    const rbr = typeof brackets[1] === "string" ? brackets[1] : "]";
    return lbr + str + rbr;
}
function pathRewrite(path, rewriter, baseUrl, metadata, elem) {
    const modifiedPath = typeof rewriter === "function" ? rewriter(path, metadata, elem) : path;
    return modifiedPath[0] === "/" && baseUrl ? trimCharacterEnd(baseUrl, "/") + modifiedPath : modifiedPath;
}
/**
 * Process an image.
 *
 * @type { FormatCallback }
 */ function formatImage(elem, walk, builder, formatOptions) {
    const attribs = elem.attribs || {};
    const alt = attribs.alt ? attribs.alt : "";
    const src = !attribs.src ? "" : pathRewrite(attribs.src, formatOptions.pathRewrite, formatOptions.baseUrl, builder.metadata, elem);
    const text = !src ? alt : !alt ? withBrackets(src, formatOptions.linkBrackets) : alt + " " + withBrackets(src, formatOptions.linkBrackets);
    builder.addInline(text, {
        noWordTransform: true
    });
}
/**
 * Process an anchor.
 *
 * @type { FormatCallback }
 */ function formatAnchor(elem, walk, builder, formatOptions) {
    function getHref() {
        if (formatOptions.ignoreHref) {
            return "";
        }
        if (!elem.attribs || !elem.attribs.href) {
            return "";
        }
        let href = elem.attribs.href.replace(/^mailto:/, "");
        if (formatOptions.noAnchorUrl && href[0] === "#") {
            return "";
        }
        href = pathRewrite(href, formatOptions.pathRewrite, formatOptions.baseUrl, builder.metadata, elem);
        return href;
    }
    const href = getHref();
    if (!href) {
        walk(elem.children, builder);
    } else {
        let text = "";
        builder.pushWordTransform((str)=>{
            if (str) {
                text += str;
            }
            return str;
        });
        walk(elem.children, builder);
        builder.popWordTransform();
        const hideSameLink = formatOptions.hideLinkHrefIfSameAsText && href === text;
        if (!hideSameLink) {
            builder.addInline(!text ? href : " " + withBrackets(href, formatOptions.linkBrackets), {
                noWordTransform: true
            });
        }
    }
}
/**
 * @param { DomNode }           elem               List items with their prefixes.
 * @param { RecursiveCallback } walk               Recursive callback to process child nodes.
 * @param { BlockTextBuilder }  builder            Passed around to accumulate output text.
 * @param { FormatOptions }     formatOptions      Options specific to a formatter.
 * @param { () => string }      nextPrefixCallback Function that returns increasing index each time it is called.
 */ function formatList(elem, walk, builder, formatOptions, nextPrefixCallback) {
    const isNestedList = get(elem, [
        "parent",
        "name"
    ]) === "li";
    // With Roman numbers, index length is not as straightforward as with Arabic numbers or letters,
    // so the dumb length comparison is the most robust way to get the correct value.
    let maxPrefixLength = 0;
    const listItems = (elem.children || [])// it might be more accurate to check only for html spaces here, but no significant benefit
    .filter((child)=>child.type !== "text" || !/^\s*$/.test(child.data)).map(function(child) {
        if (child.name !== "li") {
            return {
                node: child,
                prefix: ""
            };
        }
        const prefix = isNestedList ? nextPrefixCallback().trimStart() : nextPrefixCallback();
        if (prefix.length > maxPrefixLength) {
            maxPrefixLength = prefix.length;
        }
        return {
            node: child,
            prefix: prefix
        };
    });
    if (!listItems.length) {
        return;
    }
    builder.openList({
        interRowLineBreaks: 1,
        leadingLineBreaks: isNestedList ? 1 : formatOptions.leadingLineBreaks || 2,
        maxPrefixLength: maxPrefixLength,
        prefixAlign: "left"
    });
    for (const { node, prefix } of listItems){
        builder.openListItem({
            prefix: prefix
        });
        walk([
            node
        ], builder);
        builder.closeListItem();
    }
    builder.closeList({
        trailingLineBreaks: isNestedList ? 1 : formatOptions.trailingLineBreaks || 2
    });
}
/**
 * Process an unordered list.
 *
 * @type { FormatCallback }
 */ function formatUnorderedList(elem, walk, builder, formatOptions) {
    const prefix = formatOptions.itemPrefix || " * ";
    return formatList(elem, walk, builder, formatOptions, ()=>prefix);
}
/**
 * Process an ordered list.
 *
 * @type { FormatCallback }
 */ function formatOrderedList(elem, walk, builder, formatOptions) {
    let nextIndex = Number(elem.attribs.start || "1");
    const indexFunction = getOrderedListIndexFunction(elem.attribs.type);
    const nextPrefixCallback = ()=>" " + indexFunction(nextIndex++) + ". ";
    return formatList(elem, walk, builder, formatOptions, nextPrefixCallback);
}
/**
 * Return a function that can be used to generate index markers of a specified format.
 *
 * @param   { string } [olType='1'] Marker type.
 * @returns { (i: number) => string }
 */ function getOrderedListIndexFunction(olType = "1") {
    switch(olType){
        case "a":
            return (i)=>numberToLetterSequence(i, "a");
        case "A":
            return (i)=>numberToLetterSequence(i, "A");
        case "i":
            return (i)=>numberToRoman(i).toLowerCase();
        case "I":
            return (i)=>numberToRoman(i);
        case "1":
        default:
            return (i)=>i.toString();
    }
}
/**
 * Given a list of class and ID selectors (prefixed with '.' and '#'),
 * return them as separate lists of names without prefixes.
 *
 * @param { string[] } selectors Class and ID selectors (`[".class", "#id"]` etc).
 * @returns { { classes: string[], ids: string[] } }
 */ function splitClassesAndIds(selectors) {
    const classes = [];
    const ids = [];
    for (const selector of selectors){
        if (selector.startsWith(".")) {
            classes.push(selector.substring(1));
        } else if (selector.startsWith("#")) {
            ids.push(selector.substring(1));
        }
    }
    return {
        classes: classes,
        ids: ids
    };
}
function isDataTable(attr, tables) {
    if (tables === true) {
        return true;
    }
    if (!attr) {
        return false;
    }
    const { classes, ids } = splitClassesAndIds(tables);
    const attrClasses = (attr["class"] || "").split(" ");
    const attrIds = (attr["id"] || "").split(" ");
    return attrClasses.some((x)=>classes.includes(x)) || attrIds.some((x)=>ids.includes(x));
}
/**
 * Process a table (either as a container or as a data table, depending on options).
 *
 * @type { FormatCallback }
 */ function formatTable(elem, walk, builder, formatOptions) {
    return isDataTable(elem.attribs, builder.options.tables) ? formatDataTable(elem, walk, builder, formatOptions) : formatBlock(elem, walk, builder, formatOptions);
}
function formatBlock(elem, walk, builder, formatOptions) {
    builder.openBlock({
        leadingLineBreaks: formatOptions.leadingLineBreaks
    });
    walk(elem.children, builder);
    builder.closeBlock({
        trailingLineBreaks: formatOptions.trailingLineBreaks
    });
}
/**
 * Process a data table.
 *
 * @type { FormatCallback }
 */ function formatDataTable(elem, walk, builder, formatOptions) {
    builder.openTable();
    elem.children.forEach(walkTable);
    builder.closeTable({
        tableToString: (rows)=>tableToString(rows, formatOptions.rowSpacing ?? 0, formatOptions.colSpacing ?? 3),
        leadingLineBreaks: formatOptions.leadingLineBreaks,
        trailingLineBreaks: formatOptions.trailingLineBreaks
    });
    function formatCell(cellNode) {
        const colspan = +get(cellNode, [
            "attribs",
            "colspan"
        ]) || 1;
        const rowspan = +get(cellNode, [
            "attribs",
            "rowspan"
        ]) || 1;
        builder.openTableCell({
            maxColumnWidth: formatOptions.maxColumnWidth
        });
        walk(cellNode.children, builder);
        builder.closeTableCell({
            colspan: colspan,
            rowspan: rowspan
        });
    }
    function walkTable(elem) {
        if (elem.type !== "tag") {
            return;
        }
        const formatHeaderCell = formatOptions.uppercaseHeaderCells !== false ? (cellNode)=>{
            builder.pushWordTransform((str)=>str.toUpperCase());
            formatCell(cellNode);
            builder.popWordTransform();
        } : formatCell;
        switch(elem.name){
            case "thead":
            case "tbody":
            case "tfoot":
            case "center":
                elem.children.forEach(walkTable);
                return;
            case "tr":
                {
                    builder.openTableRow();
                    for (const childOfTr of elem.children){
                        if (childOfTr.type !== "tag") {
                            continue;
                        }
                        switch(childOfTr.name){
                            case "th":
                                {
                                    formatHeaderCell(childOfTr);
                                    break;
                                }
                            case "td":
                                {
                                    formatCell(childOfTr);
                                    break;
                                }
                        }
                    }
                    builder.closeTableRow();
                    break;
                }
        }
    }
}
var textFormatters = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    anchor: formatAnchor,
    blockquote: formatBlockquote,
    dataTable: formatDataTable,
    heading: formatHeading,
    horizontalLine: formatHorizontalLine,
    image: formatImage,
    lineBreak: formatLineBreak,
    orderedList: formatOrderedList,
    paragraph: formatParagraph,
    pre: formatPre,
    table: formatTable,
    unorderedList: formatUnorderedList,
    wbr: formatWbr
});
/**
 * Default options.
 *
 * @constant
 * @type { Options }
 * @default
 * @private
 */ const DEFAULT_OPTIONS = {
    baseElements: {
        selectors: [
            "body"
        ],
        orderBy: "selectors",
        returnDomByDefault: true
    },
    decodeEntities: true,
    encodeCharacters: {},
    formatters: {},
    limits: {
        ellipsis: "...",
        maxBaseElements: undefined,
        maxChildNodes: undefined,
        maxDepth: undefined,
        maxInputLength: 1 << 24 // 16_777_216
    },
    longWordSplit: {
        forceWrapOnLimit: false,
        wrapCharacters: []
    },
    preserveNewlines: false,
    selectors: [
        {
            selector: "*",
            format: "inline"
        },
        {
            selector: "a",
            format: "anchor",
            options: {
                baseUrl: null,
                hideLinkHrefIfSameAsText: false,
                ignoreHref: false,
                linkBrackets: [
                    "[",
                    "]"
                ],
                noAnchorUrl: true
            }
        },
        {
            selector: "article",
            format: "block",
            options: {
                leadingLineBreaks: 1,
                trailingLineBreaks: 1
            }
        },
        {
            selector: "aside",
            format: "block",
            options: {
                leadingLineBreaks: 1,
                trailingLineBreaks: 1
            }
        },
        {
            selector: "blockquote",
            format: "blockquote",
            options: {
                leadingLineBreaks: 2,
                trailingLineBreaks: 2,
                trimEmptyLines: true
            }
        },
        {
            selector: "br",
            format: "lineBreak"
        },
        {
            selector: "div",
            format: "block",
            options: {
                leadingLineBreaks: 1,
                trailingLineBreaks: 1
            }
        },
        {
            selector: "footer",
            format: "block",
            options: {
                leadingLineBreaks: 1,
                trailingLineBreaks: 1
            }
        },
        {
            selector: "form",
            format: "block",
            options: {
                leadingLineBreaks: 1,
                trailingLineBreaks: 1
            }
        },
        {
            selector: "h1",
            format: "heading",
            options: {
                leadingLineBreaks: 3,
                trailingLineBreaks: 2,
                uppercase: true
            }
        },
        {
            selector: "h2",
            format: "heading",
            options: {
                leadingLineBreaks: 3,
                trailingLineBreaks: 2,
                uppercase: true
            }
        },
        {
            selector: "h3",
            format: "heading",
            options: {
                leadingLineBreaks: 3,
                trailingLineBreaks: 2,
                uppercase: true
            }
        },
        {
            selector: "h4",
            format: "heading",
            options: {
                leadingLineBreaks: 2,
                trailingLineBreaks: 2,
                uppercase: true
            }
        },
        {
            selector: "h5",
            format: "heading",
            options: {
                leadingLineBreaks: 2,
                trailingLineBreaks: 2,
                uppercase: true
            }
        },
        {
            selector: "h6",
            format: "heading",
            options: {
                leadingLineBreaks: 2,
                trailingLineBreaks: 2,
                uppercase: true
            }
        },
        {
            selector: "header",
            format: "block",
            options: {
                leadingLineBreaks: 1,
                trailingLineBreaks: 1
            }
        },
        {
            selector: "hr",
            format: "horizontalLine",
            options: {
                leadingLineBreaks: 2,
                length: undefined,
                trailingLineBreaks: 2
            }
        },
        {
            selector: "img",
            format: "image",
            options: {
                baseUrl: null,
                linkBrackets: [
                    "[",
                    "]"
                ]
            }
        },
        {
            selector: "main",
            format: "block",
            options: {
                leadingLineBreaks: 1,
                trailingLineBreaks: 1
            }
        },
        {
            selector: "nav",
            format: "block",
            options: {
                leadingLineBreaks: 1,
                trailingLineBreaks: 1
            }
        },
        {
            selector: "ol",
            format: "orderedList",
            options: {
                leadingLineBreaks: 2,
                trailingLineBreaks: 2
            }
        },
        {
            selector: "p",
            format: "paragraph",
            options: {
                leadingLineBreaks: 2,
                trailingLineBreaks: 2
            }
        },
        {
            selector: "pre",
            format: "pre",
            options: {
                leadingLineBreaks: 2,
                trailingLineBreaks: 2
            }
        },
        {
            selector: "section",
            format: "block",
            options: {
                leadingLineBreaks: 1,
                trailingLineBreaks: 1
            }
        },
        {
            selector: "table",
            format: "table",
            options: {
                colSpacing: 3,
                leadingLineBreaks: 2,
                maxColumnWidth: 60,
                rowSpacing: 0,
                trailingLineBreaks: 2,
                uppercaseHeaderCells: true
            }
        },
        {
            selector: "ul",
            format: "unorderedList",
            options: {
                itemPrefix: " * ",
                leadingLineBreaks: 2,
                trailingLineBreaks: 2
            }
        },
        {
            selector: "wbr",
            format: "wbr"
        }
    ],
    tables: [],
    whitespaceCharacters: " 	\r\n\f​",
    wordwrap: 80
};
const concatMerge = (acc, src, options)=>[
        ...acc,
        ...src
    ];
const overwriteMerge = (acc, src, options)=>[
        ...src
    ];
const selectorsMerge = (acc, src, options)=>acc.some((s)=>typeof s === "object") ? concatMerge(acc, src) // selectors
     : overwriteMerge(acc, src) // baseElements.selectors
;
/**
 * Preprocess options, compile selectors into a decision tree,
 * return a function intended for batch processing.
 *
 * @param   { Options } [options = {}]   HtmlToText options.
 * @returns { (html: string, metadata?: any) => string } Pre-configured converter function.
 * @static
 */ function compile(options = {}) {
    options = merge__default["default"](DEFAULT_OPTIONS, options, {
        arrayMerge: overwriteMerge,
        customMerge: (key)=>key === "selectors" ? selectorsMerge : undefined
    });
    options.formatters = Object.assign({}, genericFormatters, textFormatters, options.formatters);
    options.selectors = mergeDuplicatesPreferLast(options.selectors, (s)=>s.selector);
    handleDeprecatedOptions(options);
    return compile$1(options);
}
/**
 * Convert given HTML content to plain text string.
 *
 * @param   { string }  html           HTML content to convert.
 * @param   { Options } [options = {}] HtmlToText options.
 * @param   { any }     [metadata]     Optional metadata for HTML document, for use in formatters.
 * @returns { string }                 Plain text string.
 * @static
 *
 * @example
 * const { convert } = require('html-to-text');
 * const text = convert('<h1>Hello World</h1>', {
 *   wordwrap: 130
 * });
 * console.log(text); // HELLO WORLD
 */ function convert(html, options = {}, metadata = undefined) {
    return compile(options)(html, metadata);
}
/**
 * Map previously existing and now deprecated options to the new options layout.
 * This is a subject for cleanup in major releases.
 *
 * @param { Options } options HtmlToText options.
 */ function handleDeprecatedOptions(options) {
    if (options.tags) {
        const tagDefinitions = Object.entries(options.tags).map(([selector, definition])=>({
                ...definition,
                selector: selector || "*"
            }));
        options.selectors.push(...tagDefinitions);
        options.selectors = mergeDuplicatesPreferLast(options.selectors, (s)=>s.selector);
    }
    function set(obj, path, value) {
        const valueKey = path.pop();
        for (const key of path){
            let nested = obj[key];
            if (!nested) {
                nested = {};
                obj[key] = nested;
            }
            obj = nested;
        }
        obj[valueKey] = value;
    }
    if (options["baseElement"]) {
        const baseElement = options["baseElement"];
        set(options, [
            "baseElements",
            "selectors"
        ], Array.isArray(baseElement) ? baseElement : [
            baseElement
        ]);
    }
    if (options["returnDomByDefault"] !== undefined) {
        set(options, [
            "baseElements",
            "returnDomByDefault"
        ], options["returnDomByDefault"]);
    }
    for (const definition of options.selectors){
        if (definition.format === "anchor" && get(definition, [
            "options",
            "noLinkBrackets"
        ])) {
            set(definition, [
                "options",
                "linkBrackets"
            ], false);
        }
    }
}
exports.compile = compile;
exports.convert = convert;
exports.htmlToText = convert;


/***/ }),

/***/ 9835:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: !0
}));
const e = /\n/g;
function t(t) {
    const o = [
        ...t.matchAll(e)
    ].map((e)=>e.index || 0);
    o.unshift(-1);
    const s = n(o, 0, o.length);
    return (e)=>r(s, e);
}
function n(e, t, r) {
    if (r - t == 1) return {
        offset: e[t],
        index: t + 1
    };
    const o = Math.ceil((t + r) / 2), s = n(e, t, o), l = n(e, o, r);
    return {
        offset: s.offset,
        low: s,
        high: l
    };
}
function r(e, t) {
    return function(e) {
        return Object.prototype.hasOwnProperty.call(e, "index");
    }(e) ? {
        line: e.index,
        column: t - e.offset
    } : r(e.high.offset < t ? e.high : e.low, t);
}
function o(e, t) {
    return {
        ...e,
        regex: s(e, t)
    };
}
function s(e, t) {
    if (0 === e.name.length) throw new Error(`Rule #${t} has empty name, which is not allowed.`);
    if (function(e) {
        return Object.prototype.hasOwnProperty.call(e, "regex");
    }(e)) return function(e) {
        if (e.global) throw new Error(`Regular expression /${e.source}/${e.flags} contains the global flag, which is not allowed.`);
        return e.sticky ? e : new RegExp(e.source, e.flags + "y");
    }(e.regex);
    if (function(e) {
        return Object.prototype.hasOwnProperty.call(e, "str");
    }(e)) {
        if (0 === e.str.length) throw new Error(`Rule #${t} ("${e.name}") has empty "str" property, which is not allowed.`);
        return new RegExp(l(e.str), "y");
    }
    return new RegExp(l(e.name), "y");
}
function l(e) {
    return e.replace(/[-[\]{}()*+!<=:?./\\^$|#\s,]/g, "\\$&");
}
exports.createLexer = function(e, n = "", r = {}) {
    const s = "string" != typeof n ? n : r, l = "string" == typeof n ? n : "", c = e.map(o), i = !!s.lineNumbers;
    return function(e, n = 0) {
        const r = i ? t(e) : ()=>({
                line: 0,
                column: 0
            });
        let o = n;
        const s = [];
        e: for(; o < e.length;){
            let t = !1;
            for (const n of c){
                n.regex.lastIndex = o;
                const c = n.regex.exec(e);
                if (c && c[0].length > 0) {
                    if (!n.discard) {
                        const e = r(o), t = "string" == typeof n.replace ? c[0].replace(new RegExp(n.regex.source, n.regex.flags), n.replace) : c[0];
                        s.push({
                            state: l,
                            name: n.name,
                            text: t,
                            offset: o,
                            len: c[0].length,
                            line: e.line,
                            column: e.column
                        });
                    }
                    if (o = n.regex.lastIndex, t = !0, n.push) {
                        const t = n.push(e, o);
                        s.push(...t.tokens), o = t.offset;
                    }
                    if (n.pop) break e;
                    break;
                }
            }
            if (!t) break;
        }
        return {
            tokens: s,
            offset: o,
            complete: e.length <= o
        };
    };
};


/***/ }),

/***/ 2831:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var leac = __webpack_require__(9835);
var p = __webpack_require__(1524);
function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function(k) {
            if (k !== "default") {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function() {
                        return e[k];
                    }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}
var p__namespace = /*#__PURE__*/ _interopNamespace(p);
var ast = /*#__PURE__*/ Object.freeze({
    __proto__: null
});
const lex = leac.createLexer([
    {
        name: "ws",
        regex: /[ \t\r\n\f]+/
    },
    {
        name: "idn",
        regex: /[a-zA-Z_-][a-zA-Z0-9_-]*/
    },
    {
        name: "#id",
        regex: /#[a-zA-Z0-9_-]+/
    },
    {
        name: "str1",
        regex: /'(?:\\['\\]|[^\n'\\])*'/
    },
    {
        name: "str2",
        regex: /"(?:\\["\\]|[^\n"\\])*"/
    },
    {
        name: "*"
    },
    {
        name: "."
    },
    {
        name: ","
    },
    {
        name: "["
    },
    {
        name: "]"
    },
    {
        name: "="
    },
    {
        name: ">"
    },
    {
        name: "|"
    },
    {
        name: "+"
    },
    {
        name: "~"
    },
    {
        name: "^"
    },
    {
        name: "$"
    }
]);
function sumSpec([a0, a1, a2], [b0, b1, b2]) {
    return [
        a0 + b0,
        a1 + b1,
        a2 + b2
    ];
}
function sumAllSpec(ss) {
    return ss.reduce(sumSpec, [
        0,
        0,
        0
    ]);
}
function literal(name) {
    return p__namespace.token((t)=>t.name === name ? true : undefined);
}
const whitespace_ = p__namespace.token((t)=>t.name === "ws" ? null : undefined);
const optionalWhitespace_ = p__namespace.option(whitespace_, null);
function optionallySpaced(parser) {
    return p__namespace.middle(optionalWhitespace_, parser, optionalWhitespace_);
}
const identifier_ = p__namespace.token((t)=>t.name === "idn" ? t.text : undefined);
const hashId_ = p__namespace.token((t)=>t.name === "#id" ? t.text.slice(1) : undefined);
const string_ = p__namespace.token((t)=>t.name.startsWith("str") ? t.text.slice(1, -1) : undefined);
const namespace_ = p__namespace.left(p__namespace.option(identifier_, ""), literal("|"));
const qualifiedName_ = p__namespace.eitherOr(p__namespace.ab(namespace_, identifier_, (ns, name)=>({
        name: name,
        namespace: ns
    })), p__namespace.map(identifier_, (name)=>({
        name: name,
        namespace: null
    })));
const uniSelector_ = p__namespace.eitherOr(p__namespace.ab(namespace_, literal("*"), (ns)=>({
        type: "universal",
        namespace: ns,
        specificity: [
            0,
            0,
            0
        ]
    })), p__namespace.map(literal("*"), ()=>({
        type: "universal",
        namespace: null,
        specificity: [
            0,
            0,
            0
        ]
    })));
const tagSelector_ = p__namespace.map(qualifiedName_, ({ name, namespace })=>({
        type: "tag",
        name: name,
        namespace: namespace,
        specificity: [
            0,
            0,
            1
        ]
    }));
const classSelector_ = p__namespace.ab(literal("."), identifier_, (fullstop, name)=>({
        type: "class",
        name: name,
        specificity: [
            0,
            1,
            0
        ]
    }));
const idSelector_ = p__namespace.map(hashId_, (name)=>({
        type: "id",
        name: name,
        specificity: [
            1,
            0,
            0
        ]
    }));
const attrModifier_ = p__namespace.token((t)=>{
    if (t.name === "idn") {
        if (t.text === "i" || t.text === "I") {
            return "i";
        }
        if (t.text === "s" || t.text === "S") {
            return "s";
        }
    }
    return undefined;
});
const attrValue_ = p__namespace.eitherOr(p__namespace.ab(string_, p__namespace.option(p__namespace.right(optionalWhitespace_, attrModifier_), null), (v, mod)=>({
        value: v,
        modifier: mod
    })), p__namespace.ab(identifier_, p__namespace.option(p__namespace.right(whitespace_, attrModifier_), null), (v, mod)=>({
        value: v,
        modifier: mod
    })));
const attrMatcher_ = p__namespace.choice(p__namespace.map(literal("="), ()=>"="), p__namespace.ab(literal("~"), literal("="), ()=>"~="), p__namespace.ab(literal("|"), literal("="), ()=>"|="), p__namespace.ab(literal("^"), literal("="), ()=>"^="), p__namespace.ab(literal("$"), literal("="), ()=>"$="), p__namespace.ab(literal("*"), literal("="), ()=>"*="));
const attrPresenceSelector_ = p__namespace.abc(literal("["), optionallySpaced(qualifiedName_), literal("]"), (lbr, { name, namespace })=>({
        type: "attrPresence",
        name: name,
        namespace: namespace,
        specificity: [
            0,
            1,
            0
        ]
    }));
const attrValueSelector_ = p__namespace.middle(literal("["), p__namespace.abc(optionallySpaced(qualifiedName_), attrMatcher_, optionallySpaced(attrValue_), ({ name, namespace }, matcher, { value, modifier })=>({
        type: "attrValue",
        name: name,
        namespace: namespace,
        matcher: matcher,
        value: value,
        modifier: modifier,
        specificity: [
            0,
            1,
            0
        ]
    })), literal("]"));
const attrSelector_ = p__namespace.eitherOr(attrPresenceSelector_, attrValueSelector_);
const typeSelector_ = p__namespace.eitherOr(uniSelector_, tagSelector_);
const subclassSelector_ = p__namespace.choice(idSelector_, classSelector_, attrSelector_);
const compoundSelector_ = p__namespace.map(p__namespace.eitherOr(p__namespace.flatten(typeSelector_, p__namespace.many(subclassSelector_)), p__namespace.many1(subclassSelector_)), (ss)=>{
    return {
        type: "compound",
        list: ss,
        specificity: sumAllSpec(ss.map((s)=>s.specificity))
    };
});
const combinator_ = p__namespace.choice(p__namespace.map(literal(">"), ()=>">"), p__namespace.map(literal("+"), ()=>"+"), p__namespace.map(literal("~"), ()=>"~"), p__namespace.ab(literal("|"), literal("|"), ()=>"||"));
const combinatorSeparator_ = p__namespace.eitherOr(optionallySpaced(combinator_), p__namespace.map(whitespace_, ()=>" "));
const complexSelector_ = p__namespace.leftAssoc2(compoundSelector_, p__namespace.map(combinatorSeparator_, (c)=>(left, right)=>({
            type: "compound",
            list: [
                ...right.list,
                {
                    type: "combinator",
                    combinator: c,
                    left: left,
                    specificity: left.specificity
                }
            ],
            specificity: sumSpec(left.specificity, right.specificity)
        })), compoundSelector_);
const listSelector_ = p__namespace.leftAssoc2(p__namespace.map(complexSelector_, (s)=>({
        type: "list",
        list: [
            s
        ]
    })), p__namespace.map(optionallySpaced(literal(",")), ()=>(acc, next)=>({
            type: "list",
            list: [
                ...acc.list,
                next
            ]
        })), complexSelector_);
function parse_(parser, str) {
    const lexerResult = lex(str);
    if (!lexerResult.complete) {
        throw new Error(`The input "${str}" was only partially tokenized, stopped at offset ${lexerResult.offset}!\n` + prettyPrintPosition(str, lexerResult.offset));
    }
    const result = optionallySpaced(parser)({
        tokens: lexerResult.tokens,
        options: undefined
    }, 0);
    if (!result.matched) {
        throw new Error(`No match for "${str}" input!`);
    }
    if (result.position < lexerResult.tokens.length) {
        const token = lexerResult.tokens[result.position];
        throw new Error(`The input "${str}" was only partially parsed, stopped at offset ${token.offset}!\n` + prettyPrintPosition(str, token.offset, token.len));
    }
    return result.value;
}
function prettyPrintPosition(str, offset, len = 1) {
    return `${str.replace(/(\t)|(\r)|(\n)/g, (m, t, r)=>t ? "␉" : r ? "␍" : "␊")}\n${"".padEnd(offset)}${"^".repeat(len)}`;
}
function parse(str) {
    return parse_(listSelector_, str);
}
function parse1(str) {
    return parse_(complexSelector_, str);
}
function serialize(selector) {
    if (!selector.type) {
        throw new Error("This is not an AST node.");
    }
    switch(selector.type){
        case "universal":
            return _serNs(selector.namespace) + "*";
        case "tag":
            return _serNs(selector.namespace) + selector.name;
        case "class":
            return "." + selector.name;
        case "id":
            return "#" + selector.name;
        case "attrPresence":
            return `[${_serNs(selector.namespace)}${selector.name}]`;
        case "attrValue":
            return `[${_serNs(selector.namespace)}${selector.name}${selector.matcher}${_serStr(selector.value)}${selector.modifier ? selector.modifier : ""}]`;
        case "combinator":
            return serialize(selector.left) + selector.combinator;
        case "compound":
            return selector.list.reduce((acc, node)=>{
                if (node.type === "combinator") {
                    return serialize(node) + acc;
                } else {
                    return acc + serialize(node);
                }
            }, "");
        case "list":
            return selector.list.map(serialize).join(",");
    }
}
function _serNs(ns) {
    return ns || ns === "" ? ns + "|" : "";
}
function _serStr(str) {
    if (str.indexOf('"') === -1) {
        return `"${str}"`;
    } else if (str.indexOf("'") === -1) {
        return `'${str}'`;
    } else {
        return `"${str.replace('"', '\\"')}"`;
    }
}
function normalize(selector) {
    if (!selector.type) {
        throw new Error("This is not an AST node.");
    }
    switch(selector.type){
        case "compound":
            {
                selector.list.forEach(normalize);
                selector.list.sort((a, b)=>_compareArrays(_getSelectorPriority(a), _getSelectorPriority(b)));
                break;
            }
        case "combinator":
            {
                normalize(selector.left);
                break;
            }
        case "list":
            {
                selector.list.forEach(normalize);
                selector.list.sort((a, b)=>serialize(a) < serialize(b) ? -1 : 1);
                break;
            }
    }
    return selector;
}
function _getSelectorPriority(selector) {
    switch(selector.type){
        case "universal":
            return [
                1
            ];
        case "tag":
            return [
                1
            ];
        case "id":
            return [
                2
            ];
        case "class":
            return [
                3,
                selector.name
            ];
        case "attrPresence":
            return [
                4,
                serialize(selector)
            ];
        case "attrValue":
            return [
                5,
                serialize(selector)
            ];
        case "combinator":
            return [
                15,
                serialize(selector)
            ];
    }
}
function compareSelectors(a, b) {
    return _compareArrays(a.specificity, b.specificity);
}
function compareSpecificity(a, b) {
    return _compareArrays(a, b);
}
function _compareArrays(a, b) {
    if (!Array.isArray(a) || !Array.isArray(b)) {
        throw new Error("Arguments must be arrays.");
    }
    const shorter = a.length < b.length ? a.length : b.length;
    for(let i = 0; i < shorter; i++){
        if (a[i] === b[i]) {
            continue;
        }
        return a[i] < b[i] ? -1 : 1;
    }
    return a.length - b.length;
}
exports.Ast = ast;
exports.compareSelectors = compareSelectors;
exports.compareSpecificity = compareSpecificity;
exports.normalize = normalize;
exports.parse = parse;
exports.parse1 = parse1;
exports.serialize = serialize;


/***/ }),

/***/ 1524:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var util = __webpack_require__(5016);
function emit(value) {
    return (data, i)=>({
            matched: true,
            position: i,
            value: value
        });
}
function make(f) {
    return (data, i)=>({
            matched: true,
            position: i,
            value: f(data, i)
        });
}
function action(f) {
    return (data, i)=>{
        f(data, i);
        return {
            matched: true,
            position: i,
            value: null
        };
    };
}
function fail(data, i) {
    return {
        matched: false
    };
}
function error(message) {
    return (data, i)=>{
        throw new Error(message instanceof Function ? message(data, i) : message);
    };
}
function token(onToken, onEnd) {
    return (data, i)=>{
        let position = i;
        let value = undefined;
        if (i < data.tokens.length) {
            value = onToken(data.tokens[i], data, i);
            if (value !== undefined) {
                position++;
            }
        } else {
            onEnd?.(data, i);
        }
        return value === undefined ? {
            matched: false
        } : {
            matched: true,
            position: position,
            value: value
        };
    };
}
function any(data, i) {
    return i < data.tokens.length ? {
        matched: true,
        position: i + 1,
        value: data.tokens[i]
    } : {
        matched: false
    };
}
function satisfy(test) {
    return (data, i)=>i < data.tokens.length && test(data.tokens[i], data, i) ? {
            matched: true,
            position: i + 1,
            value: data.tokens[i]
        } : {
            matched: false
        };
}
function mapInner(r, f) {
    return r.matched ? {
        matched: true,
        position: r.position,
        value: f(r.value, r.position)
    } : r;
}
function mapOuter(r, f) {
    return r.matched ? f(r) : r;
}
function map(p, mapper) {
    return (data, i)=>mapInner(p(data, i), (v, j)=>mapper(v, data, i, j));
}
function map1(p, mapper) {
    return (data, i)=>mapOuter(p(data, i), (m)=>mapper(m, data, i));
}
function peek(p, f) {
    return (data, i)=>{
        const r = p(data, i);
        f(r, data, i);
        return r;
    };
}
function option(p, def) {
    return (data, i)=>{
        const r = p(data, i);
        return r.matched ? r : {
            matched: true,
            position: i,
            value: def
        };
    };
}
function not(p) {
    return (data, i)=>{
        const r = p(data, i);
        return r.matched ? {
            matched: false
        } : {
            matched: true,
            position: i,
            value: true
        };
    };
}
function choice(...ps) {
    return (data, i)=>{
        for (const p of ps){
            const result = p(data, i);
            if (result.matched) {
                return result;
            }
        }
        return {
            matched: false
        };
    };
}
function otherwise(pa, pb) {
    return (data, i)=>{
        const r1 = pa(data, i);
        return r1.matched ? r1 : pb(data, i);
    };
}
function longest(...ps) {
    return (data, i)=>{
        let match = undefined;
        for (const p of ps){
            const result = p(data, i);
            if (result.matched && (!match || match.position < result.position)) {
                match = result;
            }
        }
        return match || {
            matched: false
        };
    };
}
function takeWhile(p, test) {
    return (data, i)=>{
        const values = [];
        let success = true;
        do {
            const r = p(data, i);
            if (r.matched && test(r.value, values.length + 1, data, i, r.position)) {
                values.push(r.value);
                i = r.position;
            } else {
                success = false;
            }
        }while (success);
        return {
            matched: true,
            position: i,
            value: values
        };
    };
}
function takeUntil(p, test) {
    return takeWhile(p, (value, n, data, i, j)=>!test(value, n, data, i, j));
}
function takeWhileP(pValue, pTest) {
    return takeWhile(pValue, (value, n, data, i)=>pTest(data, i).matched);
}
function takeUntilP(pValue, pTest) {
    return takeWhile(pValue, (value, n, data, i)=>!pTest(data, i).matched);
}
function many(p) {
    return takeWhile(p, ()=>true);
}
function many1(p) {
    return ab(p, many(p), (head, tail)=>[
            head,
            ...tail
        ]);
}
function ab(pa, pb, join) {
    return (data, i)=>mapOuter(pa(data, i), (ma)=>mapInner(pb(data, ma.position), (vb, j)=>join(ma.value, vb, data, i, j)));
}
function left(pa, pb) {
    return ab(pa, pb, (va)=>va);
}
function right(pa, pb) {
    return ab(pa, pb, (va, vb)=>vb);
}
function abc(pa, pb, pc, join) {
    return (data, i)=>mapOuter(pa(data, i), (ma)=>mapOuter(pb(data, ma.position), (mb)=>mapInner(pc(data, mb.position), (vc, j)=>join(ma.value, mb.value, vc, data, i, j))));
}
function middle(pa, pb, pc) {
    return abc(pa, pb, pc, (ra, rb)=>rb);
}
function all(...ps) {
    return (data, i)=>{
        const result = [];
        let position = i;
        for (const p of ps){
            const r1 = p(data, position);
            if (r1.matched) {
                result.push(r1.value);
                position = r1.position;
            } else {
                return {
                    matched: false
                };
            }
        }
        return {
            matched: true,
            position: position,
            value: result
        };
    };
}
function skip(...ps) {
    return map(all(...ps), ()=>null);
}
function flatten(...ps) {
    return flatten1(all(...ps));
}
function flatten1(p) {
    return map(p, (vs)=>vs.flatMap((v)=>v));
}
function sepBy1(pValue, pSep) {
    return ab(pValue, many(right(pSep, pValue)), (head, tail)=>[
            head,
            ...tail
        ]);
}
function sepBy(pValue, pSep) {
    return otherwise(sepBy1(pValue, pSep), emit([]));
}
function chainReduce(acc, f) {
    return (data, i)=>{
        let loop = true;
        let acc1 = acc;
        let pos = i;
        do {
            const r = f(acc1, data, pos)(data, pos);
            if (r.matched) {
                acc1 = r.value;
                pos = r.position;
            } else {
                loop = false;
            }
        }while (loop);
        return {
            matched: true,
            position: pos,
            value: acc1
        };
    };
}
function reduceLeft(acc, p, reducer) {
    return chainReduce(acc, (acc)=>map(p, (v, data, i, j)=>reducer(acc, v, data, i, j)));
}
function reduceRight(p, acc, reducer) {
    return map(many(p), (vs, data, i, j)=>vs.reduceRight((acc, v)=>reducer(v, acc, data, i, j), acc));
}
function leftAssoc1(pLeft, pOper) {
    return chain(pLeft, (v0)=>reduceLeft(v0, pOper, (acc, f)=>f(acc)));
}
function rightAssoc1(pOper, pRight) {
    return ab(reduceRight(pOper, (y)=>y, (f, acc)=>(y)=>f(acc(y))), pRight, (f, v)=>f(v));
}
function leftAssoc2(pLeft, pOper, pRight) {
    return chain(pLeft, (v0)=>reduceLeft(v0, ab(pOper, pRight, (f, y)=>[
                f,
                y
            ]), (acc, [f, y])=>f(acc, y)));
}
function rightAssoc2(pLeft, pOper, pRight) {
    return ab(reduceRight(ab(pLeft, pOper, (x, f)=>[
            x,
            f
        ]), (y)=>y, ([x, f], acc)=>(y)=>f(x, acc(y))), pRight, (f, v)=>f(v));
}
function condition(cond, pTrue, pFalse) {
    return (data, i)=>cond(data, i) ? pTrue(data, i) : pFalse(data, i);
}
function decide(p) {
    return (data, i)=>mapOuter(p(data, i), (m1)=>m1.value(data, m1.position));
}
function chain(p, f) {
    return (data, i)=>mapOuter(p(data, i), (m1)=>f(m1.value, data, i, m1.position)(data, m1.position));
}
function ahead(p) {
    return (data, i)=>mapOuter(p(data, i), (m1)=>({
                matched: true,
                position: i,
                value: m1.value
            }));
}
function recursive(f) {
    return function(data, i) {
        return f()(data, i);
    };
}
function start(data, i) {
    return i !== 0 ? {
        matched: false
    } : {
        matched: true,
        position: i,
        value: true
    };
}
function end(data, i) {
    return i < data.tokens.length ? {
        matched: false
    } : {
        matched: true,
        position: i,
        value: true
    };
}
function remainingTokensNumber(data, i) {
    return data.tokens.length - i;
}
function parserPosition(data, i, formatToken, contextTokens = 3) {
    const len = data.tokens.length;
    const lowIndex = util.clamp(0, i - contextTokens, len - contextTokens);
    const highIndex = util.clamp(contextTokens, i + 1 + contextTokens, len);
    const tokensSlice = data.tokens.slice(lowIndex, highIndex);
    const lines = [];
    const indexWidth = String(highIndex - 1).length + 1;
    if (i < 0) {
        lines.push(`${String(i).padStart(indexWidth)} >>`);
    }
    if (0 < lowIndex) {
        lines.push("...".padStart(indexWidth + 6));
    }
    for(let j = 0; j < tokensSlice.length; j++){
        const index = lowIndex + j;
        lines.push(`${String(index).padStart(indexWidth)} ${index === i ? ">" : " "} ${util.escapeWhitespace(formatToken(tokensSlice[j]))}`);
    }
    if (highIndex < len) {
        lines.push("...".padStart(indexWidth + 6));
    }
    if (len <= i) {
        lines.push(`${String(i).padStart(indexWidth)} >>`);
    }
    return lines.join("\n");
}
function parse(parser, tokens, options, formatToken = JSON.stringify) {
    const data = {
        tokens: tokens,
        options: options
    };
    const result = parser(data, 0);
    if (!result.matched) {
        throw new Error("No match");
    }
    if (result.position < data.tokens.length) {
        throw new Error(`Partial match. Parsing stopped at:\n${parserPosition(data, result.position, formatToken)}`);
    }
    return result.value;
}
function tryParse(parser, tokens, options) {
    const result = parser({
        tokens: tokens,
        options: options
    }, 0);
    return result.matched ? result.value : undefined;
}
function match(matcher, tokens, options) {
    const result = matcher({
        tokens: tokens,
        options: options
    }, 0);
    return result.value;
}
exports.ab = ab;
exports.abc = abc;
exports.action = action;
exports.ahead = ahead;
exports.all = all;
exports.and = all;
exports.any = any;
exports.chain = chain;
exports.chainReduce = chainReduce;
exports.choice = choice;
exports.condition = condition;
exports.decide = decide;
exports.discard = skip;
exports.eitherOr = otherwise;
exports.emit = emit;
exports.end = end;
exports.eof = end;
exports.error = error;
exports.fail = fail;
exports.flatten = flatten;
exports.flatten1 = flatten1;
exports.left = left;
exports.leftAssoc1 = leftAssoc1;
exports.leftAssoc2 = leftAssoc2;
exports.longest = longest;
exports.lookAhead = ahead;
exports.make = make;
exports.many = many;
exports.many1 = many1;
exports.map = map;
exports.map1 = map1;
exports.match = match;
exports.middle = middle;
exports.not = not;
exports.of = emit;
exports.option = option;
exports.or = choice;
exports.otherwise = otherwise;
exports.parse = parse;
exports.parserPosition = parserPosition;
exports.peek = peek;
exports.recursive = recursive;
exports.reduceLeft = reduceLeft;
exports.reduceRight = reduceRight;
exports.remainingTokensNumber = remainingTokensNumber;
exports.right = right;
exports.rightAssoc1 = rightAssoc1;
exports.rightAssoc2 = rightAssoc2;
exports.satisfy = satisfy;
exports.sepBy = sepBy;
exports.sepBy1 = sepBy1;
exports.skip = skip;
exports.some = many1;
exports.start = start;
exports.takeUntil = takeUntil;
exports.takeUntilP = takeUntilP;
exports.takeWhile = takeWhile;
exports.takeWhileP = takeWhileP;
exports.token = token;
exports.tryParse = tryParse;


/***/ }),

/***/ 5016:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function clamp(left, x, right) {
    return Math.max(left, Math.min(x, right));
}
function escapeWhitespace(str) {
    return str.replace(/(\t)|(\r)|(\n)/g, (m, t, r)=>t ? "\\t" : r ? "\\r" : "\\n");
}
exports.clamp = clamp;
exports.escapeWhitespace = escapeWhitespace;


/***/ }),

/***/ 8273:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({
    value: true
}));
var parseley = __webpack_require__(2831);
function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function(k) {
            if (k !== "default") {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function() {
                        return e[k];
                    }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}
var parseley__namespace = /*#__PURE__*/ _interopNamespace(parseley);
var Ast = /*#__PURE__*/ Object.freeze({
    __proto__: null
});
var Types = /*#__PURE__*/ Object.freeze({
    __proto__: null
});
const treeify = (nodes)=>"▽\n" + treeifyArray(nodes, thinLines);
const thinLines = [
    [
        "├─",
        "│ "
    ],
    [
        "└─",
        "  "
    ]
];
const heavyLines = [
    [
        "┠─",
        "┃ "
    ],
    [
        "┖─",
        "  "
    ]
];
const doubleLines = [
    [
        "╟─",
        "║ "
    ],
    [
        "╙─",
        "  "
    ]
];
function treeifyArray(nodes, tpl = heavyLines) {
    return prefixItems(tpl, nodes.map((n)=>treeifyNode(n)));
}
function treeifyNode(node) {
    switch(node.type){
        case "terminal":
            {
                const vctr = node.valueContainer;
                return `◁ #${vctr.index} ${JSON.stringify(vctr.specificity)} ${vctr.value}`;
            }
        case "tagName":
            return `◻ Tag name\n${treeifyArray(node.variants, doubleLines)}`;
        case "attrValue":
            return `▣ Attr value: ${node.name}\n${treeifyArray(node.matchers, doubleLines)}`;
        case "attrPresence":
            return `◨ Attr presence: ${node.name}\n${treeifyArray(node.cont)}`;
        case "pushElement":
            return `◉ Push element: ${node.combinator}\n${treeifyArray(node.cont, thinLines)}`;
        case "popElement":
            return `◌ Pop element\n${treeifyArray(node.cont, thinLines)}`;
        case "variant":
            return `◇ = ${node.value}\n${treeifyArray(node.cont)}`;
        case "matcher":
            return `◈ ${node.matcher} "${node.value}"${node.modifier || ""}\n${treeifyArray(node.cont)}`;
    }
}
function prefixItems(tpl, items) {
    return items.map((item, i, { length })=>prefixItem(tpl, item, i === length - 1)).join("\n");
}
function prefixItem(tpl, item, tail = true) {
    const tpl1 = tpl[tail ? 1 : 0];
    return tpl1[0] + item.split("\n").join("\n" + tpl1[1]);
}
var TreeifyBuilder = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    treeify: treeify
});
class DecisionTree {
    constructor(input){
        this.branches = weave(toAstTerminalPairs(input));
    }
    build(builder) {
        return builder(this.branches);
    }
}
function toAstTerminalPairs(array) {
    const len = array.length;
    const results = new Array(len);
    for(let i = 0; i < len; i++){
        const [selectorString, val] = array[i];
        const ast = preprocess(parseley__namespace.parse1(selectorString));
        results[i] = {
            ast: ast,
            terminal: {
                type: "terminal",
                valueContainer: {
                    index: i,
                    value: val,
                    specificity: ast.specificity
                }
            }
        };
    }
    return results;
}
function preprocess(ast) {
    reduceSelectorVariants(ast);
    parseley__namespace.normalize(ast);
    return ast;
}
function reduceSelectorVariants(ast) {
    const newList = [];
    ast.list.forEach((sel)=>{
        switch(sel.type){
            case "class":
                newList.push({
                    matcher: "~=",
                    modifier: null,
                    name: "class",
                    namespace: null,
                    specificity: sel.specificity,
                    type: "attrValue",
                    value: sel.name
                });
                break;
            case "id":
                newList.push({
                    matcher: "=",
                    modifier: null,
                    name: "id",
                    namespace: null,
                    specificity: sel.specificity,
                    type: "attrValue",
                    value: sel.name
                });
                break;
            case "combinator":
                reduceSelectorVariants(sel.left);
                newList.push(sel);
                break;
            case "universal":
                break;
            default:
                newList.push(sel);
                break;
        }
    });
    ast.list = newList;
}
function weave(items) {
    const branches = [];
    while(items.length){
        const topKind = findTopKey(items, (sel)=>true, getSelectorKind);
        const { matches, nonmatches, empty } = breakByKind(items, topKind);
        items = nonmatches;
        if (matches.length) {
            branches.push(branchOfKind(topKind, matches));
        }
        if (empty.length) {
            branches.push(...terminate(empty));
        }
    }
    return branches;
}
function terminate(items) {
    const results = [];
    for (const item of items){
        const terminal = item.terminal;
        if (terminal.type === "terminal") {
            results.push(terminal);
        } else {
            const { matches, rest } = partition(terminal.cont, (node)=>node.type === "terminal");
            matches.forEach((node)=>results.push(node));
            if (rest.length) {
                terminal.cont = rest;
                results.push(terminal);
            }
        }
    }
    return results;
}
function breakByKind(items, selectedKind) {
    const matches = [];
    const nonmatches = [];
    const empty = [];
    for (const item of items){
        const simpsels = item.ast.list;
        if (simpsels.length) {
            const isMatch = simpsels.some((node)=>getSelectorKind(node) === selectedKind);
            (isMatch ? matches : nonmatches).push(item);
        } else {
            empty.push(item);
        }
    }
    return {
        matches,
        nonmatches,
        empty
    };
}
function getSelectorKind(sel) {
    switch(sel.type){
        case "attrPresence":
            return `attrPresence ${sel.name}`;
        case "attrValue":
            return `attrValue ${sel.name}`;
        case "combinator":
            return `combinator ${sel.combinator}`;
        default:
            return sel.type;
    }
}
function branchOfKind(kind, items) {
    if (kind === "tag") {
        return tagNameBranch(items);
    }
    if (kind.startsWith("attrValue ")) {
        return attrValueBranch(kind.substring(10), items);
    }
    if (kind.startsWith("attrPresence ")) {
        return attrPresenceBranch(kind.substring(13), items);
    }
    if (kind === "combinator >") {
        return combinatorBranch(">", items);
    }
    if (kind === "combinator +") {
        return combinatorBranch("+", items);
    }
    throw new Error(`Unsupported selector kind: ${kind}`);
}
function tagNameBranch(items) {
    const groups = spliceAndGroup(items, (x)=>x.type === "tag", (x)=>x.name);
    const variants = Object.entries(groups).map(([name, group])=>({
            type: "variant",
            value: name,
            cont: weave(group.items)
        }));
    return {
        type: "tagName",
        variants: variants
    };
}
function attrPresenceBranch(name, items) {
    for (const item of items){
        spliceSimpleSelector(item, (x)=>x.type === "attrPresence" && x.name === name);
    }
    return {
        type: "attrPresence",
        name: name,
        cont: weave(items)
    };
}
function attrValueBranch(name, items) {
    const groups = spliceAndGroup(items, (x)=>x.type === "attrValue" && x.name === name, (x)=>`${x.matcher} ${x.modifier || ""} ${x.value}`);
    const matchers = [];
    for (const group of Object.values(groups)){
        const sel = group.oneSimpleSelector;
        const predicate = getAttrPredicate(sel);
        const continuation = weave(group.items);
        matchers.push({
            type: "matcher",
            matcher: sel.matcher,
            modifier: sel.modifier,
            value: sel.value,
            predicate: predicate,
            cont: continuation
        });
    }
    return {
        type: "attrValue",
        name: name,
        matchers: matchers
    };
}
function getAttrPredicate(sel) {
    if (sel.modifier === "i") {
        const expected = sel.value.toLowerCase();
        switch(sel.matcher){
            case "=":
                return (actual)=>expected === actual.toLowerCase();
            case "~=":
                return (actual)=>actual.toLowerCase().split(/[ \t]+/).includes(expected);
            case "^=":
                return (actual)=>actual.toLowerCase().startsWith(expected);
            case "$=":
                return (actual)=>actual.toLowerCase().endsWith(expected);
            case "*=":
                return (actual)=>actual.toLowerCase().includes(expected);
            case "|=":
                return (actual)=>{
                    const lower = actual.toLowerCase();
                    return expected === lower || lower.startsWith(expected) && lower[expected.length] === "-";
                };
        }
    } else {
        const expected = sel.value;
        switch(sel.matcher){
            case "=":
                return (actual)=>expected === actual;
            case "~=":
                return (actual)=>actual.split(/[ \t]+/).includes(expected);
            case "^=":
                return (actual)=>actual.startsWith(expected);
            case "$=":
                return (actual)=>actual.endsWith(expected);
            case "*=":
                return (actual)=>actual.includes(expected);
            case "|=":
                return (actual)=>expected === actual || actual.startsWith(expected) && actual[expected.length] === "-";
        }
    }
}
function combinatorBranch(combinator, items) {
    const groups = spliceAndGroup(items, (x)=>x.type === "combinator" && x.combinator === combinator, (x)=>parseley__namespace.serialize(x.left));
    const leftItems = [];
    for (const group of Object.values(groups)){
        const rightCont = weave(group.items);
        const leftAst = group.oneSimpleSelector.left;
        leftItems.push({
            ast: leftAst,
            terminal: {
                type: "popElement",
                cont: rightCont
            }
        });
    }
    return {
        type: "pushElement",
        combinator: combinator,
        cont: weave(leftItems)
    };
}
function spliceAndGroup(items, predicate, keyCallback) {
    const groups = {};
    while(items.length){
        const bestKey = findTopKey(items, predicate, keyCallback);
        const bestKeyPredicate = (sel)=>predicate(sel) && keyCallback(sel) === bestKey;
        const hasBestKeyPredicate = (item)=>item.ast.list.some(bestKeyPredicate);
        const { matches, rest } = partition1(items, hasBestKeyPredicate);
        let oneSimpleSelector = null;
        for (const item of matches){
            const splicedNode = spliceSimpleSelector(item, bestKeyPredicate);
            if (!oneSimpleSelector) {
                oneSimpleSelector = splicedNode;
            }
        }
        if (oneSimpleSelector == null) {
            throw new Error("No simple selector is found.");
        }
        groups[bestKey] = {
            oneSimpleSelector: oneSimpleSelector,
            items: matches
        };
        items = rest;
    }
    return groups;
}
function spliceSimpleSelector(item, predicate) {
    const simpsels = item.ast.list;
    const matches = new Array(simpsels.length);
    let firstIndex = -1;
    for(let i = simpsels.length; i-- > 0;){
        if (predicate(simpsels[i])) {
            matches[i] = true;
            firstIndex = i;
        }
    }
    if (firstIndex == -1) {
        throw new Error(`Couldn't find the required simple selector.`);
    }
    const result = simpsels[firstIndex];
    item.ast.list = simpsels.filter((sel, i)=>!matches[i]);
    return result;
}
function findTopKey(items, predicate, keyCallback) {
    const candidates = {};
    for (const item of items){
        const candidates1 = {};
        for (const node of item.ast.list.filter(predicate)){
            candidates1[keyCallback(node)] = true;
        }
        for (const key of Object.keys(candidates1)){
            if (candidates[key]) {
                candidates[key]++;
            } else {
                candidates[key] = 1;
            }
        }
    }
    let topKind = "";
    let topCounter = 0;
    for (const entry of Object.entries(candidates)){
        if (entry[1] > topCounter) {
            topKind = entry[0];
            topCounter = entry[1];
        }
    }
    return topKind;
}
function partition(src, predicate) {
    const matches = [];
    const rest = [];
    for (const x of src){
        if (predicate(x)) {
            matches.push(x);
        } else {
            rest.push(x);
        }
    }
    return {
        matches,
        rest
    };
}
function partition1(src, predicate) {
    const matches = [];
    const rest = [];
    for (const x of src){
        if (predicate(x)) {
            matches.push(x);
        } else {
            rest.push(x);
        }
    }
    return {
        matches,
        rest
    };
}
class Picker {
    constructor(f){
        this.f = f;
    }
    pickAll(el) {
        return this.f(el);
    }
    pick1(el, preferFirst = false) {
        const results = this.f(el);
        const len = results.length;
        if (len === 0) {
            return null;
        }
        if (len === 1) {
            return results[0].value;
        }
        const comparator = preferFirst ? comparatorPreferFirst : comparatorPreferLast;
        let result = results[0];
        for(let i = 1; i < len; i++){
            const next = results[i];
            if (comparator(result, next)) {
                result = next;
            }
        }
        return result.value;
    }
}
function comparatorPreferFirst(acc, next) {
    const diff = parseley.compareSpecificity(next.specificity, acc.specificity);
    return diff > 0 || diff === 0 && next.index < acc.index;
}
function comparatorPreferLast(acc, next) {
    const diff = parseley.compareSpecificity(next.specificity, acc.specificity);
    return diff > 0 || diff === 0 && next.index > acc.index;
}
exports.Ast = Ast;
exports.DecisionTree = DecisionTree;
exports.Picker = Picker;
exports.Treeify = TreeifyBuilder;
exports.Types = Types;


/***/ }),

/***/ 1670:
/***/ ((module) => {

module.exports = JSON.parse('{"application/1d-interleaved-parityfec":{"source":"iana"},"application/3gpdash-qoe-report+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/3gpp-ims+xml":{"source":"iana","compressible":true},"application/3gpphal+json":{"source":"iana","compressible":true},"application/3gpphalforms+json":{"source":"iana","compressible":true},"application/a2l":{"source":"iana"},"application/ace+cbor":{"source":"iana"},"application/activemessage":{"source":"iana"},"application/activity+json":{"source":"iana","compressible":true},"application/alto-costmap+json":{"source":"iana","compressible":true},"application/alto-costmapfilter+json":{"source":"iana","compressible":true},"application/alto-directory+json":{"source":"iana","compressible":true},"application/alto-endpointcost+json":{"source":"iana","compressible":true},"application/alto-endpointcostparams+json":{"source":"iana","compressible":true},"application/alto-endpointprop+json":{"source":"iana","compressible":true},"application/alto-endpointpropparams+json":{"source":"iana","compressible":true},"application/alto-error+json":{"source":"iana","compressible":true},"application/alto-networkmap+json":{"source":"iana","compressible":true},"application/alto-networkmapfilter+json":{"source":"iana","compressible":true},"application/alto-updatestreamcontrol+json":{"source":"iana","compressible":true},"application/alto-updatestreamparams+json":{"source":"iana","compressible":true},"application/aml":{"source":"iana"},"application/andrew-inset":{"source":"iana","extensions":["ez"]},"application/applefile":{"source":"iana"},"application/applixware":{"source":"apache","extensions":["aw"]},"application/at+jwt":{"source":"iana"},"application/atf":{"source":"iana"},"application/atfx":{"source":"iana"},"application/atom+xml":{"source":"iana","compressible":true,"extensions":["atom"]},"application/atomcat+xml":{"source":"iana","compressible":true,"extensions":["atomcat"]},"application/atomdeleted+xml":{"source":"iana","compressible":true,"extensions":["atomdeleted"]},"application/atomicmail":{"source":"iana"},"application/atomsvc+xml":{"source":"iana","compressible":true,"extensions":["atomsvc"]},"application/atsc-dwd+xml":{"source":"iana","compressible":true,"extensions":["dwd"]},"application/atsc-dynamic-event-message":{"source":"iana"},"application/atsc-held+xml":{"source":"iana","compressible":true,"extensions":["held"]},"application/atsc-rdt+json":{"source":"iana","compressible":true},"application/atsc-rsat+xml":{"source":"iana","compressible":true,"extensions":["rsat"]},"application/atxml":{"source":"iana"},"application/auth-policy+xml":{"source":"iana","compressible":true},"application/bacnet-xdd+zip":{"source":"iana","compressible":false},"application/batch-smtp":{"source":"iana"},"application/bdoc":{"compressible":false,"extensions":["bdoc"]},"application/beep+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/calendar+json":{"source":"iana","compressible":true},"application/calendar+xml":{"source":"iana","compressible":true,"extensions":["xcs"]},"application/call-completion":{"source":"iana"},"application/cals-1840":{"source":"iana"},"application/captive+json":{"source":"iana","compressible":true},"application/cbor":{"source":"iana"},"application/cbor-seq":{"source":"iana"},"application/cccex":{"source":"iana"},"application/ccmp+xml":{"source":"iana","compressible":true},"application/ccxml+xml":{"source":"iana","compressible":true,"extensions":["ccxml"]},"application/cdfx+xml":{"source":"iana","compressible":true,"extensions":["cdfx"]},"application/cdmi-capability":{"source":"iana","extensions":["cdmia"]},"application/cdmi-container":{"source":"iana","extensions":["cdmic"]},"application/cdmi-domain":{"source":"iana","extensions":["cdmid"]},"application/cdmi-object":{"source":"iana","extensions":["cdmio"]},"application/cdmi-queue":{"source":"iana","extensions":["cdmiq"]},"application/cdni":{"source":"iana"},"application/cea":{"source":"iana"},"application/cea-2018+xml":{"source":"iana","compressible":true},"application/cellml+xml":{"source":"iana","compressible":true},"application/cfw":{"source":"iana"},"application/city+json":{"source":"iana","compressible":true},"application/clr":{"source":"iana"},"application/clue+xml":{"source":"iana","compressible":true},"application/clue_info+xml":{"source":"iana","compressible":true},"application/cms":{"source":"iana"},"application/cnrp+xml":{"source":"iana","compressible":true},"application/coap-group+json":{"source":"iana","compressible":true},"application/coap-payload":{"source":"iana"},"application/commonground":{"source":"iana"},"application/conference-info+xml":{"source":"iana","compressible":true},"application/cose":{"source":"iana"},"application/cose-key":{"source":"iana"},"application/cose-key-set":{"source":"iana"},"application/cpl+xml":{"source":"iana","compressible":true,"extensions":["cpl"]},"application/csrattrs":{"source":"iana"},"application/csta+xml":{"source":"iana","compressible":true},"application/cstadata+xml":{"source":"iana","compressible":true},"application/csvm+json":{"source":"iana","compressible":true},"application/cu-seeme":{"source":"apache","extensions":["cu"]},"application/cwt":{"source":"iana"},"application/cybercash":{"source":"iana"},"application/dart":{"compressible":true},"application/dash+xml":{"source":"iana","compressible":true,"extensions":["mpd"]},"application/dash-patch+xml":{"source":"iana","compressible":true,"extensions":["mpp"]},"application/dashdelta":{"source":"iana"},"application/davmount+xml":{"source":"iana","compressible":true,"extensions":["davmount"]},"application/dca-rft":{"source":"iana"},"application/dcd":{"source":"iana"},"application/dec-dx":{"source":"iana"},"application/dialog-info+xml":{"source":"iana","compressible":true},"application/dicom":{"source":"iana"},"application/dicom+json":{"source":"iana","compressible":true},"application/dicom+xml":{"source":"iana","compressible":true},"application/dii":{"source":"iana"},"application/dit":{"source":"iana"},"application/dns":{"source":"iana"},"application/dns+json":{"source":"iana","compressible":true},"application/dns-message":{"source":"iana"},"application/docbook+xml":{"source":"apache","compressible":true,"extensions":["dbk"]},"application/dots+cbor":{"source":"iana"},"application/dskpp+xml":{"source":"iana","compressible":true},"application/dssc+der":{"source":"iana","extensions":["dssc"]},"application/dssc+xml":{"source":"iana","compressible":true,"extensions":["xdssc"]},"application/dvcs":{"source":"iana"},"application/ecmascript":{"source":"iana","compressible":true,"extensions":["es","ecma"]},"application/edi-consent":{"source":"iana"},"application/edi-x12":{"source":"iana","compressible":false},"application/edifact":{"source":"iana","compressible":false},"application/efi":{"source":"iana"},"application/elm+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/elm+xml":{"source":"iana","compressible":true},"application/emergencycalldata.cap+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/emergencycalldata.comment+xml":{"source":"iana","compressible":true},"application/emergencycalldata.control+xml":{"source":"iana","compressible":true},"application/emergencycalldata.deviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.ecall.msd":{"source":"iana"},"application/emergencycalldata.providerinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.serviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.subscriberinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.veds+xml":{"source":"iana","compressible":true},"application/emma+xml":{"source":"iana","compressible":true,"extensions":["emma"]},"application/emotionml+xml":{"source":"iana","compressible":true,"extensions":["emotionml"]},"application/encaprtp":{"source":"iana"},"application/epp+xml":{"source":"iana","compressible":true},"application/epub+zip":{"source":"iana","compressible":false,"extensions":["epub"]},"application/eshop":{"source":"iana"},"application/exi":{"source":"iana","extensions":["exi"]},"application/expect-ct-report+json":{"source":"iana","compressible":true},"application/express":{"source":"iana","extensions":["exp"]},"application/fastinfoset":{"source":"iana"},"application/fastsoap":{"source":"iana"},"application/fdt+xml":{"source":"iana","compressible":true,"extensions":["fdt"]},"application/fhir+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/fhir+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/fido.trusted-apps+json":{"compressible":true},"application/fits":{"source":"iana"},"application/flexfec":{"source":"iana"},"application/font-sfnt":{"source":"iana"},"application/font-tdpfr":{"source":"iana","extensions":["pfr"]},"application/font-woff":{"source":"iana","compressible":false},"application/framework-attributes+xml":{"source":"iana","compressible":true},"application/geo+json":{"source":"iana","compressible":true,"extensions":["geojson"]},"application/geo+json-seq":{"source":"iana"},"application/geopackage+sqlite3":{"source":"iana"},"application/geoxacml+xml":{"source":"iana","compressible":true},"application/gltf-buffer":{"source":"iana"},"application/gml+xml":{"source":"iana","compressible":true,"extensions":["gml"]},"application/gpx+xml":{"source":"apache","compressible":true,"extensions":["gpx"]},"application/gxf":{"source":"apache","extensions":["gxf"]},"application/gzip":{"source":"iana","compressible":false,"extensions":["gz"]},"application/h224":{"source":"iana"},"application/held+xml":{"source":"iana","compressible":true},"application/hjson":{"extensions":["hjson"]},"application/http":{"source":"iana"},"application/hyperstudio":{"source":"iana","extensions":["stk"]},"application/ibe-key-request+xml":{"source":"iana","compressible":true},"application/ibe-pkg-reply+xml":{"source":"iana","compressible":true},"application/ibe-pp-data":{"source":"iana"},"application/iges":{"source":"iana"},"application/im-iscomposing+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/index":{"source":"iana"},"application/index.cmd":{"source":"iana"},"application/index.obj":{"source":"iana"},"application/index.response":{"source":"iana"},"application/index.vnd":{"source":"iana"},"application/inkml+xml":{"source":"iana","compressible":true,"extensions":["ink","inkml"]},"application/iotp":{"source":"iana"},"application/ipfix":{"source":"iana","extensions":["ipfix"]},"application/ipp":{"source":"iana"},"application/isup":{"source":"iana"},"application/its+xml":{"source":"iana","compressible":true,"extensions":["its"]},"application/java-archive":{"source":"apache","compressible":false,"extensions":["jar","war","ear"]},"application/java-serialized-object":{"source":"apache","compressible":false,"extensions":["ser"]},"application/java-vm":{"source":"apache","compressible":false,"extensions":["class"]},"application/javascript":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},"application/jf2feed+json":{"source":"iana","compressible":true},"application/jose":{"source":"iana"},"application/jose+json":{"source":"iana","compressible":true},"application/jrd+json":{"source":"iana","compressible":true},"application/jscalendar+json":{"source":"iana","compressible":true},"application/json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},"application/json-patch+json":{"source":"iana","compressible":true},"application/json-seq":{"source":"iana"},"application/json5":{"extensions":["json5"]},"application/jsonml+json":{"source":"apache","compressible":true,"extensions":["jsonml"]},"application/jwk+json":{"source":"iana","compressible":true},"application/jwk-set+json":{"source":"iana","compressible":true},"application/jwt":{"source":"iana"},"application/kpml-request+xml":{"source":"iana","compressible":true},"application/kpml-response+xml":{"source":"iana","compressible":true},"application/ld+json":{"source":"iana","compressible":true,"extensions":["jsonld"]},"application/lgr+xml":{"source":"iana","compressible":true,"extensions":["lgr"]},"application/link-format":{"source":"iana"},"application/load-control+xml":{"source":"iana","compressible":true},"application/lost+xml":{"source":"iana","compressible":true,"extensions":["lostxml"]},"application/lostsync+xml":{"source":"iana","compressible":true},"application/lpf+zip":{"source":"iana","compressible":false},"application/lxf":{"source":"iana"},"application/mac-binhex40":{"source":"iana","extensions":["hqx"]},"application/mac-compactpro":{"source":"apache","extensions":["cpt"]},"application/macwriteii":{"source":"iana"},"application/mads+xml":{"source":"iana","compressible":true,"extensions":["mads"]},"application/manifest+json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},"application/marc":{"source":"iana","extensions":["mrc"]},"application/marcxml+xml":{"source":"iana","compressible":true,"extensions":["mrcx"]},"application/mathematica":{"source":"iana","extensions":["ma","nb","mb"]},"application/mathml+xml":{"source":"iana","compressible":true,"extensions":["mathml"]},"application/mathml-content+xml":{"source":"iana","compressible":true},"application/mathml-presentation+xml":{"source":"iana","compressible":true},"application/mbms-associated-procedure-description+xml":{"source":"iana","compressible":true},"application/mbms-deregister+xml":{"source":"iana","compressible":true},"application/mbms-envelope+xml":{"source":"iana","compressible":true},"application/mbms-msk+xml":{"source":"iana","compressible":true},"application/mbms-msk-response+xml":{"source":"iana","compressible":true},"application/mbms-protection-description+xml":{"source":"iana","compressible":true},"application/mbms-reception-report+xml":{"source":"iana","compressible":true},"application/mbms-register+xml":{"source":"iana","compressible":true},"application/mbms-register-response+xml":{"source":"iana","compressible":true},"application/mbms-schedule+xml":{"source":"iana","compressible":true},"application/mbms-user-service-description+xml":{"source":"iana","compressible":true},"application/mbox":{"source":"iana","extensions":["mbox"]},"application/media-policy-dataset+xml":{"source":"iana","compressible":true,"extensions":["mpf"]},"application/media_control+xml":{"source":"iana","compressible":true},"application/mediaservercontrol+xml":{"source":"iana","compressible":true,"extensions":["mscml"]},"application/merge-patch+json":{"source":"iana","compressible":true},"application/metalink+xml":{"source":"apache","compressible":true,"extensions":["metalink"]},"application/metalink4+xml":{"source":"iana","compressible":true,"extensions":["meta4"]},"application/mets+xml":{"source":"iana","compressible":true,"extensions":["mets"]},"application/mf4":{"source":"iana"},"application/mikey":{"source":"iana"},"application/mipc":{"source":"iana"},"application/missing-blocks+cbor-seq":{"source":"iana"},"application/mmt-aei+xml":{"source":"iana","compressible":true,"extensions":["maei"]},"application/mmt-usd+xml":{"source":"iana","compressible":true,"extensions":["musd"]},"application/mods+xml":{"source":"iana","compressible":true,"extensions":["mods"]},"application/moss-keys":{"source":"iana"},"application/moss-signature":{"source":"iana"},"application/mosskey-data":{"source":"iana"},"application/mosskey-request":{"source":"iana"},"application/mp21":{"source":"iana","extensions":["m21","mp21"]},"application/mp4":{"source":"iana","extensions":["mp4s","m4p"]},"application/mpeg4-generic":{"source":"iana"},"application/mpeg4-iod":{"source":"iana"},"application/mpeg4-iod-xmt":{"source":"iana"},"application/mrb-consumer+xml":{"source":"iana","compressible":true},"application/mrb-publish+xml":{"source":"iana","compressible":true},"application/msc-ivr+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msc-mixer+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msword":{"source":"iana","compressible":false,"extensions":["doc","dot"]},"application/mud+json":{"source":"iana","compressible":true},"application/multipart-core":{"source":"iana"},"application/mxf":{"source":"iana","extensions":["mxf"]},"application/n-quads":{"source":"iana","extensions":["nq"]},"application/n-triples":{"source":"iana","extensions":["nt"]},"application/nasdata":{"source":"iana"},"application/news-checkgroups":{"source":"iana","charset":"US-ASCII"},"application/news-groupinfo":{"source":"iana","charset":"US-ASCII"},"application/news-transmission":{"source":"iana"},"application/nlsml+xml":{"source":"iana","compressible":true},"application/node":{"source":"iana","extensions":["cjs"]},"application/nss":{"source":"iana"},"application/oauth-authz-req+jwt":{"source":"iana"},"application/oblivious-dns-message":{"source":"iana"},"application/ocsp-request":{"source":"iana"},"application/ocsp-response":{"source":"iana"},"application/octet-stream":{"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{"source":"iana","extensions":["oda"]},"application/odm+xml":{"source":"iana","compressible":true},"application/odx":{"source":"iana"},"application/oebps-package+xml":{"source":"iana","compressible":true,"extensions":["opf"]},"application/ogg":{"source":"iana","compressible":false,"extensions":["ogx"]},"application/omdoc+xml":{"source":"apache","compressible":true,"extensions":["omdoc"]},"application/onenote":{"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},"application/opc-nodeset+xml":{"source":"iana","compressible":true},"application/oscore":{"source":"iana"},"application/oxps":{"source":"iana","extensions":["oxps"]},"application/p21":{"source":"iana"},"application/p21+zip":{"source":"iana","compressible":false},"application/p2p-overlay+xml":{"source":"iana","compressible":true,"extensions":["relo"]},"application/parityfec":{"source":"iana"},"application/passport":{"source":"iana"},"application/patch-ops-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/pdf":{"source":"iana","compressible":false,"extensions":["pdf"]},"application/pdx":{"source":"iana"},"application/pem-certificate-chain":{"source":"iana"},"application/pgp-encrypted":{"source":"iana","compressible":false,"extensions":["pgp"]},"application/pgp-keys":{"source":"iana","extensions":["asc"]},"application/pgp-signature":{"source":"iana","extensions":["asc","sig"]},"application/pics-rules":{"source":"apache","extensions":["prf"]},"application/pidf+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pidf-diff+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pkcs10":{"source":"iana","extensions":["p10"]},"application/pkcs12":{"source":"iana"},"application/pkcs7-mime":{"source":"iana","extensions":["p7m","p7c"]},"application/pkcs7-signature":{"source":"iana","extensions":["p7s"]},"application/pkcs8":{"source":"iana","extensions":["p8"]},"application/pkcs8-encrypted":{"source":"iana"},"application/pkix-attr-cert":{"source":"iana","extensions":["ac"]},"application/pkix-cert":{"source":"iana","extensions":["cer"]},"application/pkix-crl":{"source":"iana","extensions":["crl"]},"application/pkix-pkipath":{"source":"iana","extensions":["pkipath"]},"application/pkixcmp":{"source":"iana","extensions":["pki"]},"application/pls+xml":{"source":"iana","compressible":true,"extensions":["pls"]},"application/poc-settings+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/postscript":{"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},"application/ppsp-tracker+json":{"source":"iana","compressible":true},"application/problem+json":{"source":"iana","compressible":true},"application/problem+xml":{"source":"iana","compressible":true},"application/provenance+xml":{"source":"iana","compressible":true,"extensions":["provx"]},"application/prs.alvestrand.titrax-sheet":{"source":"iana"},"application/prs.cww":{"source":"iana","extensions":["cww"]},"application/prs.cyn":{"source":"iana","charset":"7-BIT"},"application/prs.hpub+zip":{"source":"iana","compressible":false},"application/prs.nprend":{"source":"iana"},"application/prs.plucker":{"source":"iana"},"application/prs.rdf-xml-crypt":{"source":"iana"},"application/prs.xsf+xml":{"source":"iana","compressible":true},"application/pskc+xml":{"source":"iana","compressible":true,"extensions":["pskcxml"]},"application/pvd+json":{"source":"iana","compressible":true},"application/qsig":{"source":"iana"},"application/raml+yaml":{"compressible":true,"extensions":["raml"]},"application/raptorfec":{"source":"iana"},"application/rdap+json":{"source":"iana","compressible":true},"application/rdf+xml":{"source":"iana","compressible":true,"extensions":["rdf","owl"]},"application/reginfo+xml":{"source":"iana","compressible":true,"extensions":["rif"]},"application/relax-ng-compact-syntax":{"source":"iana","extensions":["rnc"]},"application/remote-printing":{"source":"iana"},"application/reputon+json":{"source":"iana","compressible":true},"application/resource-lists+xml":{"source":"iana","compressible":true,"extensions":["rl"]},"application/resource-lists-diff+xml":{"source":"iana","compressible":true,"extensions":["rld"]},"application/rfc+xml":{"source":"iana","compressible":true},"application/riscos":{"source":"iana"},"application/rlmi+xml":{"source":"iana","compressible":true},"application/rls-services+xml":{"source":"iana","compressible":true,"extensions":["rs"]},"application/route-apd+xml":{"source":"iana","compressible":true,"extensions":["rapd"]},"application/route-s-tsid+xml":{"source":"iana","compressible":true,"extensions":["sls"]},"application/route-usd+xml":{"source":"iana","compressible":true,"extensions":["rusd"]},"application/rpki-ghostbusters":{"source":"iana","extensions":["gbr"]},"application/rpki-manifest":{"source":"iana","extensions":["mft"]},"application/rpki-publication":{"source":"iana"},"application/rpki-roa":{"source":"iana","extensions":["roa"]},"application/rpki-updown":{"source":"iana"},"application/rsd+xml":{"source":"apache","compressible":true,"extensions":["rsd"]},"application/rss+xml":{"source":"apache","compressible":true,"extensions":["rss"]},"application/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"application/rtploopback":{"source":"iana"},"application/rtx":{"source":"iana"},"application/samlassertion+xml":{"source":"iana","compressible":true},"application/samlmetadata+xml":{"source":"iana","compressible":true},"application/sarif+json":{"source":"iana","compressible":true},"application/sarif-external-properties+json":{"source":"iana","compressible":true},"application/sbe":{"source":"iana"},"application/sbml+xml":{"source":"iana","compressible":true,"extensions":["sbml"]},"application/scaip+xml":{"source":"iana","compressible":true},"application/scim+json":{"source":"iana","compressible":true},"application/scvp-cv-request":{"source":"iana","extensions":["scq"]},"application/scvp-cv-response":{"source":"iana","extensions":["scs"]},"application/scvp-vp-request":{"source":"iana","extensions":["spq"]},"application/scvp-vp-response":{"source":"iana","extensions":["spp"]},"application/sdp":{"source":"iana","extensions":["sdp"]},"application/secevent+jwt":{"source":"iana"},"application/senml+cbor":{"source":"iana"},"application/senml+json":{"source":"iana","compressible":true},"application/senml+xml":{"source":"iana","compressible":true,"extensions":["senmlx"]},"application/senml-etch+cbor":{"source":"iana"},"application/senml-etch+json":{"source":"iana","compressible":true},"application/senml-exi":{"source":"iana"},"application/sensml+cbor":{"source":"iana"},"application/sensml+json":{"source":"iana","compressible":true},"application/sensml+xml":{"source":"iana","compressible":true,"extensions":["sensmlx"]},"application/sensml-exi":{"source":"iana"},"application/sep+xml":{"source":"iana","compressible":true},"application/sep-exi":{"source":"iana"},"application/session-info":{"source":"iana"},"application/set-payment":{"source":"iana"},"application/set-payment-initiation":{"source":"iana","extensions":["setpay"]},"application/set-registration":{"source":"iana"},"application/set-registration-initiation":{"source":"iana","extensions":["setreg"]},"application/sgml":{"source":"iana"},"application/sgml-open-catalog":{"source":"iana"},"application/shf+xml":{"source":"iana","compressible":true,"extensions":["shf"]},"application/sieve":{"source":"iana","extensions":["siv","sieve"]},"application/simple-filter+xml":{"source":"iana","compressible":true},"application/simple-message-summary":{"source":"iana"},"application/simplesymbolcontainer":{"source":"iana"},"application/sipc":{"source":"iana"},"application/slate":{"source":"iana"},"application/smil":{"source":"iana"},"application/smil+xml":{"source":"iana","compressible":true,"extensions":["smi","smil"]},"application/smpte336m":{"source":"iana"},"application/soap+fastinfoset":{"source":"iana"},"application/soap+xml":{"source":"iana","compressible":true},"application/sparql-query":{"source":"iana","extensions":["rq"]},"application/sparql-results+xml":{"source":"iana","compressible":true,"extensions":["srx"]},"application/spdx+json":{"source":"iana","compressible":true},"application/spirits-event+xml":{"source":"iana","compressible":true},"application/sql":{"source":"iana"},"application/srgs":{"source":"iana","extensions":["gram"]},"application/srgs+xml":{"source":"iana","compressible":true,"extensions":["grxml"]},"application/sru+xml":{"source":"iana","compressible":true,"extensions":["sru"]},"application/ssdl+xml":{"source":"apache","compressible":true,"extensions":["ssdl"]},"application/ssml+xml":{"source":"iana","compressible":true,"extensions":["ssml"]},"application/stix+json":{"source":"iana","compressible":true},"application/swid+xml":{"source":"iana","compressible":true,"extensions":["swidtag"]},"application/tamp-apex-update":{"source":"iana"},"application/tamp-apex-update-confirm":{"source":"iana"},"application/tamp-community-update":{"source":"iana"},"application/tamp-community-update-confirm":{"source":"iana"},"application/tamp-error":{"source":"iana"},"application/tamp-sequence-adjust":{"source":"iana"},"application/tamp-sequence-adjust-confirm":{"source":"iana"},"application/tamp-status-query":{"source":"iana"},"application/tamp-status-response":{"source":"iana"},"application/tamp-update":{"source":"iana"},"application/tamp-update-confirm":{"source":"iana"},"application/tar":{"compressible":true},"application/taxii+json":{"source":"iana","compressible":true},"application/td+json":{"source":"iana","compressible":true},"application/tei+xml":{"source":"iana","compressible":true,"extensions":["tei","teicorpus"]},"application/tetra_isi":{"source":"iana"},"application/thraud+xml":{"source":"iana","compressible":true,"extensions":["tfi"]},"application/timestamp-query":{"source":"iana"},"application/timestamp-reply":{"source":"iana"},"application/timestamped-data":{"source":"iana","extensions":["tsd"]},"application/tlsrpt+gzip":{"source":"iana"},"application/tlsrpt+json":{"source":"iana","compressible":true},"application/tnauthlist":{"source":"iana"},"application/token-introspection+jwt":{"source":"iana"},"application/toml":{"compressible":true,"extensions":["toml"]},"application/trickle-ice-sdpfrag":{"source":"iana"},"application/trig":{"source":"iana","extensions":["trig"]},"application/ttml+xml":{"source":"iana","compressible":true,"extensions":["ttml"]},"application/tve-trigger":{"source":"iana"},"application/tzif":{"source":"iana"},"application/tzif-leap":{"source":"iana"},"application/ubjson":{"compressible":false,"extensions":["ubj"]},"application/ulpfec":{"source":"iana"},"application/urc-grpsheet+xml":{"source":"iana","compressible":true},"application/urc-ressheet+xml":{"source":"iana","compressible":true,"extensions":["rsheet"]},"application/urc-targetdesc+xml":{"source":"iana","compressible":true,"extensions":["td"]},"application/urc-uisocketdesc+xml":{"source":"iana","compressible":true},"application/vcard+json":{"source":"iana","compressible":true},"application/vcard+xml":{"source":"iana","compressible":true},"application/vemmi":{"source":"iana"},"application/vividence.scriptfile":{"source":"apache"},"application/vnd.1000minds.decision-model+xml":{"source":"iana","compressible":true,"extensions":["1km"]},"application/vnd.3gpp-prose+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose-pc3ch+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-v2x-local-service-information":{"source":"iana"},"application/vnd.3gpp.5gnas":{"source":"iana"},"application/vnd.3gpp.access-transfer-events+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.bsf+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gmop+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gtpc":{"source":"iana"},"application/vnd.3gpp.interworking-data":{"source":"iana"},"application/vnd.3gpp.lpp":{"source":"iana"},"application/vnd.3gpp.mc-signalling-ear":{"source":"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-payload":{"source":"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-signalling":{"source":"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-floor-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-signed+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-init-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-transmission-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mid-call+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ngap":{"source":"iana"},"application/vnd.3gpp.pfcp":{"source":"iana"},"application/vnd.3gpp.pic-bw-large":{"source":"iana","extensions":["plb"]},"application/vnd.3gpp.pic-bw-small":{"source":"iana","extensions":["psb"]},"application/vnd.3gpp.pic-bw-var":{"source":"iana","extensions":["pvb"]},"application/vnd.3gpp.s1ap":{"source":"iana"},"application/vnd.3gpp.sms":{"source":"iana"},"application/vnd.3gpp.sms+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-ext+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.state-and-event-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ussd+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.bcmcsinfo+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.sms":{"source":"iana"},"application/vnd.3gpp2.tcap":{"source":"iana","extensions":["tcap"]},"application/vnd.3lightssoftware.imagescal":{"source":"iana"},"application/vnd.3m.post-it-notes":{"source":"iana","extensions":["pwn"]},"application/vnd.accpac.simply.aso":{"source":"iana","extensions":["aso"]},"application/vnd.accpac.simply.imp":{"source":"iana","extensions":["imp"]},"application/vnd.acucobol":{"source":"iana","extensions":["acu"]},"application/vnd.acucorp":{"source":"iana","extensions":["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{"source":"apache","compressible":false,"extensions":["air"]},"application/vnd.adobe.flash.movie":{"source":"iana"},"application/vnd.adobe.formscentral.fcdt":{"source":"iana","extensions":["fcdt"]},"application/vnd.adobe.fxp":{"source":"iana","extensions":["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{"source":"iana"},"application/vnd.adobe.xdp+xml":{"source":"iana","compressible":true,"extensions":["xdp"]},"application/vnd.adobe.xfdf":{"source":"iana","extensions":["xfdf"]},"application/vnd.aether.imp":{"source":"iana"},"application/vnd.afpc.afplinedata":{"source":"iana"},"application/vnd.afpc.afplinedata-pagedef":{"source":"iana"},"application/vnd.afpc.cmoca-cmresource":{"source":"iana"},"application/vnd.afpc.foca-charset":{"source":"iana"},"application/vnd.afpc.foca-codedfont":{"source":"iana"},"application/vnd.afpc.foca-codepage":{"source":"iana"},"application/vnd.afpc.modca":{"source":"iana"},"application/vnd.afpc.modca-cmtable":{"source":"iana"},"application/vnd.afpc.modca-formdef":{"source":"iana"},"application/vnd.afpc.modca-mediummap":{"source":"iana"},"application/vnd.afpc.modca-objectcontainer":{"source":"iana"},"application/vnd.afpc.modca-overlay":{"source":"iana"},"application/vnd.afpc.modca-pagesegment":{"source":"iana"},"application/vnd.age":{"source":"iana","extensions":["age"]},"application/vnd.ah-barcode":{"source":"iana"},"application/vnd.ahead.space":{"source":"iana","extensions":["ahead"]},"application/vnd.airzip.filesecure.azf":{"source":"iana","extensions":["azf"]},"application/vnd.airzip.filesecure.azs":{"source":"iana","extensions":["azs"]},"application/vnd.amadeus+json":{"source":"iana","compressible":true},"application/vnd.amazon.ebook":{"source":"apache","extensions":["azw"]},"application/vnd.amazon.mobi8-ebook":{"source":"iana"},"application/vnd.americandynamics.acc":{"source":"iana","extensions":["acc"]},"application/vnd.amiga.ami":{"source":"iana","extensions":["ami"]},"application/vnd.amundsen.maze+xml":{"source":"iana","compressible":true},"application/vnd.android.ota":{"source":"iana"},"application/vnd.android.package-archive":{"source":"apache","compressible":false,"extensions":["apk"]},"application/vnd.anki":{"source":"iana"},"application/vnd.anser-web-certificate-issue-initiation":{"source":"iana","extensions":["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{"source":"apache","extensions":["fti"]},"application/vnd.antix.game-component":{"source":"iana","extensions":["atx"]},"application/vnd.apache.arrow.file":{"source":"iana"},"application/vnd.apache.arrow.stream":{"source":"iana"},"application/vnd.apache.thrift.binary":{"source":"iana"},"application/vnd.apache.thrift.compact":{"source":"iana"},"application/vnd.apache.thrift.json":{"source":"iana"},"application/vnd.api+json":{"source":"iana","compressible":true},"application/vnd.aplextor.warrp+json":{"source":"iana","compressible":true},"application/vnd.apothekende.reservation+json":{"source":"iana","compressible":true},"application/vnd.apple.installer+xml":{"source":"iana","compressible":true,"extensions":["mpkg"]},"application/vnd.apple.keynote":{"source":"iana","extensions":["key"]},"application/vnd.apple.mpegurl":{"source":"iana","extensions":["m3u8"]},"application/vnd.apple.numbers":{"source":"iana","extensions":["numbers"]},"application/vnd.apple.pages":{"source":"iana","extensions":["pages"]},"application/vnd.apple.pkpass":{"compressible":false,"extensions":["pkpass"]},"application/vnd.arastra.swi":{"source":"iana"},"application/vnd.aristanetworks.swi":{"source":"iana","extensions":["swi"]},"application/vnd.artisan+json":{"source":"iana","compressible":true},"application/vnd.artsquare":{"source":"iana"},"application/vnd.astraea-software.iota":{"source":"iana","extensions":["iota"]},"application/vnd.audiograph":{"source":"iana","extensions":["aep"]},"application/vnd.autopackage":{"source":"iana"},"application/vnd.avalon+json":{"source":"iana","compressible":true},"application/vnd.avistar+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmml+xml":{"source":"iana","compressible":true,"extensions":["bmml"]},"application/vnd.balsamiq.bmpr":{"source":"iana"},"application/vnd.banana-accounting":{"source":"iana"},"application/vnd.bbf.usp.error":{"source":"iana"},"application/vnd.bbf.usp.msg":{"source":"iana"},"application/vnd.bbf.usp.msg+json":{"source":"iana","compressible":true},"application/vnd.bekitzur-stech+json":{"source":"iana","compressible":true},"application/vnd.bint.med-content":{"source":"iana"},"application/vnd.biopax.rdf+xml":{"source":"iana","compressible":true},"application/vnd.blink-idb-value-wrapper":{"source":"iana"},"application/vnd.blueice.multipass":{"source":"iana","extensions":["mpm"]},"application/vnd.bluetooth.ep.oob":{"source":"iana"},"application/vnd.bluetooth.le.oob":{"source":"iana"},"application/vnd.bmi":{"source":"iana","extensions":["bmi"]},"application/vnd.bpf":{"source":"iana"},"application/vnd.bpf3":{"source":"iana"},"application/vnd.businessobjects":{"source":"iana","extensions":["rep"]},"application/vnd.byu.uapi+json":{"source":"iana","compressible":true},"application/vnd.cab-jscript":{"source":"iana"},"application/vnd.canon-cpdl":{"source":"iana"},"application/vnd.canon-lips":{"source":"iana"},"application/vnd.capasystems-pg+json":{"source":"iana","compressible":true},"application/vnd.cendio.thinlinc.clientconf":{"source":"iana"},"application/vnd.century-systems.tcp_stream":{"source":"iana"},"application/vnd.chemdraw+xml":{"source":"iana","compressible":true,"extensions":["cdxml"]},"application/vnd.chess-pgn":{"source":"iana"},"application/vnd.chipnuts.karaoke-mmd":{"source":"iana","extensions":["mmd"]},"application/vnd.ciedi":{"source":"iana"},"application/vnd.cinderella":{"source":"iana","extensions":["cdy"]},"application/vnd.cirpack.isdn-ext":{"source":"iana"},"application/vnd.citationstyles.style+xml":{"source":"iana","compressible":true,"extensions":["csl"]},"application/vnd.claymore":{"source":"iana","extensions":["cla"]},"application/vnd.cloanto.rp9":{"source":"iana","extensions":["rp9"]},"application/vnd.clonk.c4group":{"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{"source":"iana","extensions":["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{"source":"iana","extensions":["c11amz"]},"application/vnd.coffeescript":{"source":"iana"},"application/vnd.collabio.xodocuments.document":{"source":"iana"},"application/vnd.collabio.xodocuments.document-template":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation-template":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{"source":"iana"},"application/vnd.collection+json":{"source":"iana","compressible":true},"application/vnd.collection.doc+json":{"source":"iana","compressible":true},"application/vnd.collection.next+json":{"source":"iana","compressible":true},"application/vnd.comicbook+zip":{"source":"iana","compressible":false},"application/vnd.comicbook-rar":{"source":"iana"},"application/vnd.commerce-battelle":{"source":"iana"},"application/vnd.commonspace":{"source":"iana","extensions":["csp"]},"application/vnd.contact.cmsg":{"source":"iana","extensions":["cdbcmsg"]},"application/vnd.coreos.ignition+json":{"source":"iana","compressible":true},"application/vnd.cosmocaller":{"source":"iana","extensions":["cmc"]},"application/vnd.crick.clicker":{"source":"iana","extensions":["clkx"]},"application/vnd.crick.clicker.keyboard":{"source":"iana","extensions":["clkk"]},"application/vnd.crick.clicker.palette":{"source":"iana","extensions":["clkp"]},"application/vnd.crick.clicker.template":{"source":"iana","extensions":["clkt"]},"application/vnd.crick.clicker.wordbank":{"source":"iana","extensions":["clkw"]},"application/vnd.criticaltools.wbs+xml":{"source":"iana","compressible":true,"extensions":["wbs"]},"application/vnd.cryptii.pipe+json":{"source":"iana","compressible":true},"application/vnd.crypto-shade-file":{"source":"iana"},"application/vnd.cryptomator.encrypted":{"source":"iana"},"application/vnd.cryptomator.vault":{"source":"iana"},"application/vnd.ctc-posml":{"source":"iana","extensions":["pml"]},"application/vnd.ctct.ws+xml":{"source":"iana","compressible":true},"application/vnd.cups-pdf":{"source":"iana"},"application/vnd.cups-postscript":{"source":"iana"},"application/vnd.cups-ppd":{"source":"iana","extensions":["ppd"]},"application/vnd.cups-raster":{"source":"iana"},"application/vnd.cups-raw":{"source":"iana"},"application/vnd.curl":{"source":"iana"},"application/vnd.curl.car":{"source":"apache","extensions":["car"]},"application/vnd.curl.pcurl":{"source":"apache","extensions":["pcurl"]},"application/vnd.cyan.dean.root+xml":{"source":"iana","compressible":true},"application/vnd.cybank":{"source":"iana"},"application/vnd.cyclonedx+json":{"source":"iana","compressible":true},"application/vnd.cyclonedx+xml":{"source":"iana","compressible":true},"application/vnd.d2l.coursepackage1p0+zip":{"source":"iana","compressible":false},"application/vnd.d3m-dataset":{"source":"iana"},"application/vnd.d3m-problem":{"source":"iana"},"application/vnd.dart":{"source":"iana","compressible":true,"extensions":["dart"]},"application/vnd.data-vision.rdz":{"source":"iana","extensions":["rdz"]},"application/vnd.datapackage+json":{"source":"iana","compressible":true},"application/vnd.dataresource+json":{"source":"iana","compressible":true},"application/vnd.dbf":{"source":"iana","extensions":["dbf"]},"application/vnd.debian.binary-package":{"source":"iana"},"application/vnd.dece.data":{"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{"source":"iana","compressible":true,"extensions":["uvt","uvvt"]},"application/vnd.dece.unspecified":{"source":"iana","extensions":["uvx","uvvx"]},"application/vnd.dece.zip":{"source":"iana","extensions":["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{"source":"iana","extensions":["fe_launch"]},"application/vnd.desmume.movie":{"source":"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{"source":"iana"},"application/vnd.dm.delegation+xml":{"source":"iana","compressible":true},"application/vnd.dna":{"source":"iana","extensions":["dna"]},"application/vnd.document+json":{"source":"iana","compressible":true},"application/vnd.dolby.mlp":{"source":"apache","extensions":["mlp"]},"application/vnd.dolby.mobile.1":{"source":"iana"},"application/vnd.dolby.mobile.2":{"source":"iana"},"application/vnd.doremir.scorecloud-binary-document":{"source":"iana"},"application/vnd.dpgraph":{"source":"iana","extensions":["dpg"]},"application/vnd.dreamfactory":{"source":"iana","extensions":["dfac"]},"application/vnd.drive+json":{"source":"iana","compressible":true},"application/vnd.ds-keypoint":{"source":"apache","extensions":["kpxx"]},"application/vnd.dtg.local":{"source":"iana"},"application/vnd.dtg.local.flash":{"source":"iana"},"application/vnd.dtg.local.html":{"source":"iana"},"application/vnd.dvb.ait":{"source":"iana","extensions":["ait"]},"application/vnd.dvb.dvbisl+xml":{"source":"iana","compressible":true},"application/vnd.dvb.dvbj":{"source":"iana"},"application/vnd.dvb.esgcontainer":{"source":"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess2":{"source":"iana"},"application/vnd.dvb.ipdcesgpdd":{"source":"iana"},"application/vnd.dvb.ipdcroaming":{"source":"iana"},"application/vnd.dvb.iptv.alfec-base":{"source":"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{"source":"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-container+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-generic+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-msglist+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-request+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-response+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-init+xml":{"source":"iana","compressible":true},"application/vnd.dvb.pfr":{"source":"iana"},"application/vnd.dvb.service":{"source":"iana","extensions":["svc"]},"application/vnd.dxr":{"source":"iana"},"application/vnd.dynageo":{"source":"iana","extensions":["geo"]},"application/vnd.dzr":{"source":"iana"},"application/vnd.easykaraoke.cdgdownload":{"source":"iana"},"application/vnd.ecdis-update":{"source":"iana"},"application/vnd.ecip.rlp":{"source":"iana"},"application/vnd.eclipse.ditto+json":{"source":"iana","compressible":true},"application/vnd.ecowin.chart":{"source":"iana","extensions":["mag"]},"application/vnd.ecowin.filerequest":{"source":"iana"},"application/vnd.ecowin.fileupdate":{"source":"iana"},"application/vnd.ecowin.series":{"source":"iana"},"application/vnd.ecowin.seriesrequest":{"source":"iana"},"application/vnd.ecowin.seriesupdate":{"source":"iana"},"application/vnd.efi.img":{"source":"iana"},"application/vnd.efi.iso":{"source":"iana"},"application/vnd.emclient.accessrequest+xml":{"source":"iana","compressible":true},"application/vnd.enliven":{"source":"iana","extensions":["nml"]},"application/vnd.enphase.envoy":{"source":"iana"},"application/vnd.eprints.data+xml":{"source":"iana","compressible":true},"application/vnd.epson.esf":{"source":"iana","extensions":["esf"]},"application/vnd.epson.msf":{"source":"iana","extensions":["msf"]},"application/vnd.epson.quickanime":{"source":"iana","extensions":["qam"]},"application/vnd.epson.salt":{"source":"iana","extensions":["slt"]},"application/vnd.epson.ssf":{"source":"iana","extensions":["ssf"]},"application/vnd.ericsson.quickcall":{"source":"iana"},"application/vnd.espass-espass+zip":{"source":"iana","compressible":false},"application/vnd.eszigno3+xml":{"source":"iana","compressible":true,"extensions":["es3","et3"]},"application/vnd.etsi.aoc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.asic-e+zip":{"source":"iana","compressible":false},"application/vnd.etsi.asic-s+zip":{"source":"iana","compressible":false},"application/vnd.etsi.cug+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvcommand+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-bc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-cod+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-npvr+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvservice+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsync+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvueprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mcid+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mheg5":{"source":"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{"source":"iana","compressible":true},"application/vnd.etsi.pstn+xml":{"source":"iana","compressible":true},"application/vnd.etsi.sci+xml":{"source":"iana","compressible":true},"application/vnd.etsi.simservs+xml":{"source":"iana","compressible":true},"application/vnd.etsi.timestamp-token":{"source":"iana"},"application/vnd.etsi.tsl+xml":{"source":"iana","compressible":true},"application/vnd.etsi.tsl.der":{"source":"iana"},"application/vnd.eu.kasparian.car+json":{"source":"iana","compressible":true},"application/vnd.eudora.data":{"source":"iana"},"application/vnd.evolv.ecig.profile":{"source":"iana"},"application/vnd.evolv.ecig.settings":{"source":"iana"},"application/vnd.evolv.ecig.theme":{"source":"iana"},"application/vnd.exstream-empower+zip":{"source":"iana","compressible":false},"application/vnd.exstream-package":{"source":"iana"},"application/vnd.ezpix-album":{"source":"iana","extensions":["ez2"]},"application/vnd.ezpix-package":{"source":"iana","extensions":["ez3"]},"application/vnd.f-secure.mobile":{"source":"iana"},"application/vnd.familysearch.gedcom+zip":{"source":"iana","compressible":false},"application/vnd.fastcopy-disk-image":{"source":"iana"},"application/vnd.fdf":{"source":"iana","extensions":["fdf"]},"application/vnd.fdsn.mseed":{"source":"iana","extensions":["mseed"]},"application/vnd.fdsn.seed":{"source":"iana","extensions":["seed","dataless"]},"application/vnd.ffsns":{"source":"iana"},"application/vnd.ficlab.flb+zip":{"source":"iana","compressible":false},"application/vnd.filmit.zfc":{"source":"iana"},"application/vnd.fints":{"source":"iana"},"application/vnd.firemonkeys.cloudcell":{"source":"iana"},"application/vnd.flographit":{"source":"iana","extensions":["gph"]},"application/vnd.fluxtime.clip":{"source":"iana","extensions":["ftc"]},"application/vnd.font-fontforge-sfd":{"source":"iana"},"application/vnd.framemaker":{"source":"iana","extensions":["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{"source":"iana","extensions":["fnc"]},"application/vnd.frogans.ltf":{"source":"iana","extensions":["ltf"]},"application/vnd.fsc.weblaunch":{"source":"iana","extensions":["fsc"]},"application/vnd.fujifilm.fb.docuworks":{"source":"iana"},"application/vnd.fujifilm.fb.docuworks.binder":{"source":"iana"},"application/vnd.fujifilm.fb.docuworks.container":{"source":"iana"},"application/vnd.fujifilm.fb.jfi+xml":{"source":"iana","compressible":true},"application/vnd.fujitsu.oasys":{"source":"iana","extensions":["oas"]},"application/vnd.fujitsu.oasys2":{"source":"iana","extensions":["oa2"]},"application/vnd.fujitsu.oasys3":{"source":"iana","extensions":["oa3"]},"application/vnd.fujitsu.oasysgp":{"source":"iana","extensions":["fg5"]},"application/vnd.fujitsu.oasysprs":{"source":"iana","extensions":["bh2"]},"application/vnd.fujixerox.art-ex":{"source":"iana"},"application/vnd.fujixerox.art4":{"source":"iana"},"application/vnd.fujixerox.ddd":{"source":"iana","extensions":["ddd"]},"application/vnd.fujixerox.docuworks":{"source":"iana","extensions":["xdw"]},"application/vnd.fujixerox.docuworks.binder":{"source":"iana","extensions":["xbd"]},"application/vnd.fujixerox.docuworks.container":{"source":"iana"},"application/vnd.fujixerox.hbpl":{"source":"iana"},"application/vnd.fut-misnet":{"source":"iana"},"application/vnd.futoin+cbor":{"source":"iana"},"application/vnd.futoin+json":{"source":"iana","compressible":true},"application/vnd.fuzzysheet":{"source":"iana","extensions":["fzs"]},"application/vnd.genomatix.tuxedo":{"source":"iana","extensions":["txd"]},"application/vnd.gentics.grd+json":{"source":"iana","compressible":true},"application/vnd.geo+json":{"source":"iana","compressible":true},"application/vnd.geocube+xml":{"source":"iana","compressible":true},"application/vnd.geogebra.file":{"source":"iana","extensions":["ggb"]},"application/vnd.geogebra.slides":{"source":"iana"},"application/vnd.geogebra.tool":{"source":"iana","extensions":["ggt"]},"application/vnd.geometry-explorer":{"source":"iana","extensions":["gex","gre"]},"application/vnd.geonext":{"source":"iana","extensions":["gxt"]},"application/vnd.geoplan":{"source":"iana","extensions":["g2w"]},"application/vnd.geospace":{"source":"iana","extensions":["g3w"]},"application/vnd.gerber":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt-response":{"source":"iana"},"application/vnd.gmx":{"source":"iana","extensions":["gmx"]},"application/vnd.google-apps.document":{"compressible":false,"extensions":["gdoc"]},"application/vnd.google-apps.presentation":{"compressible":false,"extensions":["gslides"]},"application/vnd.google-apps.spreadsheet":{"compressible":false,"extensions":["gsheet"]},"application/vnd.google-earth.kml+xml":{"source":"iana","compressible":true,"extensions":["kml"]},"application/vnd.google-earth.kmz":{"source":"iana","compressible":false,"extensions":["kmz"]},"application/vnd.gov.sk.e-form+xml":{"source":"iana","compressible":true},"application/vnd.gov.sk.e-form+zip":{"source":"iana","compressible":false},"application/vnd.gov.sk.xmldatacontainer+xml":{"source":"iana","compressible":true},"application/vnd.grafeq":{"source":"iana","extensions":["gqf","gqs"]},"application/vnd.gridmp":{"source":"iana"},"application/vnd.groove-account":{"source":"iana","extensions":["gac"]},"application/vnd.groove-help":{"source":"iana","extensions":["ghf"]},"application/vnd.groove-identity-message":{"source":"iana","extensions":["gim"]},"application/vnd.groove-injector":{"source":"iana","extensions":["grv"]},"application/vnd.groove-tool-message":{"source":"iana","extensions":["gtm"]},"application/vnd.groove-tool-template":{"source":"iana","extensions":["tpl"]},"application/vnd.groove-vcard":{"source":"iana","extensions":["vcg"]},"application/vnd.hal+json":{"source":"iana","compressible":true},"application/vnd.hal+xml":{"source":"iana","compressible":true,"extensions":["hal"]},"application/vnd.handheld-entertainment+xml":{"source":"iana","compressible":true,"extensions":["zmm"]},"application/vnd.hbci":{"source":"iana","extensions":["hbci"]},"application/vnd.hc+json":{"source":"iana","compressible":true},"application/vnd.hcl-bireports":{"source":"iana"},"application/vnd.hdt":{"source":"iana"},"application/vnd.heroku+json":{"source":"iana","compressible":true},"application/vnd.hhe.lesson-player":{"source":"iana","extensions":["les"]},"application/vnd.hl7cda+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.hl7v2+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.hp-hpgl":{"source":"iana","extensions":["hpgl"]},"application/vnd.hp-hpid":{"source":"iana","extensions":["hpid"]},"application/vnd.hp-hps":{"source":"iana","extensions":["hps"]},"application/vnd.hp-jlyt":{"source":"iana","extensions":["jlt"]},"application/vnd.hp-pcl":{"source":"iana","extensions":["pcl"]},"application/vnd.hp-pclxl":{"source":"iana","extensions":["pclxl"]},"application/vnd.httphone":{"source":"iana"},"application/vnd.hydrostatix.sof-data":{"source":"iana","extensions":["sfd-hdstx"]},"application/vnd.hyper+json":{"source":"iana","compressible":true},"application/vnd.hyper-item+json":{"source":"iana","compressible":true},"application/vnd.hyperdrive+json":{"source":"iana","compressible":true},"application/vnd.hzn-3d-crossword":{"source":"iana"},"application/vnd.ibm.afplinedata":{"source":"iana"},"application/vnd.ibm.electronic-media":{"source":"iana"},"application/vnd.ibm.minipay":{"source":"iana","extensions":["mpy"]},"application/vnd.ibm.modcap":{"source":"iana","extensions":["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{"source":"iana","extensions":["irm"]},"application/vnd.ibm.secure-container":{"source":"iana","extensions":["sc"]},"application/vnd.iccprofile":{"source":"iana","extensions":["icc","icm"]},"application/vnd.ieee.1905":{"source":"iana"},"application/vnd.igloader":{"source":"iana","extensions":["igl"]},"application/vnd.imagemeter.folder+zip":{"source":"iana","compressible":false},"application/vnd.imagemeter.image+zip":{"source":"iana","compressible":false},"application/vnd.immervision-ivp":{"source":"iana","extensions":["ivp"]},"application/vnd.immervision-ivu":{"source":"iana","extensions":["ivu"]},"application/vnd.ims.imsccv1p1":{"source":"iana"},"application/vnd.ims.imsccv1p2":{"source":"iana"},"application/vnd.ims.imsccv1p3":{"source":"iana"},"application/vnd.ims.lis.v2.result+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy.id+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{"source":"iana","compressible":true},"application/vnd.informedcontrol.rms+xml":{"source":"iana","compressible":true},"application/vnd.informix-visionary":{"source":"iana"},"application/vnd.infotech.project":{"source":"iana"},"application/vnd.infotech.project+xml":{"source":"iana","compressible":true},"application/vnd.innopath.wamp.notification":{"source":"iana"},"application/vnd.insors.igm":{"source":"iana","extensions":["igm"]},"application/vnd.intercon.formnet":{"source":"iana","extensions":["xpw","xpx"]},"application/vnd.intergeo":{"source":"iana","extensions":["i2g"]},"application/vnd.intertrust.digibox":{"source":"iana"},"application/vnd.intertrust.nncp":{"source":"iana"},"application/vnd.intu.qbo":{"source":"iana","extensions":["qbo"]},"application/vnd.intu.qfx":{"source":"iana","extensions":["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.conceptitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.knowledgeitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsmessage+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.packageitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.planningitem+xml":{"source":"iana","compressible":true},"application/vnd.ipunplugged.rcprofile":{"source":"iana","extensions":["rcprofile"]},"application/vnd.irepository.package+xml":{"source":"iana","compressible":true,"extensions":["irp"]},"application/vnd.is-xpr":{"source":"iana","extensions":["xpr"]},"application/vnd.isac.fcs":{"source":"iana","extensions":["fcs"]},"application/vnd.iso11783-10+zip":{"source":"iana","compressible":false},"application/vnd.jam":{"source":"iana","extensions":["jam"]},"application/vnd.japannet-directory-service":{"source":"iana"},"application/vnd.japannet-jpnstore-wakeup":{"source":"iana"},"application/vnd.japannet-payment-wakeup":{"source":"iana"},"application/vnd.japannet-registration":{"source":"iana"},"application/vnd.japannet-registration-wakeup":{"source":"iana"},"application/vnd.japannet-setstore-wakeup":{"source":"iana"},"application/vnd.japannet-verification":{"source":"iana"},"application/vnd.japannet-verification-wakeup":{"source":"iana"},"application/vnd.jcp.javame.midlet-rms":{"source":"iana","extensions":["rms"]},"application/vnd.jisp":{"source":"iana","extensions":["jisp"]},"application/vnd.joost.joda-archive":{"source":"iana","extensions":["joda"]},"application/vnd.jsk.isdn-ngn":{"source":"iana"},"application/vnd.kahootz":{"source":"iana","extensions":["ktz","ktr"]},"application/vnd.kde.karbon":{"source":"iana","extensions":["karbon"]},"application/vnd.kde.kchart":{"source":"iana","extensions":["chrt"]},"application/vnd.kde.kformula":{"source":"iana","extensions":["kfo"]},"application/vnd.kde.kivio":{"source":"iana","extensions":["flw"]},"application/vnd.kde.kontour":{"source":"iana","extensions":["kon"]},"application/vnd.kde.kpresenter":{"source":"iana","extensions":["kpr","kpt"]},"application/vnd.kde.kspread":{"source":"iana","extensions":["ksp"]},"application/vnd.kde.kword":{"source":"iana","extensions":["kwd","kwt"]},"application/vnd.kenameaapp":{"source":"iana","extensions":["htke"]},"application/vnd.kidspiration":{"source":"iana","extensions":["kia"]},"application/vnd.kinar":{"source":"iana","extensions":["kne","knp"]},"application/vnd.koan":{"source":"iana","extensions":["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{"source":"iana","extensions":["sse"]},"application/vnd.las":{"source":"iana"},"application/vnd.las.las+json":{"source":"iana","compressible":true},"application/vnd.las.las+xml":{"source":"iana","compressible":true,"extensions":["lasxml"]},"application/vnd.laszip":{"source":"iana"},"application/vnd.leap+json":{"source":"iana","compressible":true},"application/vnd.liberty-request+xml":{"source":"iana","compressible":true},"application/vnd.llamagraphics.life-balance.desktop":{"source":"iana","extensions":["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{"source":"iana","compressible":true,"extensions":["lbe"]},"application/vnd.logipipe.circuit+zip":{"source":"iana","compressible":false},"application/vnd.loom":{"source":"iana"},"application/vnd.lotus-1-2-3":{"source":"iana","extensions":["123"]},"application/vnd.lotus-approach":{"source":"iana","extensions":["apr"]},"application/vnd.lotus-freelance":{"source":"iana","extensions":["pre"]},"application/vnd.lotus-notes":{"source":"iana","extensions":["nsf"]},"application/vnd.lotus-organizer":{"source":"iana","extensions":["org"]},"application/vnd.lotus-screencam":{"source":"iana","extensions":["scm"]},"application/vnd.lotus-wordpro":{"source":"iana","extensions":["lwp"]},"application/vnd.macports.portpkg":{"source":"iana","extensions":["portpkg"]},"application/vnd.mapbox-vector-tile":{"source":"iana","extensions":["mvt"]},"application/vnd.marlin.drm.actiontoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.conftoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.license+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.mdcf":{"source":"iana"},"application/vnd.mason+json":{"source":"iana","compressible":true},"application/vnd.maxar.archive.3tz+zip":{"source":"iana","compressible":false},"application/vnd.maxmind.maxmind-db":{"source":"iana"},"application/vnd.mcd":{"source":"iana","extensions":["mcd"]},"application/vnd.medcalcdata":{"source":"iana","extensions":["mc1"]},"application/vnd.mediastation.cdkey":{"source":"iana","extensions":["cdkey"]},"application/vnd.meridian-slingshot":{"source":"iana"},"application/vnd.mfer":{"source":"iana","extensions":["mwf"]},"application/vnd.mfmp":{"source":"iana","extensions":["mfm"]},"application/vnd.micro+json":{"source":"iana","compressible":true},"application/vnd.micrografx.flo":{"source":"iana","extensions":["flo"]},"application/vnd.micrografx.igx":{"source":"iana","extensions":["igx"]},"application/vnd.microsoft.portable-executable":{"source":"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{"source":"iana"},"application/vnd.miele+json":{"source":"iana","compressible":true},"application/vnd.mif":{"source":"iana","extensions":["mif"]},"application/vnd.minisoft-hp3000-save":{"source":"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{"source":"iana"},"application/vnd.mobius.daf":{"source":"iana","extensions":["daf"]},"application/vnd.mobius.dis":{"source":"iana","extensions":["dis"]},"application/vnd.mobius.mbk":{"source":"iana","extensions":["mbk"]},"application/vnd.mobius.mqy":{"source":"iana","extensions":["mqy"]},"application/vnd.mobius.msl":{"source":"iana","extensions":["msl"]},"application/vnd.mobius.plc":{"source":"iana","extensions":["plc"]},"application/vnd.mobius.txf":{"source":"iana","extensions":["txf"]},"application/vnd.mophun.application":{"source":"iana","extensions":["mpn"]},"application/vnd.mophun.certificate":{"source":"iana","extensions":["mpc"]},"application/vnd.motorola.flexsuite":{"source":"iana"},"application/vnd.motorola.flexsuite.adsi":{"source":"iana"},"application/vnd.motorola.flexsuite.fis":{"source":"iana"},"application/vnd.motorola.flexsuite.gotap":{"source":"iana"},"application/vnd.motorola.flexsuite.kmr":{"source":"iana"},"application/vnd.motorola.flexsuite.ttc":{"source":"iana"},"application/vnd.motorola.flexsuite.wem":{"source":"iana"},"application/vnd.motorola.iprm":{"source":"iana"},"application/vnd.mozilla.xul+xml":{"source":"iana","compressible":true,"extensions":["xul"]},"application/vnd.ms-3mfdocument":{"source":"iana"},"application/vnd.ms-artgalry":{"source":"iana","extensions":["cil"]},"application/vnd.ms-asf":{"source":"iana"},"application/vnd.ms-cab-compressed":{"source":"iana","extensions":["cab"]},"application/vnd.ms-color.iccprofile":{"source":"apache"},"application/vnd.ms-excel":{"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{"source":"iana","extensions":["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{"source":"iana","extensions":["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{"source":"iana","extensions":["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{"source":"iana","extensions":["xltm"]},"application/vnd.ms-fontobject":{"source":"iana","compressible":true,"extensions":["eot"]},"application/vnd.ms-htmlhelp":{"source":"iana","extensions":["chm"]},"application/vnd.ms-ims":{"source":"iana","extensions":["ims"]},"application/vnd.ms-lrm":{"source":"iana","extensions":["lrm"]},"application/vnd.ms-office.activex+xml":{"source":"iana","compressible":true},"application/vnd.ms-officetheme":{"source":"iana","extensions":["thmx"]},"application/vnd.ms-opentype":{"source":"apache","compressible":true},"application/vnd.ms-outlook":{"compressible":false,"extensions":["msg"]},"application/vnd.ms-package.obfuscated-opentype":{"source":"apache"},"application/vnd.ms-pki.seccat":{"source":"apache","extensions":["cat"]},"application/vnd.ms-pki.stl":{"source":"apache","extensions":["stl"]},"application/vnd.ms-playready.initiator+xml":{"source":"iana","compressible":true},"application/vnd.ms-powerpoint":{"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{"source":"iana","extensions":["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{"source":"iana","extensions":["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{"source":"iana","extensions":["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{"source":"iana","extensions":["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{"source":"iana","extensions":["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{"source":"iana","compressible":true},"application/vnd.ms-printing.printticket+xml":{"source":"apache","compressible":true},"application/vnd.ms-printschematicket+xml":{"source":"iana","compressible":true},"application/vnd.ms-project":{"source":"iana","extensions":["mpp","mpt"]},"application/vnd.ms-tnef":{"source":"iana"},"application/vnd.ms-windows.devicepairing":{"source":"iana"},"application/vnd.ms-windows.nwprinting.oob":{"source":"iana"},"application/vnd.ms-windows.printerpairing":{"source":"iana"},"application/vnd.ms-windows.wsd.oob":{"source":"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.lic-resp":{"source":"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.meter-resp":{"source":"iana"},"application/vnd.ms-word.document.macroenabled.12":{"source":"iana","extensions":["docm"]},"application/vnd.ms-word.template.macroenabled.12":{"source":"iana","extensions":["dotm"]},"application/vnd.ms-works":{"source":"iana","extensions":["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{"source":"iana","extensions":["wpl"]},"application/vnd.ms-xpsdocument":{"source":"iana","compressible":false,"extensions":["xps"]},"application/vnd.msa-disk-image":{"source":"iana"},"application/vnd.mseq":{"source":"iana","extensions":["mseq"]},"application/vnd.msign":{"source":"iana"},"application/vnd.multiad.creator":{"source":"iana"},"application/vnd.multiad.creator.cif":{"source":"iana"},"application/vnd.music-niff":{"source":"iana"},"application/vnd.musician":{"source":"iana","extensions":["mus"]},"application/vnd.muvee.style":{"source":"iana","extensions":["msty"]},"application/vnd.mynfc":{"source":"iana","extensions":["taglet"]},"application/vnd.nacamar.ybrid+json":{"source":"iana","compressible":true},"application/vnd.ncd.control":{"source":"iana"},"application/vnd.ncd.reference":{"source":"iana"},"application/vnd.nearst.inv+json":{"source":"iana","compressible":true},"application/vnd.nebumind.line":{"source":"iana"},"application/vnd.nervana":{"source":"iana"},"application/vnd.netfpx":{"source":"iana"},"application/vnd.neurolanguage.nlu":{"source":"iana","extensions":["nlu"]},"application/vnd.nimn":{"source":"iana"},"application/vnd.nintendo.nitro.rom":{"source":"iana"},"application/vnd.nintendo.snes.rom":{"source":"iana"},"application/vnd.nitf":{"source":"iana","extensions":["ntf","nitf"]},"application/vnd.noblenet-directory":{"source":"iana","extensions":["nnd"]},"application/vnd.noblenet-sealer":{"source":"iana","extensions":["nns"]},"application/vnd.noblenet-web":{"source":"iana","extensions":["nnw"]},"application/vnd.nokia.catalogs":{"source":"iana"},"application/vnd.nokia.conml+wbxml":{"source":"iana"},"application/vnd.nokia.conml+xml":{"source":"iana","compressible":true},"application/vnd.nokia.iptv.config+xml":{"source":"iana","compressible":true},"application/vnd.nokia.isds-radio-presets":{"source":"iana"},"application/vnd.nokia.landmark+wbxml":{"source":"iana"},"application/vnd.nokia.landmark+xml":{"source":"iana","compressible":true},"application/vnd.nokia.landmarkcollection+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.ac+xml":{"source":"iana","compressible":true,"extensions":["ac"]},"application/vnd.nokia.n-gage.data":{"source":"iana","extensions":["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{"source":"iana","extensions":["n-gage"]},"application/vnd.nokia.ncd":{"source":"iana"},"application/vnd.nokia.pcd+wbxml":{"source":"iana"},"application/vnd.nokia.pcd+xml":{"source":"iana","compressible":true},"application/vnd.nokia.radio-preset":{"source":"iana","extensions":["rpst"]},"application/vnd.nokia.radio-presets":{"source":"iana","extensions":["rpss"]},"application/vnd.novadigm.edm":{"source":"iana","extensions":["edm"]},"application/vnd.novadigm.edx":{"source":"iana","extensions":["edx"]},"application/vnd.novadigm.ext":{"source":"iana","extensions":["ext"]},"application/vnd.ntt-local.content-share":{"source":"iana"},"application/vnd.ntt-local.file-transfer":{"source":"iana"},"application/vnd.ntt-local.ogw_remote-access":{"source":"iana"},"application/vnd.ntt-local.sip-ta_remote":{"source":"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{"source":"iana"},"application/vnd.oasis.opendocument.chart":{"source":"iana","extensions":["odc"]},"application/vnd.oasis.opendocument.chart-template":{"source":"iana","extensions":["otc"]},"application/vnd.oasis.opendocument.database":{"source":"iana","extensions":["odb"]},"application/vnd.oasis.opendocument.formula":{"source":"iana","extensions":["odf"]},"application/vnd.oasis.opendocument.formula-template":{"source":"iana","extensions":["odft"]},"application/vnd.oasis.opendocument.graphics":{"source":"iana","compressible":false,"extensions":["odg"]},"application/vnd.oasis.opendocument.graphics-template":{"source":"iana","extensions":["otg"]},"application/vnd.oasis.opendocument.image":{"source":"iana","extensions":["odi"]},"application/vnd.oasis.opendocument.image-template":{"source":"iana","extensions":["oti"]},"application/vnd.oasis.opendocument.presentation":{"source":"iana","compressible":false,"extensions":["odp"]},"application/vnd.oasis.opendocument.presentation-template":{"source":"iana","extensions":["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{"source":"iana","compressible":false,"extensions":["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{"source":"iana","extensions":["ots"]},"application/vnd.oasis.opendocument.text":{"source":"iana","compressible":false,"extensions":["odt"]},"application/vnd.oasis.opendocument.text-master":{"source":"iana","extensions":["odm"]},"application/vnd.oasis.opendocument.text-template":{"source":"iana","extensions":["ott"]},"application/vnd.oasis.opendocument.text-web":{"source":"iana","extensions":["oth"]},"application/vnd.obn":{"source":"iana"},"application/vnd.ocf+cbor":{"source":"iana"},"application/vnd.oci.image.manifest.v1+json":{"source":"iana","compressible":true},"application/vnd.oftn.l10n+json":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessdownload+xml":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessstreaming+xml":{"source":"iana","compressible":true},"application/vnd.oipf.cspg-hexbinary":{"source":"iana"},"application/vnd.oipf.dae.svg+xml":{"source":"iana","compressible":true},"application/vnd.oipf.dae.xhtml+xml":{"source":"iana","compressible":true},"application/vnd.oipf.mippvcontrolmessage+xml":{"source":"iana","compressible":true},"application/vnd.oipf.pae.gem":{"source":"iana"},"application/vnd.oipf.spdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.oipf.spdlist+xml":{"source":"iana","compressible":true},"application/vnd.oipf.ueprofile+xml":{"source":"iana","compressible":true},"application/vnd.oipf.userprofile+xml":{"source":"iana","compressible":true},"application/vnd.olpc-sugar":{"source":"iana","extensions":["xo"]},"application/vnd.oma-scws-config":{"source":"iana"},"application/vnd.oma-scws-http-request":{"source":"iana"},"application/vnd.oma-scws-http-response":{"source":"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.drm-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.imd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.ltkm":{"source":"iana"},"application/vnd.oma.bcast.notification+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.provisioningtrigger":{"source":"iana"},"application/vnd.oma.bcast.sgboot":{"source":"iana"},"application/vnd.oma.bcast.sgdd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sgdu":{"source":"iana"},"application/vnd.oma.bcast.simple-symbol-container":{"source":"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sprov+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.stkm":{"source":"iana"},"application/vnd.oma.cab-address-book+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-feature-handler+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-pcc+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-subs-invite+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-user-prefs+xml":{"source":"iana","compressible":true},"application/vnd.oma.dcd":{"source":"iana"},"application/vnd.oma.dcdc":{"source":"iana"},"application/vnd.oma.dd2+xml":{"source":"iana","compressible":true,"extensions":["dd2"]},"application/vnd.oma.drm.risd+xml":{"source":"iana","compressible":true},"application/vnd.oma.group-usage-list+xml":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+cbor":{"source":"iana"},"application/vnd.oma.lwm2m+json":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+tlv":{"source":"iana"},"application/vnd.oma.pal+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.detailed-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.final-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.groups+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.invocation-descriptor+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.optimized-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.push":{"source":"iana"},"application/vnd.oma.scidm.messages+xml":{"source":"iana","compressible":true},"application/vnd.oma.xcap-directory+xml":{"source":"iana","compressible":true},"application/vnd.omads-email+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-file+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-folder+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omaloc-supl-init":{"source":"iana"},"application/vnd.onepager":{"source":"iana"},"application/vnd.onepagertamp":{"source":"iana"},"application/vnd.onepagertamx":{"source":"iana"},"application/vnd.onepagertat":{"source":"iana"},"application/vnd.onepagertatp":{"source":"iana"},"application/vnd.onepagertatx":{"source":"iana"},"application/vnd.openblox.game+xml":{"source":"iana","compressible":true,"extensions":["obgx"]},"application/vnd.openblox.game-binary":{"source":"iana"},"application/vnd.openeye.oeb":{"source":"iana"},"application/vnd.openofficeorg.extension":{"source":"apache","extensions":["oxt"]},"application/vnd.openstreetmap.data+xml":{"source":"iana","compressible":true,"extensions":["osm"]},"application/vnd.opentimestamps.ots":{"source":"iana"},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawing+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{"source":"iana","compressible":false,"extensions":["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slide":{"source":"iana","extensions":["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{"source":"iana","extensions":["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.template":{"source":"iana","extensions":["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{"source":"iana","compressible":false,"extensions":["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{"source":"iana","extensions":["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.theme+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.vmldrawing":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{"source":"iana","compressible":false,"extensions":["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{"source":"iana","extensions":["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.core-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.relationships+xml":{"source":"iana","compressible":true},"application/vnd.oracle.resource+json":{"source":"iana","compressible":true},"application/vnd.orange.indata":{"source":"iana"},"application/vnd.osa.netdeploy":{"source":"iana"},"application/vnd.osgeo.mapguide.package":{"source":"iana","extensions":["mgp"]},"application/vnd.osgi.bundle":{"source":"iana"},"application/vnd.osgi.dp":{"source":"iana","extensions":["dp"]},"application/vnd.osgi.subsystem":{"source":"iana","extensions":["esa"]},"application/vnd.otps.ct-kip+xml":{"source":"iana","compressible":true},"application/vnd.oxli.countgraph":{"source":"iana"},"application/vnd.pagerduty+json":{"source":"iana","compressible":true},"application/vnd.palm":{"source":"iana","extensions":["pdb","pqa","oprc"]},"application/vnd.panoply":{"source":"iana"},"application/vnd.paos.xml":{"source":"iana"},"application/vnd.patentdive":{"source":"iana"},"application/vnd.patientecommsdoc":{"source":"iana"},"application/vnd.pawaafile":{"source":"iana","extensions":["paw"]},"application/vnd.pcos":{"source":"iana"},"application/vnd.pg.format":{"source":"iana","extensions":["str"]},"application/vnd.pg.osasli":{"source":"iana","extensions":["ei6"]},"application/vnd.piaccess.application-licence":{"source":"iana"},"application/vnd.picsel":{"source":"iana","extensions":["efif"]},"application/vnd.pmi.widget":{"source":"iana","extensions":["wg"]},"application/vnd.poc.group-advertisement+xml":{"source":"iana","compressible":true},"application/vnd.pocketlearn":{"source":"iana","extensions":["plf"]},"application/vnd.powerbuilder6":{"source":"iana","extensions":["pbd"]},"application/vnd.powerbuilder6-s":{"source":"iana"},"application/vnd.powerbuilder7":{"source":"iana"},"application/vnd.powerbuilder7-s":{"source":"iana"},"application/vnd.powerbuilder75":{"source":"iana"},"application/vnd.powerbuilder75-s":{"source":"iana"},"application/vnd.preminet":{"source":"iana"},"application/vnd.previewsystems.box":{"source":"iana","extensions":["box"]},"application/vnd.proteus.magazine":{"source":"iana","extensions":["mgz"]},"application/vnd.psfs":{"source":"iana"},"application/vnd.publishare-delta-tree":{"source":"iana","extensions":["qps"]},"application/vnd.pvi.ptid1":{"source":"iana","extensions":["ptid"]},"application/vnd.pwg-multiplexed":{"source":"iana"},"application/vnd.pwg-xhtml-print+xml":{"source":"iana","compressible":true},"application/vnd.qualcomm.brew-app-res":{"source":"iana"},"application/vnd.quarantainenet":{"source":"iana"},"application/vnd.quark.quarkxpress":{"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{"source":"iana"},"application/vnd.radisys.moml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conn+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-stream+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-base+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-detect+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-group+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-speech+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-transform+xml":{"source":"iana","compressible":true},"application/vnd.rainstor.data":{"source":"iana"},"application/vnd.rapid":{"source":"iana"},"application/vnd.rar":{"source":"iana","extensions":["rar"]},"application/vnd.realvnc.bed":{"source":"iana","extensions":["bed"]},"application/vnd.recordare.musicxml":{"source":"iana","extensions":["mxl"]},"application/vnd.recordare.musicxml+xml":{"source":"iana","compressible":true,"extensions":["musicxml"]},"application/vnd.renlearn.rlprint":{"source":"iana"},"application/vnd.resilient.logic":{"source":"iana"},"application/vnd.restful+json":{"source":"iana","compressible":true},"application/vnd.rig.cryptonote":{"source":"iana","extensions":["cryptonote"]},"application/vnd.rim.cod":{"source":"apache","extensions":["cod"]},"application/vnd.rn-realmedia":{"source":"apache","extensions":["rm"]},"application/vnd.rn-realmedia-vbr":{"source":"apache","extensions":["rmvb"]},"application/vnd.route66.link66+xml":{"source":"iana","compressible":true,"extensions":["link66"]},"application/vnd.rs-274x":{"source":"iana"},"application/vnd.ruckus.download":{"source":"iana"},"application/vnd.s3sms":{"source":"iana"},"application/vnd.sailingtracker.track":{"source":"iana","extensions":["st"]},"application/vnd.sar":{"source":"iana"},"application/vnd.sbm.cid":{"source":"iana"},"application/vnd.sbm.mid2":{"source":"iana"},"application/vnd.scribus":{"source":"iana"},"application/vnd.sealed.3df":{"source":"iana"},"application/vnd.sealed.csf":{"source":"iana"},"application/vnd.sealed.doc":{"source":"iana"},"application/vnd.sealed.eml":{"source":"iana"},"application/vnd.sealed.mht":{"source":"iana"},"application/vnd.sealed.net":{"source":"iana"},"application/vnd.sealed.ppt":{"source":"iana"},"application/vnd.sealed.tiff":{"source":"iana"},"application/vnd.sealed.xls":{"source":"iana"},"application/vnd.sealedmedia.softseal.html":{"source":"iana"},"application/vnd.sealedmedia.softseal.pdf":{"source":"iana"},"application/vnd.seemail":{"source":"iana","extensions":["see"]},"application/vnd.seis+json":{"source":"iana","compressible":true},"application/vnd.sema":{"source":"iana","extensions":["sema"]},"application/vnd.semd":{"source":"iana","extensions":["semd"]},"application/vnd.semf":{"source":"iana","extensions":["semf"]},"application/vnd.shade-save-file":{"source":"iana"},"application/vnd.shana.informed.formdata":{"source":"iana","extensions":["ifm"]},"application/vnd.shana.informed.formtemplate":{"source":"iana","extensions":["itp"]},"application/vnd.shana.informed.interchange":{"source":"iana","extensions":["iif"]},"application/vnd.shana.informed.package":{"source":"iana","extensions":["ipk"]},"application/vnd.shootproof+json":{"source":"iana","compressible":true},"application/vnd.shopkick+json":{"source":"iana","compressible":true},"application/vnd.shp":{"source":"iana"},"application/vnd.shx":{"source":"iana"},"application/vnd.sigrok.session":{"source":"iana"},"application/vnd.simtech-mindmapper":{"source":"iana","extensions":["twd","twds"]},"application/vnd.siren+json":{"source":"iana","compressible":true},"application/vnd.smaf":{"source":"iana","extensions":["mmf"]},"application/vnd.smart.notebook":{"source":"iana"},"application/vnd.smart.teacher":{"source":"iana","extensions":["teacher"]},"application/vnd.snesdev-page-table":{"source":"iana"},"application/vnd.software602.filler.form+xml":{"source":"iana","compressible":true,"extensions":["fo"]},"application/vnd.software602.filler.form-xml-zip":{"source":"iana"},"application/vnd.solent.sdkm+xml":{"source":"iana","compressible":true,"extensions":["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{"source":"iana","extensions":["dxp"]},"application/vnd.spotfire.sfs":{"source":"iana","extensions":["sfs"]},"application/vnd.sqlite3":{"source":"iana"},"application/vnd.sss-cod":{"source":"iana"},"application/vnd.sss-dtf":{"source":"iana"},"application/vnd.sss-ntf":{"source":"iana"},"application/vnd.stardivision.calc":{"source":"apache","extensions":["sdc"]},"application/vnd.stardivision.draw":{"source":"apache","extensions":["sda"]},"application/vnd.stardivision.impress":{"source":"apache","extensions":["sdd"]},"application/vnd.stardivision.math":{"source":"apache","extensions":["smf"]},"application/vnd.stardivision.writer":{"source":"apache","extensions":["sdw","vor"]},"application/vnd.stardivision.writer-global":{"source":"apache","extensions":["sgl"]},"application/vnd.stepmania.package":{"source":"iana","extensions":["smzip"]},"application/vnd.stepmania.stepchart":{"source":"iana","extensions":["sm"]},"application/vnd.street-stream":{"source":"iana"},"application/vnd.sun.wadl+xml":{"source":"iana","compressible":true,"extensions":["wadl"]},"application/vnd.sun.xml.calc":{"source":"apache","extensions":["sxc"]},"application/vnd.sun.xml.calc.template":{"source":"apache","extensions":["stc"]},"application/vnd.sun.xml.draw":{"source":"apache","extensions":["sxd"]},"application/vnd.sun.xml.draw.template":{"source":"apache","extensions":["std"]},"application/vnd.sun.xml.impress":{"source":"apache","extensions":["sxi"]},"application/vnd.sun.xml.impress.template":{"source":"apache","extensions":["sti"]},"application/vnd.sun.xml.math":{"source":"apache","extensions":["sxm"]},"application/vnd.sun.xml.writer":{"source":"apache","extensions":["sxw"]},"application/vnd.sun.xml.writer.global":{"source":"apache","extensions":["sxg"]},"application/vnd.sun.xml.writer.template":{"source":"apache","extensions":["stw"]},"application/vnd.sus-calendar":{"source":"iana","extensions":["sus","susp"]},"application/vnd.svd":{"source":"iana","extensions":["svd"]},"application/vnd.swiftview-ics":{"source":"iana"},"application/vnd.sycle+xml":{"source":"iana","compressible":true},"application/vnd.syft+json":{"source":"iana","compressible":true},"application/vnd.symbian.install":{"source":"apache","extensions":["sis","sisx"]},"application/vnd.syncml+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xsm"]},"application/vnd.syncml.dm+wbxml":{"source":"iana","charset":"UTF-8","extensions":["bdm"]},"application/vnd.syncml.dm+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xdm"]},"application/vnd.syncml.dm.notification":{"source":"iana"},"application/vnd.syncml.dmddf+wbxml":{"source":"iana"},"application/vnd.syncml.dmddf+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{"source":"iana"},"application/vnd.syncml.dmtnds+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.syncml.ds.notification":{"source":"iana"},"application/vnd.tableschema+json":{"source":"iana","compressible":true},"application/vnd.tao.intent-module-archive":{"source":"iana","extensions":["tao"]},"application/vnd.tcpdump.pcap":{"source":"iana","extensions":["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{"source":"iana","compressible":true},"application/vnd.tmd.mediaflex.api+xml":{"source":"iana","compressible":true},"application/vnd.tml":{"source":"iana"},"application/vnd.tmobile-livetv":{"source":"iana","extensions":["tmo"]},"application/vnd.tri.onesource":{"source":"iana"},"application/vnd.trid.tpt":{"source":"iana","extensions":["tpt"]},"application/vnd.triscape.mxs":{"source":"iana","extensions":["mxs"]},"application/vnd.trueapp":{"source":"iana","extensions":["tra"]},"application/vnd.truedoc":{"source":"iana"},"application/vnd.ubisoft.webplayer":{"source":"iana"},"application/vnd.ufdl":{"source":"iana","extensions":["ufd","ufdl"]},"application/vnd.uiq.theme":{"source":"iana","extensions":["utz"]},"application/vnd.umajin":{"source":"iana","extensions":["umj"]},"application/vnd.unity":{"source":"iana","extensions":["unityweb"]},"application/vnd.uoml+xml":{"source":"iana","compressible":true,"extensions":["uoml"]},"application/vnd.uplanet.alert":{"source":"iana"},"application/vnd.uplanet.alert-wbxml":{"source":"iana"},"application/vnd.uplanet.bearer-choice":{"source":"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{"source":"iana"},"application/vnd.uplanet.cacheop":{"source":"iana"},"application/vnd.uplanet.cacheop-wbxml":{"source":"iana"},"application/vnd.uplanet.channel":{"source":"iana"},"application/vnd.uplanet.channel-wbxml":{"source":"iana"},"application/vnd.uplanet.list":{"source":"iana"},"application/vnd.uplanet.list-wbxml":{"source":"iana"},"application/vnd.uplanet.listcmd":{"source":"iana"},"application/vnd.uplanet.listcmd-wbxml":{"source":"iana"},"application/vnd.uplanet.signal":{"source":"iana"},"application/vnd.uri-map":{"source":"iana"},"application/vnd.valve.source.material":{"source":"iana"},"application/vnd.vcx":{"source":"iana","extensions":["vcx"]},"application/vnd.vd-study":{"source":"iana"},"application/vnd.vectorworks":{"source":"iana"},"application/vnd.vel+json":{"source":"iana","compressible":true},"application/vnd.verimatrix.vcas":{"source":"iana"},"application/vnd.veritone.aion+json":{"source":"iana","compressible":true},"application/vnd.veryant.thin":{"source":"iana"},"application/vnd.ves.encrypted":{"source":"iana"},"application/vnd.vidsoft.vidconference":{"source":"iana"},"application/vnd.visio":{"source":"iana","extensions":["vsd","vst","vss","vsw"]},"application/vnd.visionary":{"source":"iana","extensions":["vis"]},"application/vnd.vividence.scriptfile":{"source":"iana"},"application/vnd.vsf":{"source":"iana","extensions":["vsf"]},"application/vnd.wap.sic":{"source":"iana"},"application/vnd.wap.slc":{"source":"iana"},"application/vnd.wap.wbxml":{"source":"iana","charset":"UTF-8","extensions":["wbxml"]},"application/vnd.wap.wmlc":{"source":"iana","extensions":["wmlc"]},"application/vnd.wap.wmlscriptc":{"source":"iana","extensions":["wmlsc"]},"application/vnd.webturbo":{"source":"iana","extensions":["wtb"]},"application/vnd.wfa.dpp":{"source":"iana"},"application/vnd.wfa.p2p":{"source":"iana"},"application/vnd.wfa.wsc":{"source":"iana"},"application/vnd.windows.devicepairing":{"source":"iana"},"application/vnd.wmc":{"source":"iana"},"application/vnd.wmf.bootstrap":{"source":"iana"},"application/vnd.wolfram.mathematica":{"source":"iana"},"application/vnd.wolfram.mathematica.package":{"source":"iana"},"application/vnd.wolfram.player":{"source":"iana","extensions":["nbp"]},"application/vnd.wordperfect":{"source":"iana","extensions":["wpd"]},"application/vnd.wqd":{"source":"iana","extensions":["wqd"]},"application/vnd.wrq-hp3000-labelled":{"source":"iana"},"application/vnd.wt.stf":{"source":"iana","extensions":["stf"]},"application/vnd.wv.csp+wbxml":{"source":"iana"},"application/vnd.wv.csp+xml":{"source":"iana","compressible":true},"application/vnd.wv.ssp+xml":{"source":"iana","compressible":true},"application/vnd.xacml+json":{"source":"iana","compressible":true},"application/vnd.xara":{"source":"iana","extensions":["xar"]},"application/vnd.xfdl":{"source":"iana","extensions":["xfdl"]},"application/vnd.xfdl.webform":{"source":"iana"},"application/vnd.xmi+xml":{"source":"iana","compressible":true},"application/vnd.xmpie.cpkg":{"source":"iana"},"application/vnd.xmpie.dpkg":{"source":"iana"},"application/vnd.xmpie.plan":{"source":"iana"},"application/vnd.xmpie.ppkg":{"source":"iana"},"application/vnd.xmpie.xlim":{"source":"iana"},"application/vnd.yamaha.hv-dic":{"source":"iana","extensions":["hvd"]},"application/vnd.yamaha.hv-script":{"source":"iana","extensions":["hvs"]},"application/vnd.yamaha.hv-voice":{"source":"iana","extensions":["hvp"]},"application/vnd.yamaha.openscoreformat":{"source":"iana","extensions":["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{"source":"iana","compressible":true,"extensions":["osfpvg"]},"application/vnd.yamaha.remote-setup":{"source":"iana"},"application/vnd.yamaha.smaf-audio":{"source":"iana","extensions":["saf"]},"application/vnd.yamaha.smaf-phrase":{"source":"iana","extensions":["spf"]},"application/vnd.yamaha.through-ngn":{"source":"iana"},"application/vnd.yamaha.tunnel-udpencap":{"source":"iana"},"application/vnd.yaoweme":{"source":"iana"},"application/vnd.yellowriver-custom-menu":{"source":"iana","extensions":["cmp"]},"application/vnd.youtube.yt":{"source":"iana"},"application/vnd.zul":{"source":"iana","extensions":["zir","zirz"]},"application/vnd.zzazz.deck+xml":{"source":"iana","compressible":true,"extensions":["zaz"]},"application/voicexml+xml":{"source":"iana","compressible":true,"extensions":["vxml"]},"application/voucher-cms+json":{"source":"iana","compressible":true},"application/vq-rtcpxr":{"source":"iana"},"application/wasm":{"source":"iana","compressible":true,"extensions":["wasm"]},"application/watcherinfo+xml":{"source":"iana","compressible":true,"extensions":["wif"]},"application/webpush-options+json":{"source":"iana","compressible":true},"application/whoispp-query":{"source":"iana"},"application/whoispp-response":{"source":"iana"},"application/widget":{"source":"iana","extensions":["wgt"]},"application/winhlp":{"source":"apache","extensions":["hlp"]},"application/wita":{"source":"iana"},"application/wordperfect5.1":{"source":"iana"},"application/wsdl+xml":{"source":"iana","compressible":true,"extensions":["wsdl"]},"application/wspolicy+xml":{"source":"iana","compressible":true,"extensions":["wspolicy"]},"application/x-7z-compressed":{"source":"apache","compressible":false,"extensions":["7z"]},"application/x-abiword":{"source":"apache","extensions":["abw"]},"application/x-ace-compressed":{"source":"apache","extensions":["ace"]},"application/x-amf":{"source":"apache"},"application/x-apple-diskimage":{"source":"apache","extensions":["dmg"]},"application/x-arj":{"compressible":false,"extensions":["arj"]},"application/x-authorware-bin":{"source":"apache","extensions":["aab","x32","u32","vox"]},"application/x-authorware-map":{"source":"apache","extensions":["aam"]},"application/x-authorware-seg":{"source":"apache","extensions":["aas"]},"application/x-bcpio":{"source":"apache","extensions":["bcpio"]},"application/x-bdoc":{"compressible":false,"extensions":["bdoc"]},"application/x-bittorrent":{"source":"apache","extensions":["torrent"]},"application/x-blorb":{"source":"apache","extensions":["blb","blorb"]},"application/x-bzip":{"source":"apache","compressible":false,"extensions":["bz"]},"application/x-bzip2":{"source":"apache","compressible":false,"extensions":["bz2","boz"]},"application/x-cbr":{"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{"source":"apache","extensions":["vcd"]},"application/x-cfs-compressed":{"source":"apache","extensions":["cfs"]},"application/x-chat":{"source":"apache","extensions":["chat"]},"application/x-chess-pgn":{"source":"apache","extensions":["pgn"]},"application/x-chrome-extension":{"extensions":["crx"]},"application/x-cocoa":{"source":"nginx","extensions":["cco"]},"application/x-compress":{"source":"apache"},"application/x-conference":{"source":"apache","extensions":["nsc"]},"application/x-cpio":{"source":"apache","extensions":["cpio"]},"application/x-csh":{"source":"apache","extensions":["csh"]},"application/x-deb":{"compressible":false},"application/x-debian-package":{"source":"apache","extensions":["deb","udeb"]},"application/x-dgc-compressed":{"source":"apache","extensions":["dgc"]},"application/x-director":{"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{"source":"apache","extensions":["wad"]},"application/x-dtbncx+xml":{"source":"apache","compressible":true,"extensions":["ncx"]},"application/x-dtbook+xml":{"source":"apache","compressible":true,"extensions":["dtb"]},"application/x-dtbresource+xml":{"source":"apache","compressible":true,"extensions":["res"]},"application/x-dvi":{"source":"apache","compressible":false,"extensions":["dvi"]},"application/x-envoy":{"source":"apache","extensions":["evy"]},"application/x-eva":{"source":"apache","extensions":["eva"]},"application/x-font-bdf":{"source":"apache","extensions":["bdf"]},"application/x-font-dos":{"source":"apache"},"application/x-font-framemaker":{"source":"apache"},"application/x-font-ghostscript":{"source":"apache","extensions":["gsf"]},"application/x-font-libgrx":{"source":"apache"},"application/x-font-linux-psf":{"source":"apache","extensions":["psf"]},"application/x-font-pcf":{"source":"apache","extensions":["pcf"]},"application/x-font-snf":{"source":"apache","extensions":["snf"]},"application/x-font-speedo":{"source":"apache"},"application/x-font-sunos-news":{"source":"apache"},"application/x-font-type1":{"source":"apache","extensions":["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{"source":"apache"},"application/x-freearc":{"source":"apache","extensions":["arc"]},"application/x-futuresplash":{"source":"apache","extensions":["spl"]},"application/x-gca-compressed":{"source":"apache","extensions":["gca"]},"application/x-glulx":{"source":"apache","extensions":["ulx"]},"application/x-gnumeric":{"source":"apache","extensions":["gnumeric"]},"application/x-gramps-xml":{"source":"apache","extensions":["gramps"]},"application/x-gtar":{"source":"apache","extensions":["gtar"]},"application/x-gzip":{"source":"apache"},"application/x-hdf":{"source":"apache","extensions":["hdf"]},"application/x-httpd-php":{"compressible":true,"extensions":["php"]},"application/x-install-instructions":{"source":"apache","extensions":["install"]},"application/x-iso9660-image":{"source":"apache","extensions":["iso"]},"application/x-iwork-keynote-sffkey":{"extensions":["key"]},"application/x-iwork-numbers-sffnumbers":{"extensions":["numbers"]},"application/x-iwork-pages-sffpages":{"extensions":["pages"]},"application/x-java-archive-diff":{"source":"nginx","extensions":["jardiff"]},"application/x-java-jnlp-file":{"source":"apache","compressible":false,"extensions":["jnlp"]},"application/x-javascript":{"compressible":true},"application/x-keepass2":{"extensions":["kdbx"]},"application/x-latex":{"source":"apache","compressible":false,"extensions":["latex"]},"application/x-lua-bytecode":{"extensions":["luac"]},"application/x-lzh-compressed":{"source":"apache","extensions":["lzh","lha"]},"application/x-makeself":{"source":"nginx","extensions":["run"]},"application/x-mie":{"source":"apache","extensions":["mie"]},"application/x-mobipocket-ebook":{"source":"apache","extensions":["prc","mobi"]},"application/x-mpegurl":{"compressible":false},"application/x-ms-application":{"source":"apache","extensions":["application"]},"application/x-ms-shortcut":{"source":"apache","extensions":["lnk"]},"application/x-ms-wmd":{"source":"apache","extensions":["wmd"]},"application/x-ms-wmz":{"source":"apache","extensions":["wmz"]},"application/x-ms-xbap":{"source":"apache","extensions":["xbap"]},"application/x-msaccess":{"source":"apache","extensions":["mdb"]},"application/x-msbinder":{"source":"apache","extensions":["obd"]},"application/x-mscardfile":{"source":"apache","extensions":["crd"]},"application/x-msclip":{"source":"apache","extensions":["clp"]},"application/x-msdos-program":{"extensions":["exe"]},"application/x-msdownload":{"source":"apache","extensions":["exe","dll","com","bat","msi"]},"application/x-msmediaview":{"source":"apache","extensions":["mvb","m13","m14"]},"application/x-msmetafile":{"source":"apache","extensions":["wmf","wmz","emf","emz"]},"application/x-msmoney":{"source":"apache","extensions":["mny"]},"application/x-mspublisher":{"source":"apache","extensions":["pub"]},"application/x-msschedule":{"source":"apache","extensions":["scd"]},"application/x-msterminal":{"source":"apache","extensions":["trm"]},"application/x-mswrite":{"source":"apache","extensions":["wri"]},"application/x-netcdf":{"source":"apache","extensions":["nc","cdf"]},"application/x-ns-proxy-autoconfig":{"compressible":true,"extensions":["pac"]},"application/x-nzb":{"source":"apache","extensions":["nzb"]},"application/x-perl":{"source":"nginx","extensions":["pl","pm"]},"application/x-pilot":{"source":"nginx","extensions":["prc","pdb"]},"application/x-pkcs12":{"source":"apache","compressible":false,"extensions":["p12","pfx"]},"application/x-pkcs7-certificates":{"source":"apache","extensions":["p7b","spc"]},"application/x-pkcs7-certreqresp":{"source":"apache","extensions":["p7r"]},"application/x-pki-message":{"source":"iana"},"application/x-rar-compressed":{"source":"apache","compressible":false,"extensions":["rar"]},"application/x-redhat-package-manager":{"source":"nginx","extensions":["rpm"]},"application/x-research-info-systems":{"source":"apache","extensions":["ris"]},"application/x-sea":{"source":"nginx","extensions":["sea"]},"application/x-sh":{"source":"apache","compressible":true,"extensions":["sh"]},"application/x-shar":{"source":"apache","extensions":["shar"]},"application/x-shockwave-flash":{"source":"apache","compressible":false,"extensions":["swf"]},"application/x-silverlight-app":{"source":"apache","extensions":["xap"]},"application/x-sql":{"source":"apache","extensions":["sql"]},"application/x-stuffit":{"source":"apache","compressible":false,"extensions":["sit"]},"application/x-stuffitx":{"source":"apache","extensions":["sitx"]},"application/x-subrip":{"source":"apache","extensions":["srt"]},"application/x-sv4cpio":{"source":"apache","extensions":["sv4cpio"]},"application/x-sv4crc":{"source":"apache","extensions":["sv4crc"]},"application/x-t3vm-image":{"source":"apache","extensions":["t3"]},"application/x-tads":{"source":"apache","extensions":["gam"]},"application/x-tar":{"source":"apache","compressible":true,"extensions":["tar"]},"application/x-tcl":{"source":"apache","extensions":["tcl","tk"]},"application/x-tex":{"source":"apache","extensions":["tex"]},"application/x-tex-tfm":{"source":"apache","extensions":["tfm"]},"application/x-texinfo":{"source":"apache","extensions":["texinfo","texi"]},"application/x-tgif":{"source":"apache","extensions":["obj"]},"application/x-ustar":{"source":"apache","extensions":["ustar"]},"application/x-virtualbox-hdd":{"compressible":true,"extensions":["hdd"]},"application/x-virtualbox-ova":{"compressible":true,"extensions":["ova"]},"application/x-virtualbox-ovf":{"compressible":true,"extensions":["ovf"]},"application/x-virtualbox-vbox":{"compressible":true,"extensions":["vbox"]},"application/x-virtualbox-vbox-extpack":{"compressible":false,"extensions":["vbox-extpack"]},"application/x-virtualbox-vdi":{"compressible":true,"extensions":["vdi"]},"application/x-virtualbox-vhd":{"compressible":true,"extensions":["vhd"]},"application/x-virtualbox-vmdk":{"compressible":true,"extensions":["vmdk"]},"application/x-wais-source":{"source":"apache","extensions":["src"]},"application/x-web-app-manifest+json":{"compressible":true,"extensions":["webapp"]},"application/x-www-form-urlencoded":{"source":"iana","compressible":true},"application/x-x509-ca-cert":{"source":"iana","extensions":["der","crt","pem"]},"application/x-x509-ca-ra-cert":{"source":"iana"},"application/x-x509-next-ca-cert":{"source":"iana"},"application/x-xfig":{"source":"apache","extensions":["fig"]},"application/x-xliff+xml":{"source":"apache","compressible":true,"extensions":["xlf"]},"application/x-xpinstall":{"source":"apache","compressible":false,"extensions":["xpi"]},"application/x-xz":{"source":"apache","extensions":["xz"]},"application/x-zmachine":{"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{"source":"iana"},"application/xacml+xml":{"source":"iana","compressible":true},"application/xaml+xml":{"source":"apache","compressible":true,"extensions":["xaml"]},"application/xcap-att+xml":{"source":"iana","compressible":true,"extensions":["xav"]},"application/xcap-caps+xml":{"source":"iana","compressible":true,"extensions":["xca"]},"application/xcap-diff+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/xcap-el+xml":{"source":"iana","compressible":true,"extensions":["xel"]},"application/xcap-error+xml":{"source":"iana","compressible":true},"application/xcap-ns+xml":{"source":"iana","compressible":true,"extensions":["xns"]},"application/xcon-conference-info+xml":{"source":"iana","compressible":true},"application/xcon-conference-info-diff+xml":{"source":"iana","compressible":true},"application/xenc+xml":{"source":"iana","compressible":true,"extensions":["xenc"]},"application/xhtml+xml":{"source":"iana","compressible":true,"extensions":["xhtml","xht"]},"application/xhtml-voice+xml":{"source":"apache","compressible":true},"application/xliff+xml":{"source":"iana","compressible":true,"extensions":["xlf"]},"application/xml":{"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},"application/xml-dtd":{"source":"iana","compressible":true,"extensions":["dtd"]},"application/xml-external-parsed-entity":{"source":"iana"},"application/xml-patch+xml":{"source":"iana","compressible":true},"application/xmpp+xml":{"source":"iana","compressible":true},"application/xop+xml":{"source":"iana","compressible":true,"extensions":["xop"]},"application/xproc+xml":{"source":"apache","compressible":true,"extensions":["xpl"]},"application/xslt+xml":{"source":"iana","compressible":true,"extensions":["xsl","xslt"]},"application/xspf+xml":{"source":"apache","compressible":true,"extensions":["xspf"]},"application/xv+xml":{"source":"iana","compressible":true,"extensions":["mxml","xhvml","xvml","xvm"]},"application/yang":{"source":"iana","extensions":["yang"]},"application/yang-data+json":{"source":"iana","compressible":true},"application/yang-data+xml":{"source":"iana","compressible":true},"application/yang-patch+json":{"source":"iana","compressible":true},"application/yang-patch+xml":{"source":"iana","compressible":true},"application/yin+xml":{"source":"iana","compressible":true,"extensions":["yin"]},"application/zip":{"source":"iana","compressible":false,"extensions":["zip"]},"application/zlib":{"source":"iana"},"application/zstd":{"source":"iana"},"audio/1d-interleaved-parityfec":{"source":"iana"},"audio/32kadpcm":{"source":"iana"},"audio/3gpp":{"source":"iana","compressible":false,"extensions":["3gpp"]},"audio/3gpp2":{"source":"iana"},"audio/aac":{"source":"iana"},"audio/ac3":{"source":"iana"},"audio/adpcm":{"source":"apache","extensions":["adp"]},"audio/amr":{"source":"iana","extensions":["amr"]},"audio/amr-wb":{"source":"iana"},"audio/amr-wb+":{"source":"iana"},"audio/aptx":{"source":"iana"},"audio/asc":{"source":"iana"},"audio/atrac-advanced-lossless":{"source":"iana"},"audio/atrac-x":{"source":"iana"},"audio/atrac3":{"source":"iana"},"audio/basic":{"source":"iana","compressible":false,"extensions":["au","snd"]},"audio/bv16":{"source":"iana"},"audio/bv32":{"source":"iana"},"audio/clearmode":{"source":"iana"},"audio/cn":{"source":"iana"},"audio/dat12":{"source":"iana"},"audio/dls":{"source":"iana"},"audio/dsr-es201108":{"source":"iana"},"audio/dsr-es202050":{"source":"iana"},"audio/dsr-es202211":{"source":"iana"},"audio/dsr-es202212":{"source":"iana"},"audio/dv":{"source":"iana"},"audio/dvi4":{"source":"iana"},"audio/eac3":{"source":"iana"},"audio/encaprtp":{"source":"iana"},"audio/evrc":{"source":"iana"},"audio/evrc-qcp":{"source":"iana"},"audio/evrc0":{"source":"iana"},"audio/evrc1":{"source":"iana"},"audio/evrcb":{"source":"iana"},"audio/evrcb0":{"source":"iana"},"audio/evrcb1":{"source":"iana"},"audio/evrcnw":{"source":"iana"},"audio/evrcnw0":{"source":"iana"},"audio/evrcnw1":{"source":"iana"},"audio/evrcwb":{"source":"iana"},"audio/evrcwb0":{"source":"iana"},"audio/evrcwb1":{"source":"iana"},"audio/evs":{"source":"iana"},"audio/flexfec":{"source":"iana"},"audio/fwdred":{"source":"iana"},"audio/g711-0":{"source":"iana"},"audio/g719":{"source":"iana"},"audio/g722":{"source":"iana"},"audio/g7221":{"source":"iana"},"audio/g723":{"source":"iana"},"audio/g726-16":{"source":"iana"},"audio/g726-24":{"source":"iana"},"audio/g726-32":{"source":"iana"},"audio/g726-40":{"source":"iana"},"audio/g728":{"source":"iana"},"audio/g729":{"source":"iana"},"audio/g7291":{"source":"iana"},"audio/g729d":{"source":"iana"},"audio/g729e":{"source":"iana"},"audio/gsm":{"source":"iana"},"audio/gsm-efr":{"source":"iana"},"audio/gsm-hr-08":{"source":"iana"},"audio/ilbc":{"source":"iana"},"audio/ip-mr_v2.5":{"source":"iana"},"audio/isac":{"source":"apache"},"audio/l16":{"source":"iana"},"audio/l20":{"source":"iana"},"audio/l24":{"source":"iana","compressible":false},"audio/l8":{"source":"iana"},"audio/lpc":{"source":"iana"},"audio/melp":{"source":"iana"},"audio/melp1200":{"source":"iana"},"audio/melp2400":{"source":"iana"},"audio/melp600":{"source":"iana"},"audio/mhas":{"source":"iana"},"audio/midi":{"source":"apache","extensions":["mid","midi","kar","rmi"]},"audio/mobile-xmf":{"source":"iana","extensions":["mxmf"]},"audio/mp3":{"compressible":false,"extensions":["mp3"]},"audio/mp4":{"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},"audio/mp4a-latm":{"source":"iana"},"audio/mpa":{"source":"iana"},"audio/mpa-robust":{"source":"iana"},"audio/mpeg":{"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{"source":"iana"},"audio/musepack":{"source":"apache"},"audio/ogg":{"source":"iana","compressible":false,"extensions":["oga","ogg","spx","opus"]},"audio/opus":{"source":"iana"},"audio/parityfec":{"source":"iana"},"audio/pcma":{"source":"iana"},"audio/pcma-wb":{"source":"iana"},"audio/pcmu":{"source":"iana"},"audio/pcmu-wb":{"source":"iana"},"audio/prs.sid":{"source":"iana"},"audio/qcelp":{"source":"iana"},"audio/raptorfec":{"source":"iana"},"audio/red":{"source":"iana"},"audio/rtp-enc-aescm128":{"source":"iana"},"audio/rtp-midi":{"source":"iana"},"audio/rtploopback":{"source":"iana"},"audio/rtx":{"source":"iana"},"audio/s3m":{"source":"apache","extensions":["s3m"]},"audio/scip":{"source":"iana"},"audio/silk":{"source":"apache","extensions":["sil"]},"audio/smv":{"source":"iana"},"audio/smv-qcp":{"source":"iana"},"audio/smv0":{"source":"iana"},"audio/sofa":{"source":"iana"},"audio/sp-midi":{"source":"iana"},"audio/speex":{"source":"iana"},"audio/t140c":{"source":"iana"},"audio/t38":{"source":"iana"},"audio/telephone-event":{"source":"iana"},"audio/tetra_acelp":{"source":"iana"},"audio/tetra_acelp_bb":{"source":"iana"},"audio/tone":{"source":"iana"},"audio/tsvcis":{"source":"iana"},"audio/uemclip":{"source":"iana"},"audio/ulpfec":{"source":"iana"},"audio/usac":{"source":"iana"},"audio/vdvi":{"source":"iana"},"audio/vmr-wb":{"source":"iana"},"audio/vnd.3gpp.iufp":{"source":"iana"},"audio/vnd.4sb":{"source":"iana"},"audio/vnd.audiokoz":{"source":"iana"},"audio/vnd.celp":{"source":"iana"},"audio/vnd.cisco.nse":{"source":"iana"},"audio/vnd.cmles.radio-events":{"source":"iana"},"audio/vnd.cns.anp1":{"source":"iana"},"audio/vnd.cns.inf1":{"source":"iana"},"audio/vnd.dece.audio":{"source":"iana","extensions":["uva","uvva"]},"audio/vnd.digital-winds":{"source":"iana","extensions":["eol"]},"audio/vnd.dlna.adts":{"source":"iana"},"audio/vnd.dolby.heaac.1":{"source":"iana"},"audio/vnd.dolby.heaac.2":{"source":"iana"},"audio/vnd.dolby.mlp":{"source":"iana"},"audio/vnd.dolby.mps":{"source":"iana"},"audio/vnd.dolby.pl2":{"source":"iana"},"audio/vnd.dolby.pl2x":{"source":"iana"},"audio/vnd.dolby.pl2z":{"source":"iana"},"audio/vnd.dolby.pulse.1":{"source":"iana"},"audio/vnd.dra":{"source":"iana","extensions":["dra"]},"audio/vnd.dts":{"source":"iana","extensions":["dts"]},"audio/vnd.dts.hd":{"source":"iana","extensions":["dtshd"]},"audio/vnd.dts.uhd":{"source":"iana"},"audio/vnd.dvb.file":{"source":"iana"},"audio/vnd.everad.plj":{"source":"iana"},"audio/vnd.hns.audio":{"source":"iana"},"audio/vnd.lucent.voice":{"source":"iana","extensions":["lvp"]},"audio/vnd.ms-playready.media.pya":{"source":"iana","extensions":["pya"]},"audio/vnd.nokia.mobile-xmf":{"source":"iana"},"audio/vnd.nortel.vbk":{"source":"iana"},"audio/vnd.nuera.ecelp4800":{"source":"iana","extensions":["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{"source":"iana","extensions":["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{"source":"iana","extensions":["ecelp9600"]},"audio/vnd.octel.sbc":{"source":"iana"},"audio/vnd.presonus.multitrack":{"source":"iana"},"audio/vnd.qcelp":{"source":"iana"},"audio/vnd.rhetorex.32kadpcm":{"source":"iana"},"audio/vnd.rip":{"source":"iana","extensions":["rip"]},"audio/vnd.rn-realaudio":{"compressible":false},"audio/vnd.sealedmedia.softseal.mpeg":{"source":"iana"},"audio/vnd.vmx.cvsd":{"source":"iana"},"audio/vnd.wave":{"compressible":false},"audio/vorbis":{"source":"iana","compressible":false},"audio/vorbis-config":{"source":"iana"},"audio/wav":{"compressible":false,"extensions":["wav"]},"audio/wave":{"compressible":false,"extensions":["wav"]},"audio/webm":{"source":"apache","compressible":false,"extensions":["weba"]},"audio/x-aac":{"source":"apache","compressible":false,"extensions":["aac"]},"audio/x-aiff":{"source":"apache","extensions":["aif","aiff","aifc"]},"audio/x-caf":{"source":"apache","compressible":false,"extensions":["caf"]},"audio/x-flac":{"source":"apache","extensions":["flac"]},"audio/x-m4a":{"source":"nginx","extensions":["m4a"]},"audio/x-matroska":{"source":"apache","extensions":["mka"]},"audio/x-mpegurl":{"source":"apache","extensions":["m3u"]},"audio/x-ms-wax":{"source":"apache","extensions":["wax"]},"audio/x-ms-wma":{"source":"apache","extensions":["wma"]},"audio/x-pn-realaudio":{"source":"apache","extensions":["ram","ra"]},"audio/x-pn-realaudio-plugin":{"source":"apache","extensions":["rmp"]},"audio/x-realaudio":{"source":"nginx","extensions":["ra"]},"audio/x-tta":{"source":"apache"},"audio/x-wav":{"source":"apache","extensions":["wav"]},"audio/xm":{"source":"apache","extensions":["xm"]},"chemical/x-cdx":{"source":"apache","extensions":["cdx"]},"chemical/x-cif":{"source":"apache","extensions":["cif"]},"chemical/x-cmdf":{"source":"apache","extensions":["cmdf"]},"chemical/x-cml":{"source":"apache","extensions":["cml"]},"chemical/x-csml":{"source":"apache","extensions":["csml"]},"chemical/x-pdb":{"source":"apache"},"chemical/x-xyz":{"source":"apache","extensions":["xyz"]},"font/collection":{"source":"iana","extensions":["ttc"]},"font/otf":{"source":"iana","compressible":true,"extensions":["otf"]},"font/sfnt":{"source":"iana"},"font/ttf":{"source":"iana","compressible":true,"extensions":["ttf"]},"font/woff":{"source":"iana","extensions":["woff"]},"font/woff2":{"source":"iana","extensions":["woff2"]},"image/aces":{"source":"iana","extensions":["exr"]},"image/apng":{"compressible":false,"extensions":["apng"]},"image/avci":{"source":"iana","extensions":["avci"]},"image/avcs":{"source":"iana","extensions":["avcs"]},"image/avif":{"source":"iana","compressible":false,"extensions":["avif"]},"image/bmp":{"source":"iana","compressible":true,"extensions":["bmp"]},"image/cgm":{"source":"iana","extensions":["cgm"]},"image/dicom-rle":{"source":"iana","extensions":["drle"]},"image/emf":{"source":"iana","extensions":["emf"]},"image/fits":{"source":"iana","extensions":["fits"]},"image/g3fax":{"source":"iana","extensions":["g3"]},"image/gif":{"source":"iana","compressible":false,"extensions":["gif"]},"image/heic":{"source":"iana","extensions":["heic"]},"image/heic-sequence":{"source":"iana","extensions":["heics"]},"image/heif":{"source":"iana","extensions":["heif"]},"image/heif-sequence":{"source":"iana","extensions":["heifs"]},"image/hej2k":{"source":"iana","extensions":["hej2"]},"image/hsj2":{"source":"iana","extensions":["hsj2"]},"image/ief":{"source":"iana","extensions":["ief"]},"image/jls":{"source":"iana","extensions":["jls"]},"image/jp2":{"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},"image/jpeg":{"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},"image/jph":{"source":"iana","extensions":["jph"]},"image/jphc":{"source":"iana","extensions":["jhc"]},"image/jpm":{"source":"iana","compressible":false,"extensions":["jpm"]},"image/jpx":{"source":"iana","compressible":false,"extensions":["jpx","jpf"]},"image/jxr":{"source":"iana","extensions":["jxr"]},"image/jxra":{"source":"iana","extensions":["jxra"]},"image/jxrs":{"source":"iana","extensions":["jxrs"]},"image/jxs":{"source":"iana","extensions":["jxs"]},"image/jxsc":{"source":"iana","extensions":["jxsc"]},"image/jxsi":{"source":"iana","extensions":["jxsi"]},"image/jxss":{"source":"iana","extensions":["jxss"]},"image/ktx":{"source":"iana","extensions":["ktx"]},"image/ktx2":{"source":"iana","extensions":["ktx2"]},"image/naplps":{"source":"iana"},"image/pjpeg":{"compressible":false},"image/png":{"source":"iana","compressible":false,"extensions":["png"]},"image/prs.btif":{"source":"iana","extensions":["btif"]},"image/prs.pti":{"source":"iana","extensions":["pti"]},"image/pwg-raster":{"source":"iana"},"image/sgi":{"source":"apache","extensions":["sgi"]},"image/svg+xml":{"source":"iana","compressible":true,"extensions":["svg","svgz"]},"image/t38":{"source":"iana","extensions":["t38"]},"image/tiff":{"source":"iana","compressible":false,"extensions":["tif","tiff"]},"image/tiff-fx":{"source":"iana","extensions":["tfx"]},"image/vnd.adobe.photoshop":{"source":"iana","compressible":true,"extensions":["psd"]},"image/vnd.airzip.accelerator.azv":{"source":"iana","extensions":["azv"]},"image/vnd.cns.inf2":{"source":"iana"},"image/vnd.dece.graphic":{"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{"source":"iana","extensions":["djvu","djv"]},"image/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"image/vnd.dwg":{"source":"iana","extensions":["dwg"]},"image/vnd.dxf":{"source":"iana","extensions":["dxf"]},"image/vnd.fastbidsheet":{"source":"iana","extensions":["fbs"]},"image/vnd.fpx":{"source":"iana","extensions":["fpx"]},"image/vnd.fst":{"source":"iana","extensions":["fst"]},"image/vnd.fujixerox.edmics-mmr":{"source":"iana","extensions":["mmr"]},"image/vnd.fujixerox.edmics-rlc":{"source":"iana","extensions":["rlc"]},"image/vnd.globalgraphics.pgb":{"source":"iana"},"image/vnd.microsoft.icon":{"source":"iana","compressible":true,"extensions":["ico"]},"image/vnd.mix":{"source":"iana"},"image/vnd.mozilla.apng":{"source":"iana"},"image/vnd.ms-dds":{"compressible":true,"extensions":["dds"]},"image/vnd.ms-modi":{"source":"iana","extensions":["mdi"]},"image/vnd.ms-photo":{"source":"apache","extensions":["wdp"]},"image/vnd.net-fpx":{"source":"iana","extensions":["npx"]},"image/vnd.pco.b16":{"source":"iana","extensions":["b16"]},"image/vnd.radiance":{"source":"iana"},"image/vnd.sealed.png":{"source":"iana"},"image/vnd.sealedmedia.softseal.gif":{"source":"iana"},"image/vnd.sealedmedia.softseal.jpg":{"source":"iana"},"image/vnd.svf":{"source":"iana"},"image/vnd.tencent.tap":{"source":"iana","extensions":["tap"]},"image/vnd.valve.source.texture":{"source":"iana","extensions":["vtf"]},"image/vnd.wap.wbmp":{"source":"iana","extensions":["wbmp"]},"image/vnd.xiff":{"source":"iana","extensions":["xif"]},"image/vnd.zbrush.pcx":{"source":"iana","extensions":["pcx"]},"image/webp":{"source":"apache","extensions":["webp"]},"image/wmf":{"source":"iana","extensions":["wmf"]},"image/x-3ds":{"source":"apache","extensions":["3ds"]},"image/x-cmu-raster":{"source":"apache","extensions":["ras"]},"image/x-cmx":{"source":"apache","extensions":["cmx"]},"image/x-freehand":{"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{"source":"apache","compressible":true,"extensions":["ico"]},"image/x-jng":{"source":"nginx","extensions":["jng"]},"image/x-mrsid-image":{"source":"apache","extensions":["sid"]},"image/x-ms-bmp":{"source":"nginx","compressible":true,"extensions":["bmp"]},"image/x-pcx":{"source":"apache","extensions":["pcx"]},"image/x-pict":{"source":"apache","extensions":["pic","pct"]},"image/x-portable-anymap":{"source":"apache","extensions":["pnm"]},"image/x-portable-bitmap":{"source":"apache","extensions":["pbm"]},"image/x-portable-graymap":{"source":"apache","extensions":["pgm"]},"image/x-portable-pixmap":{"source":"apache","extensions":["ppm"]},"image/x-rgb":{"source":"apache","extensions":["rgb"]},"image/x-tga":{"source":"apache","extensions":["tga"]},"image/x-xbitmap":{"source":"apache","extensions":["xbm"]},"image/x-xcf":{"compressible":false},"image/x-xpixmap":{"source":"apache","extensions":["xpm"]},"image/x-xwindowdump":{"source":"apache","extensions":["xwd"]},"message/cpim":{"source":"iana"},"message/delivery-status":{"source":"iana"},"message/disposition-notification":{"source":"iana","extensions":["disposition-notification"]},"message/external-body":{"source":"iana"},"message/feedback-report":{"source":"iana"},"message/global":{"source":"iana","extensions":["u8msg"]},"message/global-delivery-status":{"source":"iana","extensions":["u8dsn"]},"message/global-disposition-notification":{"source":"iana","extensions":["u8mdn"]},"message/global-headers":{"source":"iana","extensions":["u8hdr"]},"message/http":{"source":"iana","compressible":false},"message/imdn+xml":{"source":"iana","compressible":true},"message/news":{"source":"iana"},"message/partial":{"source":"iana","compressible":false},"message/rfc822":{"source":"iana","compressible":true,"extensions":["eml","mime"]},"message/s-http":{"source":"iana"},"message/sip":{"source":"iana"},"message/sipfrag":{"source":"iana"},"message/tracking-status":{"source":"iana"},"message/vnd.si.simp":{"source":"iana"},"message/vnd.wfa.wsc":{"source":"iana","extensions":["wsc"]},"model/3mf":{"source":"iana","extensions":["3mf"]},"model/e57":{"source":"iana"},"model/gltf+json":{"source":"iana","compressible":true,"extensions":["gltf"]},"model/gltf-binary":{"source":"iana","compressible":true,"extensions":["glb"]},"model/iges":{"source":"iana","compressible":false,"extensions":["igs","iges"]},"model/mesh":{"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},"model/mtl":{"source":"iana","extensions":["mtl"]},"model/obj":{"source":"iana","extensions":["obj"]},"model/step":{"source":"iana"},"model/step+xml":{"source":"iana","compressible":true,"extensions":["stpx"]},"model/step+zip":{"source":"iana","compressible":false,"extensions":["stpz"]},"model/step-xml+zip":{"source":"iana","compressible":false,"extensions":["stpxz"]},"model/stl":{"source":"iana","extensions":["stl"]},"model/vnd.collada+xml":{"source":"iana","compressible":true,"extensions":["dae"]},"model/vnd.dwf":{"source":"iana","extensions":["dwf"]},"model/vnd.flatland.3dml":{"source":"iana"},"model/vnd.gdl":{"source":"iana","extensions":["gdl"]},"model/vnd.gs-gdl":{"source":"apache"},"model/vnd.gs.gdl":{"source":"iana"},"model/vnd.gtw":{"source":"iana","extensions":["gtw"]},"model/vnd.moml+xml":{"source":"iana","compressible":true},"model/vnd.mts":{"source":"iana","extensions":["mts"]},"model/vnd.opengex":{"source":"iana","extensions":["ogex"]},"model/vnd.parasolid.transmit.binary":{"source":"iana","extensions":["x_b"]},"model/vnd.parasolid.transmit.text":{"source":"iana","extensions":["x_t"]},"model/vnd.pytha.pyox":{"source":"iana"},"model/vnd.rosette.annotated-data-model":{"source":"iana"},"model/vnd.sap.vds":{"source":"iana","extensions":["vds"]},"model/vnd.usdz+zip":{"source":"iana","compressible":false,"extensions":["usdz"]},"model/vnd.valve.source.compiled-map":{"source":"iana","extensions":["bsp"]},"model/vnd.vtu":{"source":"iana","extensions":["vtu"]},"model/vrml":{"source":"iana","compressible":false,"extensions":["wrl","vrml"]},"model/x3d+binary":{"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},"model/x3d+fastinfoset":{"source":"iana","extensions":["x3db"]},"model/x3d+vrml":{"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},"model/x3d+xml":{"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},"model/x3d-vrml":{"source":"iana","extensions":["x3dv"]},"multipart/alternative":{"source":"iana","compressible":false},"multipart/appledouble":{"source":"iana"},"multipart/byteranges":{"source":"iana"},"multipart/digest":{"source":"iana"},"multipart/encrypted":{"source":"iana","compressible":false},"multipart/form-data":{"source":"iana","compressible":false},"multipart/header-set":{"source":"iana"},"multipart/mixed":{"source":"iana"},"multipart/multilingual":{"source":"iana"},"multipart/parallel":{"source":"iana"},"multipart/related":{"source":"iana","compressible":false},"multipart/report":{"source":"iana"},"multipart/signed":{"source":"iana","compressible":false},"multipart/vnd.bint.med-plus":{"source":"iana"},"multipart/voice-message":{"source":"iana"},"multipart/x-mixed-replace":{"source":"iana"},"text/1d-interleaved-parityfec":{"source":"iana"},"text/cache-manifest":{"source":"iana","compressible":true,"extensions":["appcache","manifest"]},"text/calendar":{"source":"iana","extensions":["ics","ifb"]},"text/calender":{"compressible":true},"text/cmd":{"compressible":true},"text/coffeescript":{"extensions":["coffee","litcoffee"]},"text/cql":{"source":"iana"},"text/cql-expression":{"source":"iana"},"text/cql-identifier":{"source":"iana"},"text/css":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},"text/csv":{"source":"iana","compressible":true,"extensions":["csv"]},"text/csv-schema":{"source":"iana"},"text/directory":{"source":"iana"},"text/dns":{"source":"iana"},"text/ecmascript":{"source":"iana"},"text/encaprtp":{"source":"iana"},"text/enriched":{"source":"iana"},"text/fhirpath":{"source":"iana"},"text/flexfec":{"source":"iana"},"text/fwdred":{"source":"iana"},"text/gff3":{"source":"iana"},"text/grammar-ref-list":{"source":"iana"},"text/html":{"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},"text/jade":{"extensions":["jade"]},"text/javascript":{"source":"iana","compressible":true},"text/jcr-cnd":{"source":"iana"},"text/jsx":{"compressible":true,"extensions":["jsx"]},"text/less":{"compressible":true,"extensions":["less"]},"text/markdown":{"source":"iana","compressible":true,"extensions":["markdown","md"]},"text/mathml":{"source":"nginx","extensions":["mml"]},"text/mdx":{"compressible":true,"extensions":["mdx"]},"text/mizar":{"source":"iana"},"text/n3":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["n3"]},"text/parameters":{"source":"iana","charset":"UTF-8"},"text/parityfec":{"source":"iana"},"text/plain":{"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{"source":"iana","charset":"UTF-8"},"text/prs.fallenstein.rst":{"source":"iana"},"text/prs.lines.tag":{"source":"iana","extensions":["dsc"]},"text/prs.prop.logic":{"source":"iana"},"text/raptorfec":{"source":"iana"},"text/red":{"source":"iana"},"text/rfc822-headers":{"source":"iana"},"text/richtext":{"source":"iana","compressible":true,"extensions":["rtx"]},"text/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"text/rtp-enc-aescm128":{"source":"iana"},"text/rtploopback":{"source":"iana"},"text/rtx":{"source":"iana"},"text/sgml":{"source":"iana","extensions":["sgml","sgm"]},"text/shaclc":{"source":"iana"},"text/shex":{"source":"iana","extensions":["shex"]},"text/slim":{"extensions":["slim","slm"]},"text/spdx":{"source":"iana","extensions":["spdx"]},"text/strings":{"source":"iana"},"text/stylus":{"extensions":["stylus","styl"]},"text/t140":{"source":"iana"},"text/tab-separated-values":{"source":"iana","compressible":true,"extensions":["tsv"]},"text/troff":{"source":"iana","extensions":["t","tr","roff","man","me","ms"]},"text/turtle":{"source":"iana","charset":"UTF-8","extensions":["ttl"]},"text/ulpfec":{"source":"iana"},"text/uri-list":{"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},"text/vcard":{"source":"iana","compressible":true,"extensions":["vcard"]},"text/vnd.a":{"source":"iana"},"text/vnd.abc":{"source":"iana"},"text/vnd.ascii-art":{"source":"iana"},"text/vnd.curl":{"source":"iana","extensions":["curl"]},"text/vnd.curl.dcurl":{"source":"apache","extensions":["dcurl"]},"text/vnd.curl.mcurl":{"source":"apache","extensions":["mcurl"]},"text/vnd.curl.scurl":{"source":"apache","extensions":["scurl"]},"text/vnd.debian.copyright":{"source":"iana","charset":"UTF-8"},"text/vnd.dmclientscript":{"source":"iana"},"text/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"text/vnd.esmertec.theme-descriptor":{"source":"iana","charset":"UTF-8"},"text/vnd.familysearch.gedcom":{"source":"iana","extensions":["ged"]},"text/vnd.ficlab.flt":{"source":"iana"},"text/vnd.fly":{"source":"iana","extensions":["fly"]},"text/vnd.fmi.flexstor":{"source":"iana","extensions":["flx"]},"text/vnd.gml":{"source":"iana"},"text/vnd.graphviz":{"source":"iana","extensions":["gv"]},"text/vnd.hans":{"source":"iana"},"text/vnd.hgl":{"source":"iana"},"text/vnd.in3d.3dml":{"source":"iana","extensions":["3dml"]},"text/vnd.in3d.spot":{"source":"iana","extensions":["spot"]},"text/vnd.iptc.newsml":{"source":"iana"},"text/vnd.iptc.nitf":{"source":"iana"},"text/vnd.latex-z":{"source":"iana"},"text/vnd.motorola.reflex":{"source":"iana"},"text/vnd.ms-mediapackage":{"source":"iana"},"text/vnd.net2phone.commcenter.command":{"source":"iana"},"text/vnd.radisys.msml-basic-layout":{"source":"iana"},"text/vnd.senx.warpscript":{"source":"iana"},"text/vnd.si.uricatalogue":{"source":"iana"},"text/vnd.sosi":{"source":"iana"},"text/vnd.sun.j2me.app-descriptor":{"source":"iana","charset":"UTF-8","extensions":["jad"]},"text/vnd.trolltech.linguist":{"source":"iana","charset":"UTF-8"},"text/vnd.wap.si":{"source":"iana"},"text/vnd.wap.sl":{"source":"iana"},"text/vnd.wap.wml":{"source":"iana","extensions":["wml"]},"text/vnd.wap.wmlscript":{"source":"iana","extensions":["wmls"]},"text/vtt":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["vtt"]},"text/x-asm":{"source":"apache","extensions":["s","asm"]},"text/x-c":{"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{"source":"nginx","extensions":["htc"]},"text/x-fortran":{"source":"apache","extensions":["f","for","f77","f90"]},"text/x-gwt-rpc":{"compressible":true},"text/x-handlebars-template":{"extensions":["hbs"]},"text/x-java-source":{"source":"apache","extensions":["java"]},"text/x-jquery-tmpl":{"compressible":true},"text/x-lua":{"extensions":["lua"]},"text/x-markdown":{"compressible":true,"extensions":["mkd"]},"text/x-nfo":{"source":"apache","extensions":["nfo"]},"text/x-opml":{"source":"apache","extensions":["opml"]},"text/x-org":{"compressible":true,"extensions":["org"]},"text/x-pascal":{"source":"apache","extensions":["p","pas"]},"text/x-processing":{"compressible":true,"extensions":["pde"]},"text/x-sass":{"extensions":["sass"]},"text/x-scss":{"extensions":["scss"]},"text/x-setext":{"source":"apache","extensions":["etx"]},"text/x-sfv":{"source":"apache","extensions":["sfv"]},"text/x-suse-ymp":{"compressible":true,"extensions":["ymp"]},"text/x-uuencode":{"source":"apache","extensions":["uu"]},"text/x-vcalendar":{"source":"apache","extensions":["vcs"]},"text/x-vcard":{"source":"apache","extensions":["vcf"]},"text/xml":{"source":"iana","compressible":true,"extensions":["xml"]},"text/xml-external-parsed-entity":{"source":"iana"},"text/yaml":{"compressible":true,"extensions":["yaml","yml"]},"video/1d-interleaved-parityfec":{"source":"iana"},"video/3gpp":{"source":"iana","extensions":["3gp","3gpp"]},"video/3gpp-tt":{"source":"iana"},"video/3gpp2":{"source":"iana","extensions":["3g2"]},"video/av1":{"source":"iana"},"video/bmpeg":{"source":"iana"},"video/bt656":{"source":"iana"},"video/celb":{"source":"iana"},"video/dv":{"source":"iana"},"video/encaprtp":{"source":"iana"},"video/ffv1":{"source":"iana"},"video/flexfec":{"source":"iana"},"video/h261":{"source":"iana","extensions":["h261"]},"video/h263":{"source":"iana","extensions":["h263"]},"video/h263-1998":{"source":"iana"},"video/h263-2000":{"source":"iana"},"video/h264":{"source":"iana","extensions":["h264"]},"video/h264-rcdo":{"source":"iana"},"video/h264-svc":{"source":"iana"},"video/h265":{"source":"iana"},"video/iso.segment":{"source":"iana","extensions":["m4s"]},"video/jpeg":{"source":"iana","extensions":["jpgv"]},"video/jpeg2000":{"source":"iana"},"video/jpm":{"source":"apache","extensions":["jpm","jpgm"]},"video/jxsv":{"source":"iana"},"video/mj2":{"source":"iana","extensions":["mj2","mjp2"]},"video/mp1s":{"source":"iana"},"video/mp2p":{"source":"iana"},"video/mp2t":{"source":"iana","extensions":["ts"]},"video/mp4":{"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},"video/mp4v-es":{"source":"iana"},"video/mpeg":{"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{"source":"iana"},"video/mpv":{"source":"iana"},"video/nv":{"source":"iana"},"video/ogg":{"source":"iana","compressible":false,"extensions":["ogv"]},"video/parityfec":{"source":"iana"},"video/pointer":{"source":"iana"},"video/quicktime":{"source":"iana","compressible":false,"extensions":["qt","mov"]},"video/raptorfec":{"source":"iana"},"video/raw":{"source":"iana"},"video/rtp-enc-aescm128":{"source":"iana"},"video/rtploopback":{"source":"iana"},"video/rtx":{"source":"iana"},"video/scip":{"source":"iana"},"video/smpte291":{"source":"iana"},"video/smpte292m":{"source":"iana"},"video/ulpfec":{"source":"iana"},"video/vc1":{"source":"iana"},"video/vc2":{"source":"iana"},"video/vnd.cctv":{"source":"iana"},"video/vnd.dece.hd":{"source":"iana","extensions":["uvh","uvvh"]},"video/vnd.dece.mobile":{"source":"iana","extensions":["uvm","uvvm"]},"video/vnd.dece.mp4":{"source":"iana"},"video/vnd.dece.pd":{"source":"iana","extensions":["uvp","uvvp"]},"video/vnd.dece.sd":{"source":"iana","extensions":["uvs","uvvs"]},"video/vnd.dece.video":{"source":"iana","extensions":["uvv","uvvv"]},"video/vnd.directv.mpeg":{"source":"iana"},"video/vnd.directv.mpeg-tts":{"source":"iana"},"video/vnd.dlna.mpeg-tts":{"source":"iana"},"video/vnd.dvb.file":{"source":"iana","extensions":["dvb"]},"video/vnd.fvt":{"source":"iana","extensions":["fvt"]},"video/vnd.hns.video":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.ttsavc":{"source":"iana"},"video/vnd.iptvforum.ttsmpeg2":{"source":"iana"},"video/vnd.motorola.video":{"source":"iana"},"video/vnd.motorola.videop":{"source":"iana"},"video/vnd.mpegurl":{"source":"iana","extensions":["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{"source":"iana","extensions":["pyv"]},"video/vnd.nokia.interleaved-multimedia":{"source":"iana"},"video/vnd.nokia.mp4vr":{"source":"iana"},"video/vnd.nokia.videovoip":{"source":"iana"},"video/vnd.objectvideo":{"source":"iana"},"video/vnd.radgamettools.bink":{"source":"iana"},"video/vnd.radgamettools.smacker":{"source":"iana"},"video/vnd.sealed.mpeg1":{"source":"iana"},"video/vnd.sealed.mpeg4":{"source":"iana"},"video/vnd.sealed.swf":{"source":"iana"},"video/vnd.sealedmedia.softseal.mov":{"source":"iana"},"video/vnd.uvvu.mp4":{"source":"iana","extensions":["uvu","uvvu"]},"video/vnd.vivo":{"source":"iana","extensions":["viv"]},"video/vnd.youtube.yt":{"source":"iana"},"video/vp8":{"source":"iana"},"video/vp9":{"source":"iana"},"video/webm":{"source":"apache","compressible":false,"extensions":["webm"]},"video/x-f4v":{"source":"apache","extensions":["f4v"]},"video/x-fli":{"source":"apache","extensions":["fli"]},"video/x-flv":{"source":"apache","compressible":false,"extensions":["flv"]},"video/x-m4v":{"source":"apache","extensions":["m4v"]},"video/x-matroska":{"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},"video/x-mng":{"source":"apache","extensions":["mng"]},"video/x-ms-asf":{"source":"apache","extensions":["asf","asx"]},"video/x-ms-vob":{"source":"apache","extensions":["vob"]},"video/x-ms-wm":{"source":"apache","extensions":["wm"]},"video/x-ms-wmv":{"source":"apache","compressible":false,"extensions":["wmv"]},"video/x-ms-wmx":{"source":"apache","extensions":["wmx"]},"video/x-ms-wvx":{"source":"apache","extensions":["wvx"]},"video/x-msvideo":{"source":"apache","extensions":["avi"]},"video/x-sgi-movie":{"source":"apache","extensions":["movie"]},"video/x-smv":{"source":"apache","extensions":["smv"]},"x-conference/x-cooltalk":{"source":"apache","extensions":["ice"]},"x-shader/x-fragment":{"compressible":true},"x-shader/x-vertex":{"compressible":true}}');

/***/ }),

/***/ 6854:
/***/ ((module) => {

module.exports = JSON.parse('{"name":"resend","version":"0.17.1","description":"Node.js library for the Resend API","main":"build/src/index.js","typings":"build/src/index.d.ts","files":["build/"],"scripts":{"build":"tsc -p .","lint":"tslint -p tsconfig.json -c tslint.json","test":"jest","test:watch":"jest --watch","prettier":"prettier \\"src/**/*.{js,ts,tsx}\\" --check","format":"prettier \\"src/**/*.{js,ts,tsx}\\" --write","prepublishOnly":"yarn run build"},"repository":{"type":"git","url":"git+https://github.com/resend-inc/resend-node.git"},"author":"","license":"MIT","bugs":{"url":"https://github.com/resend-inc/resend-node/issues"},"homepage":"https://github.com/resend-inc/resend-node#readme","dependencies":{"@react-email/render":"0.0.7","axios":"1.4.0","type-fest":"3.13.0"},"devDependencies":{"@types/jest":"29.5.3","@types/node":"18.16.2","@types/react":"18.2.0","axios-mock-adapter":"1.21.5","jest":"29.6.1","prettier":"3.0.0","supertest":"6.3.3","ts-jest":"29.1.1","tslint":"6.1.3","typescript":"5.1.6"}}');

/***/ })

};
;